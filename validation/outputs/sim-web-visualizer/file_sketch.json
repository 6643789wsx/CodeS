[
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "setup.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsetup.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"Setup script \"\"\"\nimport re\nfrom pathlib import Path\nfrom setuptools import find_packages, setup\n\n_here = Path(__file__).resolve().parent\nname = \"sim_web_visualizer\"\nwith open(_here / name / \"__init__.py\") as f:\n    meta_match = re.search(\"^__version__ = ['\\\\\\\"]([^'\\\\\\\"]*)['\\\\\\\"]\", f.read(), re.M)\n    if meta_match:\n        version = meta_match.group(1)\n    else:\n        raise RuntimeError(\"Unable to find __version__ string.\")\ncore_requirements = [\n    \"numpy<=1.23.0\",\n    \"numpy-quaternion\",\n    \"transforms3d\",\n    \"dm_control>=1.0.0\",\n    \"anytree\",\n    \"trimesh\",\n    \"pycollada\",\n    \"mujoco>=2.2.0\",\n    \"meshcat-sim-web-fork\",\n]\nisaac_requirements = [\n    \"hydra-core\",\n    \"gym==0.23.1\",\n    \"rl-games\",\n    \"torch\",\n    \"pyvirtualdisplay\",\n    \"omegaconf\",\n    \"jinja2\",\n]\nsapien_requirements = [\"mani-skill2\"]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Natural Language :: English\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\n\n\ndef setup_package():\n    pass\n\n\nsetup_package()\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "example/isaacgym/run_isaacgym_training_viz.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nexample/isaacgym/run_isaacgym_training_viz.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport os\nimport sys\nfrom datetime import datetime\nimport isaacgym\nfrom sim_web_visualizer.isaac_visualizer_client import (\n    bind_visualizer_to_gym,\n    create_isaac_visualizer,\n    set_gpu_pipeline,\n)\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"IsaacGymEnvs\"))\nimport gym\nimport hydra\nfrom hydra.utils import to_absolute_path\nfrom isaacgym import gymapi\nfrom isaacgymenvs.pbt.pbt import PbtAlgoObserver, initial_pbt_check\nfrom isaacgymenvs.tasks import isaacgym_task_map\nfrom isaacgymenvs.tasks.base import vec_task\nfrom isaacgymenvs.utils.reformat import omegaconf_to_dict, print_dict\nfrom isaacgymenvs.utils.utils import set_np_formatting, set_seed\nfrom omegaconf import DictConfig, OmegaConf\n\n\ndef wrapped_create_sim(\n    self: vec_task.VecTask,\n    compute_device: int,\n    graphics_device: int,\n    physics_engine,\n    sim_params: gymapi.SimParams,\n):\n    pass\n\n\nvec_task.VecTask.create_sim = wrapped_create_sim\ncreate_isaac_visualizer(\n    port=6000, host=\"localhost\", keep_default_viewer=False, max_env=2\n)\n\n\ndef preprocess_train_config(cfg, config_dict):\n    \"\"\"\n    Adding common configuration parameters to the rl_games train config.\n    An alternative to this is inferring them in task-specific .yaml files, but that requires repeating the same\n    variable interpolations in each config.\n    \"\"\"\n    pass\n\n\n@hydra.main(config_name=\"config\", config_path=\"./cfg\")\ndef launch_rlg_hydra(cfg: DictConfig):\n    pass\n\n\nif __name__ == \"__main__\":\n    launch_rlg_hydra()\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "example/isaacgym/run_isaacgym_viz.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nexample/isaacgym/run_isaacgym_viz.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport os\nimport sys\nimport isaacgym\nimport torch\nfrom isaacgym import gymapi\nfrom sim_web_visualizer.isaac_visualizer_client import (\n    bind_visualizer_to_gym,\n    create_isaac_visualizer,\n    set_gpu_pipeline,\n)\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"IsaacGymEnvs\"))\nimport isaacgymenvs\nfrom isaacgymenvs.tasks.base import vec_task\n\n\ndef wrapped_create_sim(\n    self: vec_task.VecTask,\n    compute_device: int,\n    graphics_device: int,\n    physics_engine,\n    sim_params: gymapi.SimParams,\n):\n    pass\n\n\nvec_task.VecTask.create_sim = wrapped_create_sim\ncreate_isaac_visualizer(\n    port=6000, host=\"localhost\", keep_default_viewer=True, max_env=4\n)\ndevice = \"cuda\"\nnum_env = 8\nrl_device = device\nenvs = isaacgymenvs.make(\n    seed=0,\n    task=\"AllegroHand\",\n    num_envs=num_env,\n    sim_device=device,\n    rl_device=device,\n    graphics_device_id=0,\n    headless=False,\n)\nprint(\"Observation space is\", envs.observation_space)\nprint(\"Action space is\", envs.action_space)\ntry:\n    while True:\n        envs.reset()\n        for _ in range(500):\n            obs, reward, done, info = envs.step(\n                torch.rand((num_env,) + envs.action_space.shape, device=device)\n            )\nexcept KeyboardInterrupt:\n    print(\"Keyboard interrupt, shutting down.\\n\")\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "example/sapien/hello_world.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nexample/sapien/hello_world.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport sapien.core as sapien\nfrom meshcat.servers.zmqserver import start_zmq_server_as_subprocess\nfrom sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    start_zmq_server_as_subprocess()\n    main()\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "example/sapien/replay_maniskill_demo.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nexample/sapien/replay_maniskill_demo.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\nPort ManiSkill2 demonstration replay visualization to web visualizer\n# Reference: https://github.com/haosulab/ManiSkill2/tree/main/examples/tutorials/imitation-learning\n\n\"\"\"\nimport argparse\nimport os\nfrom typing import Optional\nimport gymnasium as gym\nimport h5py\nimport numpy as np\nimport sapien.core as sapien\nfrom mani_skill2.envs import sapien_env\nfrom mani_skill2.utils.io_utils import load_json\nfrom meshcat.servers.zmqserver import start_zmq_server_as_subprocess\nfrom sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer\nfrom tqdm.auto import tqdm\n\n\ndef wrapped_setup_scene(\n    self: sapien_env.BaseEnv, scene_config: Optional[sapien.SceneConfig] = None\n):\n    pass\n\n\ndef wrapped_setup_viewer(self):\n    pass\n\n\nstart_zmq_server_as_subprocess()\nkeep_on_screen_renderer = True\ncreate_sapien_visualizer(\n    port=6000, host=\"localhost\", keep_default_viewer=keep_on_screen_renderer\n)\nsapien_env.BaseEnv._setup_scene = wrapped_setup_scene\nsapien_env.BaseEnv._setup_viewer = wrapped_setup_viewer\n\n\ndef parse_args(args=None):\n    pass\n\n\ndef main(args):\n    pass\n\n\nif __name__ == \"__main__\":\n    main(parse_args())\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "example/sapien/run_sapien_viz.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nexample/sapien/run_sapien_viz.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\nOriginal mani-skill2 code without the web visualization\n# Reference: https://haosulab.github.io/ManiSkill2/getting_started/quickstart.html\n\nimport gymnasium as gym\nimport mani_skill2.envs\n\nenv = gym.make(\"PickCube-v0\", obs_mode=\"rgbd\", control_mode=\"pd_joint_delta_pos\", render_mode=\"human\")\nprint(\"Observation space\", env.observation_space)\nprint(\"Action space\", env.action_space)\n\nobs, _ = env.reset(seed=0) # reset with a seed for randomness\nterminated, truncated = False, False\nwhile not terminated and not truncated:\n    action = env.action_space.sample()\n    obs, reward, terminated, truncated, info = env.step(action)\n    env.render()  # a display is required to render\nenv.close()\n\"\"\"\nfrom typing import Optional\nimport gymnasium as gym\nimport mani_skill2.envs\nimport sapien.core as sapien\nfrom mani_skill2.envs import sapien_env\nfrom sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer\n\n\ndef wrapped_setup_scene(\n    self: sapien_env.BaseEnv, scene_config: Optional[sapien.SceneConfig] = None\n):\n    pass\n\n\ndef wrapped_setup_viewer(self):\n    pass\n\n\nkeep_on_screen_renderer = False\ncreate_sapien_visualizer(\n    port=6000, host=\"localhost\", keep_default_viewer=keep_on_screen_renderer\n)\nsapien_env.BaseEnv._setup_scene = wrapped_setup_scene\nsapien_env.BaseEnv._setup_viewer = wrapped_setup_viewer\ntask_names = [\n    \"MoveBucket-v1\",\n    \"PushChair-v1\",\n    \"OpenCabinetDrawer-v1\",\n    \"TurnFaucet-v0\",\n    \"PandaAvoidObstacles-v0\",\n    \"AssemblingKits-v0\",\n    \"PlugCharger-v0\",\n    \"PegInsertionSide-v0\",\n    \"PickClutterYCB-v0\",\n    \"PickSingleEGAD-v0\",\n    \"StackCube-v0\",\n]\ncontrol_mode = [\"base_pd_joint_vel_arm_pd_joint_vel\"] * 3 + [\"pd_joint_delta_pos\"] * 8\ntask_num = 7\nenv = gym.make(\n    task_names[task_num], obs_mode=\"rgbd\", control_mode=control_mode[task_num]\n)\nprint(\"Action space\", env.action_space)\nwhile True:\n    try:\n        obs = env.reset()\n        done = False\n        for _ in range(500):\n            action = env.action_space.sample()\n            obs, reward, terminated, truncated, info = env.step(action)\n            if keep_on_screen_renderer:\n                env.render()\n    except KeyboardInterrupt:\n        break\nenv.close()\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "example/visualize_urdf/render_urdf.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nexample/visualize_urdf/render_urdf.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom pathlib import Path\nimport numpy as np\nfrom sim_web_visualizer import MeshCatVisualizerBase\nfrom sim_web_visualizer.parser.yourdfpy import URDF\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport warnings\nfrom .base_visualizer_client import MeshCatVisualizerBase\n\n__version__ = \"0.6.0\"\ntry:\n    import sapien.core as sapien\n    from .sapien_visualizer_client import (\n        bind_visualizer_to_sapien_scene,\n        create_sapien_visualizer,\n        get_visualizer,\n    )\nexcept ImportError as e:\n    warnings.warn(str(e))\n    warnings.warn(\n        f\"\"\"\nNo Sapien python library installed. Disable Sapien Visualizer.\n If you want to Sapien Visualizer, please consider install it via: pip3 install sapien\"\"\"\n    )\ntry:\n    from isaacgym import gymapi\n    from .isaac_visualizer_client import (\n        bind_visualizer_to_gym,\n        create_isaac_visualizer,\n        set_gpu_pipeline,\n    )\nexcept ImportError as e:\n    warnings.warn(str(e))\n    warnings.warn(\n        f\"\"\"\nNo isaacgym python library installed. Disable IsaacGym Visualizer.\nIf you want to IsaacGym Visualizer, please consider install it via the following URL: https://developer.nvidia.com/isaac-gym\"\"\"\n    )\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/base_visualizer_client.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/base_visualizer_client.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom pathlib import Path\nfrom typing import Optional\nimport meshcat\nimport numpy as np\nimport trimesh\nfrom IPython.display import HTML\nfrom meshcat import geometry as g\nfrom sim_web_visualizer.parser.mesh_parser import (\n    AssetResource,\n    get_trimesh_geometry_material,\n)\nfrom sim_web_visualizer.parser.mjcf import load_mjcf_with_dmc\nfrom sim_web_visualizer.parser.urdf import load_urdf_with_yourdfpy\n\n\ndef rgb_to_hex(rgb):\n    pass\n\n\nclass MeshCatVisualizerBase:\n    def __init__(\n        self, port: Optional[int] = None, host=\"localhost\", continuous_scene=False\n    ):\n        pass\n\n    def add_default_scene_elements(self):\n        pass\n\n    def delete_all(self):\n        pass\n\n    @staticmethod\n    def dry_load_asset(\n        filename,\n        collapse_fixed_joints: bool,\n        replace_cylinder_with_capsule=False,\n        use_mesh_materials=False,\n    ) -> AssetResource:\n        pass\n\n    def load_asset_resources(\n        self, resource: AssetResource, root_path: str, scale: float = 1.0\n    ):\n        pass\n\n    def create_coordinate_axis(\n        self,\n        pose_mat: np.ndarray,\n        root_path: str,\n        scale=1.0,\n        opacity=1.0,\n        sphere_radius=0.0,\n    ):\n        pass\n\n    @staticmethod\n    def jupyter_cell(url=\"tcp://127.0.0.1:6000\", height=400):\n        \"\"\"\n        Render the visualizer in a jupyter notebook or jupyterlab cell.\n\n        For this to work, it should be the very last command in the given jupyter\n        cell.\n        \"\"\"\n        pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/isaac_visualizer_client.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/isaac_visualizer_client.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom collections import namedtuple\nfrom functools import partial\nfrom pathlib import Path\nfrom typing import Callable, Dict, List, Optional, Union\nimport meshcat\nimport meshcat.geometry as g\nimport numpy as np\nimport quaternion\nimport torch\nimport transforms3d\nfrom isaacgym import gymapi, gymtorch\nfrom numpy.lib.recfunctions import structured_to_unstructured\nfrom sim_web_visualizer.base_visualizer_client import (\n    AssetResource,\n    MeshCatVisualizerBase,\n)\nfrom sim_web_visualizer.utils.rotation_utils import compute_vector_rotation\n\nUSE_GPU_PIPELINE = False\n\n\nclass MimicGym:\n    def __init__(self, gym: gymapi.Gym):\n        pass\n\n    def add_method(self, name: str, fn: Callable):\n        pass\n\n    def __getattribute__(self, item):\n        pass\n\n\nclass MimicViewer:\n    def __init__(self):\n        pass\n\n\ndef set_env_pose(\n    num_env: int,\n    num_per_row: int,\n    env_size: np.ndarray,\n    scene_offset: np.ndarray,\n    viz: meshcat.Visualizer,\n):\n    pass\n\n\nclass MeshCatVisualizerIsaac(MeshCatVisualizerBase):\n    def __init__(\n        self,\n        port: Optional[int] = None,\n        host=\"localhost\",\n        keep_default_viewer=True,\n        scene_offset=np.array([10.0, 10.0]),\n        max_env=4,\n    ):\n        pass\n\n    def set_gym_instance(self, gym: gymapi.Gym, sim: gymapi.Sim) -> gymapi.Gym:\n        pass\n\n    def _override_load_asset(self):\n        pass\n\n    def _override_asset_create_fn(self):\n        pass\n\n    def _overload_create_env(self):\n        pass\n\n    def _overload_end_aggregate(self):\n        pass\n\n    def _override_create_actor(self):\n        pass\n\n    def _override_add_fn(self):\n        pass\n\n    def _override_set_fn(self):\n        pass\n\n    def _override_viewer_fn(self):\n        pass\n\n\n_REGISTERED_VISUALIZER: List[MeshCatVisualizerIsaac] = []\n\n\ndef create_isaac_visualizer(\n    port=None, host=\"localhost\", keep_default_viewer=True, max_env=4, **kwargs\n):\n    pass\n\n\ndef bind_visualizer_to_gym(gym: gymapi.Gym, sim: gymapi.Sim):\n    pass\n\n\ndef set_gpu_pipeline(use_gpu_pipeline: bool):\n    pass\n\n\ndef get_visualizer() -> MeshCatVisualizerIsaac:\n    pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/sapien_visualizer_client.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/sapien_visualizer_client.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport tempfile\nfrom pathlib import Path\nfrom typing import Callable, Dict, List, Optional, Tuple\nimport meshcat\nimport meshcat.geometry as g\nimport numpy as np\nimport sapien.core as sapien\nimport trimesh\nfrom sim_web_visualizer.base_visualizer_client import (\n    AssetResource,\n    MeshCatVisualizerBase,\n)\nfrom sim_web_visualizer.parser.mesh_parser import (\n    get_trimesh_geometry_material,\n    load_mesh,\n    rgb_to_hex,\n)\n\n\nclass MimicScene:\n    def __init__(self, scene: sapien.Scene):\n        pass\n\n    def add_method(self, name: str, fn: Callable):\n        pass\n\n    def __getattribute__(self, item):\n        pass\n\n\nclass MimicEntity:\n    def __init__(self, sapien_entity):\n        pass\n\n    def add_method(self, name: str, fn: Callable):\n        pass\n\n    def __getattribute__(self, item):\n        pass\n\n    def __setattr__(self, key, value):\n        pass\n\n\ndef visual2geom_mat(\n    visual: sapien.VisualRecord, pose: np.ndarray\n) -> Tuple[List[g.Geometry], List[g.Material], List[np.ndarray]]:\n    pass\n\n\ndef add_visual_to_viz(\n    viz: meshcat.Visualizer,\n    visual: sapien.VisualRecord,\n    geom_root_path: str,\n    geom_start_index: int,\n) -> int:\n    pass\n\n\nclass MeshCatVisualizerSapien(MeshCatVisualizerBase):\n    def __init__(\n        self, port: Optional[int] = None, host=\"localhost\", keep_default_viewer=True\n    ):\n        pass\n\n    def set_scene(\n        self, scene: sapien.Scene, engine: sapien.Engine, render: sapien.IPxrRenderer\n    ) -> sapien.Scene:\n        pass\n\n    def _override_urdf_loader(self, mimic: MimicEntity):\n        pass\n\n    def _override_actor_builder(self, mimic: MimicEntity):\n        pass\n\n    def _override_articulation_builder(self, mimic: MimicEntity):\n        pass\n\n    def _scene_override_builder_create_fn(self):\n        pass\n\n    def _scene_override_misc_fn(self):\n        pass\n\n    def _scene_override_visualization_fn(self):\n        pass\n\n\n_REGISTERED_VISUALIZER: List[MeshCatVisualizerSapien] = []\n\n\ndef create_sapien_visualizer(\n    port=None, host=\"localhost\", keep_default_viewer=True, **kwargs\n):\n    pass\n\n\ndef bind_visualizer_to_sapien_scene(\n    scene: sapien.Scene, engine: sapien.Engine, render: sapien.IPxrRenderer\n):\n    pass\n\n\ndef get_visualizer() -> MeshCatVisualizerSapien:\n    pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/parser/mesh_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/parser/mesh_parser.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport io\nfrom dataclasses import dataclass\nfrom typing import Dict, Optional, Tuple\nimport meshcat.geometry as g\nimport numpy as np\nimport trimesh\n\n\n@dataclass\nclass AssetResource:\n    filename: str\n    visual_data: Dict[str, Tuple[g.Geometry, g.Material]]\n    pose_data: Dict[str, np.ndarray]\n\n\ndef load_mesh(\n    mesh_file: str, scale=np.array([1, 1, 1]), mesh: Optional[trimesh.Trimesh] = None\n):\n    pass\n\n\ndef get_trimesh_geometry_material(\n    geom: trimesh.Trimesh, default_rgba: Optional[np.ndarray] = None\n) -> g.Material:\n    pass\n\n\ndef rgb_to_hex(rgb):\n    pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/parser/mjcf.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/parser/mjcf.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom pathlib import Path\nfrom typing import Dict, List\nimport meshcat.geometry as g\nimport meshcat.transformations as transformation\nimport numpy as np\nimport transforms3d\nimport trimesh\nfrom lxml import etree\nfrom meshcat.visualizer import Visualizer\nfrom sim_web_visualizer.parser.mesh_parser import AssetResource, rgb_to_hex\nfrom sim_web_visualizer.utils.rotation_utils import compute_vector_rotation\n\n\ndef load_mjcf_with_dmc(filename: str, collapse_fixed_joints: bool) -> AssetResource:\n    pass\n\n\ndef load_mjcf_into_viewer_kinpy(\n    filename: str, viewer: Visualizer, collapse_fixed_joints: bool, dry_run=False\n):\n    pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/parser/urdf.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/parser/urdf.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport meshcat.geometry as g\nimport numpy as np\nimport sim_web_visualizer.parser.yourdfpy as urdf\nimport transforms3d\nimport trimesh\nfrom sim_web_visualizer.parser.mesh_parser import (\n    AssetResource,\n    get_trimesh_geometry_material,\n    load_mesh,\n    rgb_to_hex,\n)\n\n\ndef load_urdf_with_yourdfpy(\n    urdf_path: str,\n    collapse_fixed_joints: bool,\n    replace_cylinder_with_capsule=False,\n    use_mesh_materials=False,\n) -> AssetResource:\n    pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/parser/yourdfpy.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/parser/yourdfpy.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport copy\nimport logging\nimport os\nfrom dataclasses import dataclass, field, is_dataclass\nfrom functools import partial\nfrom typing import Dict, List, Optional, Union\nimport anytree\nimport numpy as np\nimport six\nimport trimesh\nimport trimesh.transformations as tra\nfrom anytree import LevelOrderIter, Node\nfrom lxml import etree\n\n_logger = logging.getLogger(__name__)\n\n\ndef _array_eq(arr1, arr2):\n    pass\n\n\n@dataclass(eq=False)\nclass TransmissionJoint:\n    name: str\n    hardware_interfaces: List[str] = field(default_factory=list)\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Actuator:\n    name: str\n    mechanical_reduction: Optional[float] = None\n    hardware_interfaces: List[str] = field(default_factory=list)\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Transmission:\n    name: str\n    type: Optional[str] = None\n    joints: List[TransmissionJoint] = field(default_factory=list)\n    actuators: List[Actuator] = field(default_factory=list)\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass\nclass Calibration:\n    rising: Optional[float] = None\n    falling: Optional[float] = None\n\n\n@dataclass\nclass Mimic:\n    joint: str\n    multiplier: Optional[float] = None\n    offset: Optional[float] = None\n\n\n@dataclass\nclass SafetyController:\n    soft_lower_limit: Optional[float] = None\n    soft_upper_limit: Optional[float] = None\n    k_position: Optional[float] = None\n    k_velocity: Optional[float] = None\n\n\n@dataclass\nclass Sphere:\n    radius: float\n\n\n@dataclass\nclass Cylinder:\n    radius: float\n    length: float\n\n\n@dataclass(eq=False)\nclass Box:\n    size: np.ndarray\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Mesh:\n    filename: str\n    scale: Optional[Union[float, np.ndarray]] = None\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass\nclass Geometry:\n    box: Optional[Box] = None\n    cylinder: Optional[Cylinder] = None\n    sphere: Optional[Sphere] = None\n    mesh: Optional[Mesh] = None\n\n\n@dataclass(eq=False)\nclass Color:\n    rgba: np.ndarray\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass\nclass Texture:\n    filename: str\n\n\n@dataclass\nclass Material:\n    name: Optional[str] = None\n    color: Optional[Color] = None\n    texture: Optional[Texture] = None\n\n\n@dataclass(eq=False)\nclass Visual:\n    name: Optional[str] = None\n    origin: Optional[np.ndarray] = None\n    geometry: Optional[Geometry] = None\n    material: Optional[Material] = None\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Collision:\n    name: str\n    origin: Optional[np.ndarray] = None\n    geometry: Geometry = None\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Inertial:\n    origin: Optional[np.ndarray] = None\n    mass: Optional[float] = None\n    inertia: Optional[np.ndarray] = None\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Link:\n    name: str\n    inertial: Optional[Inertial] = None\n    visuals: List[Visual] = field(default_factory=list)\n    collisions: List[Collision] = field(default_factory=list)\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass\nclass Dynamics:\n    damping: Optional[float] = None\n    friction: Optional[float] = None\n\n\n@dataclass\nclass Limit:\n    effort: Optional[float] = None\n    velocity: Optional[float] = None\n    lower: Optional[float] = None\n    upper: Optional[float] = None\n\n\n@dataclass(eq=False)\nclass Joint:\n    name: str\n    type: str = None\n    parent: str = None\n    child: str = None\n    origin: np.ndarray = None\n    axis: np.ndarray = None\n    dynamics: Optional[Dynamics] = None\n    limit: Optional[Limit] = None\n    mimic: Optional[Mimic] = None\n    calibration: Optional[Calibration] = None\n    safety_controller: Optional[SafetyController] = None\n\n    def __eq__(self, other):\n        pass\n\n\n@dataclass(eq=False)\nclass Robot:\n    name: str\n    links: List[Link] = field(default_factory=list)\n    joints: List[Joint] = field(default_factory=list)\n    materials: List[Material] = field(default_factory=list)\n    transmission: List[str] = field(default_factory=list)\n    gazebo: List[str] = field(default_factory=list)\n\n    def __eq__(self, other):\n        pass\n\n\nclass URDFError(Exception):\n    \"\"\"General URDF exception.\"\"\"\n\n    def __init__(self, msg):\n        pass\n\n    def __str__(self):\n        pass\n\n    def __repr__(self):\n        pass\n\n\nclass URDFIncompleteError(URDFError):\n    \"\"\"Raised when needed data for an object isn't there.\"\"\"\n\n    pass\n\n\nclass URDFAttributeValueError(URDFError):\n    \"\"\"Raised when attribute value is not contained in the set of allowed values.\"\"\"\n\n    pass\n\n\nclass URDFBrokenRefError(URDFError):\n    \"\"\"Raised when a referenced object is not found in the scope.\"\"\"\n\n    pass\n\n\nclass URDFMalformedError(URDFError):\n    \"\"\"Raised when data is found to be corrupted in some way.\"\"\"\n\n    pass\n\n\nclass URDFUnsupportedError(URDFError):\n    \"\"\"Raised when some unexpectedly unsupported feature is found.\"\"\"\n\n    pass\n\n\nclass URDFSaveValidationError(URDFError):\n    \"\"\"Raised when XML validation fails when saving.\"\"\"\n\n    pass\n\n\ndef _str2float(s):\n    \"\"\"Cast string to float if it is not None. Otherwise return None.\n\n    Args:\n        s (str): String to convert or None.\n\n    Returns:\n        str or NoneType: The converted string or None.\n    \"\"\"\n    pass\n\n\ndef apply_visual_color(\n    geom: trimesh.Trimesh, visual: Visual, material_map: Dict[str, Material]\n) -> None:\n    \"\"\"Apply the color of the visual material to the mesh.\n\n    Args:\n        geom: Trimesh to color.\n        visual: Visual description from XML.\n        material_map: Dictionary mapping material names to their definitions.\n    \"\"\"\n    pass\n\n\ndef filename_handler_null(fname):\n    \"\"\"A lazy filename handler that simply returns its input.\n\n    Args:\n        fname (str): A file name.\n\n    Returns:\n        str: Same file name.\n    \"\"\"\n    pass\n\n\ndef filename_handler_ignore_directive(fname):\n    \"\"\"A filename handler that removes anything before (and including) '://'.\n\n    Args:\n        fname (str): A file name.\n\n    Returns:\n        str: The file name without the prefix.\n    \"\"\"\n    pass\n\n\ndef filename_handler_ignore_directive_package(fname):\n    \"\"\"A filename handler that removes the 'package://' directive and the package it refers to.\n    It subsequently calls filename_handler_ignore_directive, i.e., it removes any other directive.\n\n    Args:\n        fname (str): A file name.\n\n    Returns:\n        str: The file name without 'package://' and the package name.\n    \"\"\"\n    pass\n\n\ndef filename_handler_add_prefix(fname, prefix):\n    \"\"\"A filename handler that adds a prefix.\n\n    Args:\n        fname (str): A file name.\n        prefix (str): A prefix.\n\n    Returns:\n        str: Prefix plus file name.\n    \"\"\"\n    pass\n\n\ndef filename_handler_absolute2relative(fname, dir):\n    \"\"\"A filename handler that turns an absolute file name into a relative one.\n\n    Args:\n        fname (str): A file name.\n        dir (str): A directory.\n\n    Returns:\n        str: The file name relative to the directory.\n    \"\"\"\n    pass\n\n\ndef filename_handler_relative(fname, dir):\n    \"\"\"A filename handler that joins a file name with a directory.\n\n    Args:\n        fname (str): A file name.\n        dir (str): A directory.\n\n    Returns:\n        str: The directory joined with the file name.\n    \"\"\"\n    pass\n\n\ndef filename_handler_relative_to_urdf_file(fname, urdf_fname):\n    pass\n\n\ndef filename_handler_relative_to_urdf_file_recursive(fname, urdf_fname, level=0):\n    pass\n\n\ndef _create_filename_handlers_to_urdf_file_recursive(urdf_fname):\n    pass\n\n\ndef filename_handler_meta(fname, filename_handlers):\n    \"\"\"A filename handler that calls other filename handlers until the resulting file name points to an existing file.\n\n    Args:\n        fname (str): A file name.\n        filename_handlers (list(fn)): A list of function pointers to filename handlers.\n\n    Returns:\n        str: The resolved file name that points to an existing file or the input if none of the files exists.\n    \"\"\"\n    pass\n\n\ndef filename_handler_magic(fname, dir):\n    \"\"\"A magic filename handler.\n\n    Args:\n        fname (str): A file name.\n        dir (str): A directory.\n\n    Returns:\n        str: The file name that exists or the input if nothing is found.\n    \"\"\"\n    pass\n\n\ndef validation_handler_strict(errors):\n    \"\"\"A validation handler that does not allow any errors.\n\n    Args:\n        errors (list[yourdfpy.URDFError]): List of errors.\n\n    Returns:\n        bool: Whether any errors were found.\n    \"\"\"\n    pass\n\n\nclass URDF:\n    def __init__(\n        self,\n        robot: Robot = None,\n        build_scene_graph: bool = True,\n        build_collision_scene_graph: bool = False,\n        load_meshes: bool = True,\n        load_collision_meshes: bool = False,\n        filename_handler=None,\n        mesh_dir: str = \"\",\n        force_mesh: bool = False,\n        force_collision_mesh: bool = True,\n        build_tree: bool = False,\n    ):\n        \"\"\"A URDF model.\n\n        Args:\n            robot (Robot): The robot model. Defaults to None.\n            build_scene_graph (bool, optional): Wheter to build a scene graph to enable transformation queries and forward kinematics. Defaults to True.\n            build_collision_scene_graph (bool, optional): Wheter to build a scene graph for <collision> elements. Defaults to False.\n            load_meshes (bool, optional): Whether to load the meshes referenced in the <mesh> elements. Defaults to True.\n            load_collision_meshes (bool, optional): Whether to load the collision meshes referenced in the <mesh> elements. Defaults to False.\n            filename_handler ([type], optional): Any function f(in: str) -> str, that maps filenames in the URDF to actual resources. Can be used to customize treatment of `package://` directives or relative/absolute filenames. Defaults to None.\n            mesh_dir (str, optional): A root directory used for loading meshes. Defaults to \"\".\n            force_mesh (bool, optional): Each loaded geometry will be concatenated into a single one (instead of being turned into a graph; in case the underlying file contains multiple geometries). This might loose texture information but the resulting scene graph will be smaller. Defaults to False.\n            force_collision_mesh (bool, optional): Same as force_mesh, but for collision scene. Defaults to True.\n            build_tree (bool, optional): Build the tree structure for global kinematics computation\n        \"\"\"\n        pass\n\n    @property\n    def scene(self) -> trimesh.Scene:\n        \"\"\"A scene object representing the URDF model.\n\n        Returns:\n            trimesh.Scene: A trimesh scene object.\n        \"\"\"\n        pass\n\n    @property\n    def collision_scene(self) -> trimesh.Scene:\n        \"\"\"A scene object representing the <collision> elements of the URDF model\n\n        Returns:\n            trimesh.Scene: A trimesh scene object.\n        \"\"\"\n        pass\n\n    @property\n    def link_map(self) -> dict:\n        \"\"\"A dictionary mapping link names to link objects.\n\n        Returns:\n            dict: Mapping from link name (str) to Link.\n        \"\"\"\n        pass\n\n    @property\n    def joint_map(self) -> dict:\n        \"\"\"A dictionary mapping joint names to joint objects.\n\n        Returns:\n            dict: Mapping from joint name (str) to Joint.\n        \"\"\"\n        pass\n\n    @property\n    def joint_names(self):\n        \"\"\"List of joint names.\n\n        Returns:\n            list[str]: List of joint names of the URDF model.\n        \"\"\"\n        pass\n\n    @property\n    def actuated_joints(self):\n        \"\"\"List of actuated joints. This excludes mimic and fixed joints.\n\n        Returns:\n            list[Joint]: List of actuated joints of the URDF model.\n        \"\"\"\n        pass\n\n    @property\n    def actuated_dof_indices(self):\n        \"\"\"List of DOF indices per actuated joint. Can be used to reference configuration.\n\n        Returns:\n            list[list[int]]: List of DOF indices per actuated joint.\n        \"\"\"\n        pass\n\n    @property\n    def actuated_joint_indices(self):\n        \"\"\"List of indices of all joints that are actuated, i.e., not of type mimic or fixed.\n\n        Returns:\n            list[int]: List of indices of actuated joints.\n        \"\"\"\n        pass\n\n    @property\n    def actuated_joint_names(self):\n        \"\"\"List of names of actuated joints. This excludes mimic and fixed joints.\n\n        Returns:\n            list[str]: List of names of actuated joints of the URDF model.\n        \"\"\"\n        pass\n\n    @property\n    def num_actuated_joints(self):\n        \"\"\"Number of actuated joints.\n\n        Returns:\n            int: Number of actuated joints.\n        \"\"\"\n        pass\n\n    @property\n    def num_dofs(self):\n        \"\"\"Number of degrees of freedom of actuated joints. Depending on the type of the joint, the number of DOFs might vary.\n\n        Returns:\n            int: Degrees of freedom.\n        \"\"\"\n        pass\n\n    @property\n    def zero_cfg(self):\n        \"\"\"Return the zero configuration.\n\n        Returns:\n            np.ndarray: The zero configuration.\n        \"\"\"\n        pass\n\n    @property\n    def center_cfg(self):\n        \"\"\"Return center configuration of URDF model by using the average of each joint's limits if present, otherwise zero.\n\n        Returns:\n            (n), float: Default configuration of URDF model.\n        \"\"\"\n        pass\n\n    @property\n    def cfg(self):\n        \"\"\"Current configuration.\n\n        Returns:\n            np.ndarray: Current configuration of URDF model.\n        \"\"\"\n        pass\n\n    @property\n    def base_link(self):\n        \"\"\"Name of URDF base/root link.\n\n        Returns:\n            str: Name of base link of URDF model.\n        \"\"\"\n        pass\n\n    @property\n    def errors(self) -> list:\n        \"\"\"A list with validation errors.\n\n        Returns:\n            list: A list of validation errors.\n        \"\"\"\n        pass\n\n    def clear_errors(self):\n        \"\"\"Clear the validation error log.\"\"\"\n        pass\n\n    def show(self, collision_geometry=False, callback=None):\n        \"\"\"Open a simpler viewer displaying the URDF model.\n\n        Args:\n            collision_geometry (bool, optional): Whether to display the <collision> or <visual> elements. Defaults to False.\n        \"\"\"\n        pass\n\n    def validate(self, validation_fn=None) -> bool:\n        \"\"\"Validate URDF model.\n\n        Args:\n            validation_fn (function, optional): A function f(list[yourdfpy.URDFError]) -> bool. None uses the strict handler (any error leads to False). Defaults to None.\n\n        Returns:\n            bool: Whether the model is valid.\n        \"\"\"\n        pass\n\n    def _create_maps(self):\n        pass\n\n    def _update_actuated_joints(self):\n        pass\n\n    def _validate_required_attribute(self, attribute, error_msg, allowed_values=None):\n        pass\n\n    @staticmethod\n    def load(fname_or_file, **kwargs):\n        \"\"\"Load URDF file from filename or file object.\n\n        Args:\n            fname_or_file (str or file object): A filename or file object, file-like object, stream representing the URDF file.\n            **build_scene_graph (bool, optional): Wheter to build a scene graph to enable transformation queries and forward kinematics. Defaults to True.\n            **build_collision_scene_graph (bool, optional): Wheter to build a scene graph for <collision> elements. Defaults to False.\n            **load_meshes (bool, optional): Whether to load the meshes referenced in the <mesh> elements. Defaults to True.\n            **load_collision_meshes (bool, optional): Whether to load the collision meshes referenced in the <mesh> elements. Defaults to False.\n            **filename_handler ([type], optional): Any function f(in: str) -> str, that maps filenames in the URDF to actual resources. Can be used to customize treatment of `package://` directives or relative/absolute filenames. Defaults to None.\n            **mesh_dir (str, optional): A root directory used for loading meshes. Defaults to \"\".\n            **force_mesh (bool, optional): Each loaded geometry will be concatenated into a single one (instead of being turned into a graph; in case the underlying file contains multiple geometries). This might loose texture information but the resulting scene graph will be smaller. Defaults to False.\n            **force_collision_mesh (bool, optional): Same as force_mesh, but for collision scene. Defaults to True.\n\n        Raises:\n            ValueError: If filename does not exist.\n\n        Returns:\n            yourdfpy.URDF: URDF model.\n        \"\"\"\n        pass\n\n    def contains(self, key, value, element=None) -> bool:\n        \"\"\"Checks recursively whether the URDF tree contains the provided key-value pair.\n\n        Args:\n            key (str): A key.\n            value (str): A value.\n            element (etree.Element, optional): The XML element from which to start the recursive search. None means URDF root. Defaults to None.\n\n        Returns:\n            bool: Whether the key-value pair was found.\n        \"\"\"\n        pass\n\n    def _determine_base_link(self):\n        \"\"\"Get the base link of the URDF tree by extracting all links without parents.\n        In case multiple links could be root chose the first.\n\n        Returns:\n            str: Name of the base link.\n        \"\"\"\n        pass\n\n    def _forward_kinematics_joint(self, joint, q=None):\n        pass\n\n    def update_cfg(self, configuration):\n        \"\"\"Update joint configuration of URDF; does forward kinematics.\n\n        Args:\n            configuration (dict, list[float], tuple[float] or np.ndarray): A mapping from joints or joint names to configuration values, or a list containing a value for each actuated joint.\n\n        Raises:\n            ValueError: Raised if dimensionality of configuration does not match number of actuated joints of URDF model.\n            TypeError: Raised if configuration is neither a dict, list, tuple or np.ndarray.\n        \"\"\"\n        pass\n\n    def get_transform(self, frame_to, frame_from=None, collision_geometry=False):\n        \"\"\"Get the transform from one frame to another.\n\n        Args:\n            frame_to (str): Node name.\n            frame_from (str, optional): Node name. If None it will be set to self.base_frame. Defaults to None.\n            collision_geometry (bool, optional): Whether to use the collision geometry scene graph (instead of the visual geometry). Defaults to False.\n\n        Raises:\n            ValueError: Raised if scene graph wasn't constructed during intialization.\n\n        Returns:\n            (4, 4) float: Homogeneous transformation matrix\n        \"\"\"\n        pass\n\n    def _link_mesh(self, link, collision_geometry=True):\n        pass\n\n    def _geometry2trimeshscene(self, geometry, load_file, force_mesh, skip_materials):\n        pass\n\n    def _add_geometries_to_scene(\n        self,\n        s,\n        geometries,\n        link_name,\n        load_geometry,\n        force_mesh,\n        force_single_geometry,\n        skip_materials,\n    ):\n        pass\n\n    def _create_scene(\n        self,\n        use_collision_geometry=False,\n        load_geometry=True,\n        force_mesh=False,\n        force_single_geometry_per_link=False,\n    ):\n        pass\n\n    def _successors(self, node):\n        \"\"\"\n        Get all nodes of the scene that succeeds a specified node.\n\n        Parameters\n        ------------\n        node : any\n          Hashable key in `scene.graph`\n\n        Returns\n        -----------\n        subnodes : set[str]\n          Set of nodes.\n        \"\"\"\n        pass\n\n    def _create_subrobot(self, robot_name, root_link_name):\n        pass\n\n    def split_along_joints(self, joint_type=\"floating\", **kwargs):\n        \"\"\"Split URDF model along a particular joint type.\n        The result is a set of URDF models which together compose the original URDF.\n\n        Args:\n            joint_type (str, or list[str], optional): Type of joint to use for splitting. Defaults to \"floating\".\n            **kwargs: Arguments delegated to URDF constructor of new URDF models.\n\n        Returns:\n            list[(np.ndarray, yourdfpy.URDF)]: A list of tuples (np.ndarray, yourdfpy.URDF) whereas each homogeneous 4x4 matrix describes the root transformation of the respective URDF model w.r.t. the original URDF.\n        \"\"\"\n        pass\n\n    def validate_filenames(self):\n        pass\n\n    def write_xml(self):\n        \"\"\"Write URDF model to an XML element hierarchy.\n\n        Returns:\n            etree.ElementTree: XML data.\n        \"\"\"\n        pass\n\n    def write_xml_string(self, **kwargs):\n        \"\"\"Write URDF model to a string.\n\n        Returns:\n            str: String of the xml representation of the URDF model.\n        \"\"\"\n        pass\n\n    def write_xml_file(self, fname):\n        \"\"\"Write URDF model to an xml file.\n\n        Args:\n            fname (str): Filename of the file to be written. Usually ends in `.urdf`.\n        \"\"\"\n        pass\n\n    def _parse_mimic(xml_element):\n        pass\n\n    def _write_mimic(self, xml_parent, mimic):\n        pass\n\n    def _parse_safety_controller(xml_element):\n        pass\n\n    def _write_safety_controller(self, xml_parent, safety_controller):\n        pass\n\n    def _parse_transmission_joint(xml_element):\n        pass\n\n    def _write_transmission_joint(self, xml_parent, transmission_joint):\n        pass\n\n    def _parse_actuator(xml_element):\n        pass\n\n    def _write_actuator(self, xml_parent, actuator):\n        pass\n\n    def _parse_transmission(xml_element):\n        pass\n\n    def _write_transmission(self, xml_parent, transmission):\n        pass\n\n    def _parse_calibration(xml_element):\n        pass\n\n    def _write_calibration(self, xml_parent, calibration):\n        pass\n\n    def _parse_box(xml_element):\n        pass\n\n    def _write_box(self, xml_parent, box):\n        pass\n\n    def _parse_cylinder(xml_element):\n        pass\n\n    def _write_cylinder(self, xml_parent, cylinder):\n        pass\n\n    def _parse_sphere(xml_element):\n        pass\n\n    def _write_sphere(self, xml_parent, sphere):\n        pass\n\n    def _parse_scale(xml_element):\n        pass\n\n    def _write_scale(self, xml_parent, scale):\n        pass\n\n    def _parse_mesh(xml_element):\n        pass\n\n    def _write_mesh(self, xml_parent, mesh):\n        pass\n\n    def _parse_geometry(xml_element):\n        pass\n\n    def _validate_geometry(self, geometry):\n        pass\n\n    def _write_geometry(self, xml_parent, geometry):\n        pass\n\n    def _parse_origin(xml_element):\n        pass\n\n    def _write_origin(self, xml_parent, origin):\n        pass\n\n    def _parse_color(xml_element):\n        pass\n\n    def _write_color(self, xml_parent, color):\n        pass\n\n    def _parse_texture(xml_element):\n        pass\n\n    def _write_texture(self, xml_parent, texture):\n        pass\n\n    def _parse_material(xml_element):\n        pass\n\n    def _write_material(self, xml_parent, material):\n        pass\n\n    def _parse_visual(xml_element):\n        pass\n\n    def _validate_visual(self, visual):\n        pass\n\n    def _write_visual(self, xml_parent, visual):\n        pass\n\n    def _parse_collision(xml_element):\n        pass\n\n    def _validate_collision(self, collision):\n        pass\n\n    def _write_collision(self, xml_parent, collision):\n        pass\n\n    def _parse_inertia(xml_element):\n        pass\n\n    def _write_inertia(self, xml_parent, inertia):\n        pass\n\n    def _parse_mass(xml_element):\n        pass\n\n    def _write_mass(self, xml_parent, mass):\n        pass\n\n    def _parse_inertial(xml_element):\n        pass\n\n    def _write_inertial(self, xml_parent, inertial):\n        pass\n\n    def _parse_link(xml_element):\n        pass\n\n    def _validate_link(self, link):\n        pass\n\n    def _write_link(self, xml_parent, link):\n        pass\n\n    def _parse_axis(xml_element):\n        pass\n\n    def _write_axis(self, xml_parent, axis):\n        pass\n\n    def _parse_limit(xml_element):\n        pass\n\n    def _validate_limit(self, limit, type):\n        pass\n\n    def _write_limit(self, xml_parent, limit):\n        pass\n\n    def _parse_dynamics(xml_element):\n        pass\n\n    def _write_dynamics(self, xml_parent, dynamics):\n        pass\n\n    def _parse_joint(xml_element):\n        pass\n\n    def _validate_joint(self, joint):\n        pass\n\n    def _write_joint(self, xml_parent, joint):\n        pass\n\n    @staticmethod\n    def _parse_robot(xml_element):\n        pass\n\n    def _validate_robot(self, robot):\n        pass\n\n    def _write_robot(self, robot):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def filename_handler(self):\n        pass\n\n    def build_tree(self):\n        pass\n\n    def update_kinematics(self, configuration):\n        pass\n\n    def get_link_global_transform(self, link_name):\n        pass\n```"
    },
    {
        "readme": "# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py",
        "file_path": "sim_web_visualizer/utils/rotation_utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Web-Based Visualizer for Simulation Environments\n\nThis repository hosts a browser-based 3D viewer for physical simulators. It offers users the ability to observe simulations directly within their web browser, as an alternative to the default visualizer that comes with the simulator.\n\nThe main feature of this repo is that you only need to modify a server lines of your code to port the visualization on the default simulator viewer to the web visualizer. This feature is especially useful for visualizing simulation on a headless server. For example, train and visualize the IsaacGym tasks inside [jupyter notebook](example/isaacgym/train_isaacgym_remote_server.ipynb) on a remote server.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 example\n|   \u251c\u2500\u2500 isaacgym\n|   |   \u251c\u2500\u2500 run_isaacgym_training_viz.py # import isaacgym; import gym; from isaacgym import gymapi;\n|   |   \u2514\u2500\u2500 run_isaacgym_viz.py # import isaacgym  # pylint: disable=unused-import; from isaacgym import gymapi;\n|   \u251c\u2500\u2500 sapien\n|   |   \u251c\u2500\u2500 hello_world.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u251c\u2500\u2500 replay_maniskill_demo.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   |   \u2514\u2500\u2500 run_sapien_viz.py # from sim_web_visualizer import bind_visualizer_to_sapien_scene, create_sapien_visualizer;\n|   \u2514\u2500\u2500 visualize_urdf\n|       \u2514\u2500\u2500 render_urdf.py # from sim_web_visualizer import MeshCatVisualizerBase;\n\u2514\u2500\u2500 sim_web_visualizer\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_visualizer_client.py\n    \u251c\u2500\u2500 isaac_visualizer_client.py # from isaacgym import gymapi, gymtorch;\n    \u251c\u2500\u2500 sapien_visualizer_client.py\n    \u251c\u2500\u2500 parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 mesh_parser.py\n    |   \u251c\u2500\u2500 mjcf.py\n    |   \u251c\u2500\u2500 urdf.py\n    |   \u2514\u2500\u2500 yourdfpy.py\n    \u2514\u2500\u2500 utils\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 rotation_utils.py\n```\n\n---\nFile Path\n---\nsim_web_visualizer/utils/rotation_utils.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport numpy as np\nfrom meshcat import transformations as transformation\n\n\ndef compute_vector_rotation(origin_vector, target_vector):\n    pass\n```"
    }
]