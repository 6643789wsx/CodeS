[
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n__version__ = \"1.1.2\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/colors.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/colors.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/const.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/const.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/exceptions.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/exceptions.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/main.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/models.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/runtime.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/runtime.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/utils.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/parsers/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/parsers/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/parsers/stackcollapse_parser.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/pprof_parser/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/pprof_parser/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/pprof_parser/parser.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/pprof_parser/profile_pb2.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/pprof_parser/profile_pb2.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/render/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/render/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/render/app.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/render/flamegraph.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/render/framedetail.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/render/header.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/render/header.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "file_path": "flameshow/render/tabs.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n## Features\n\n- Renders Flamegraphs in your terminal\n- Supports zooming in and displaying percentages\n- Keyboard input is prioritized\n- All operations can also be performed using the mouse.\n- Can switch to different sample types\n\n## Usage\n\nView golang's goroutine dump:\n\n```shell\n$ curl http://localhost:9100/debug/pprof/goroutine -o goroutine.out\n$ flameshow goroutine.out\n```\n\nAfter entering the TUI, the available actions are listed on Footer:\n\n- <kbd>q</kbd> for quit\n- <kbd>j</kbd> <kbd>i</kbd> <kbd>j</kbd> <kbd>k</kbd> or <kbd>\u2190</kbd>\n  <kbd>\u2193</kbd> <kbd>\u2191</kbd> <kbd>\u2192</kbd> for moving around, and <kbd>Enter</kbd>\n  for zoom in, then <kbd>Esc</kbd> for zoom out.\n- You can also use a mouse, hover on a span will show it details, and click will\n  zoom it.\n\n## Supported Formats\n\nAs far as I know, there is no standard specification for profiles. Different\nlanguages or tools might generate varying profile formats. I'm actively working\non supporting more formats. Admittedly, I might not be familiar with every tool\nand its specific format. So, if you'd like Flameshow to integrate with a tool\nyou love, please feel free to reach out and submit an issue.\n\n- Golang pprof\n- [Brendan Gregg's Flamegraph](https://www.brendangregg.com/flamegraphs.html)\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nFile Path\n---\nflameshow/render/tabs.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```"
    }
]