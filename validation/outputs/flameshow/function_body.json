[
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        \"\"\"TODO\"\"\"\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```",
        "current_file_path": "flameshow/colors.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        \"\"\"TODO\"\"\"\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nFunction Complement\n---\ndef get_color(self, key):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_color(self, key):\n    if key not in self.assigned_color:\n        self.assigned_color[key] = self.assign_color(key)\n    return self.assigned_color[key]\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        \"\"\"TODO\"\"\"\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```",
        "current_file_path": "flameshow/colors.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        \"\"\"TODO\"\"\"\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nFunction Complement\n---\ndef generate_platte(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef generate_platte(self):\n    color_platte = []\n    for factor in range(0, 100, 5):\n        color_platte.append(self.start_color.blend(self.end_color, factor / 100))\n    return color_platte\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    \"\"\"TODO\"\"\"\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "flameshow/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    \"\"\"TODO\"\"\"\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef setup_log(enabled, level, loglocation):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef setup_log(enabled, level, loglocation):\n    if enabled:\n        logging.basicConfig(\n            filename=os.path.expanduser(loglocation),\n            filemode=\"a\",\n            format=\"%(asctime)s %(levelname)5s (%(module)sL%(lineno)d) %(message)s\",\n            level=level,\n        )\n    else:\n        logging.disable(logging.CRITICAL)\n    logger.info(\"------ flameshow ------\")\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    \"\"\"TODO\"\"\"\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "flameshow/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    \"\"\"TODO\"\"\"\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef ensure_tty():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ensure_tty():\n    if os.isatty(0):\n        return\n    logger.info(\"stdin is not a tty, replace it to fd=2\")\n    sys.stdin.close()\n    sys.stdin = os.fdopen(2)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    \"\"\"TODO\"\"\"\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "flameshow/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    \"\"\"TODO\"\"\"\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    log_level = LOG_LEVEL[verbose]\n    setup_log(log_to is not None, log_level, log_to)\n    t0 = time.time()\n    profile_data = profile_f.read()\n    profile = parse(profile_data, profile_f.name)\n    t01 = time.time()\n    logger.info(\"Parse profile, took %.3fs\", t01 - t0)\n    ensure_tty()\n    app = FlameshowApp(profile, _debug_exit_after_rednder)\n    app.run()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    \"\"\"TODO\"\"\"\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "flameshow/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    \"\"\"TODO\"\"\"\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef print_version(ctx, _, value):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef print_version(ctx, _, value):\n    if not value or ctx.resilient_parsing:\n        return\n    click.echo(__version__)\n    ctx.exit()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "flameshow/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef main(verbose, log_to, profile):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef main(verbose, log_to, profile):\n    run_app(verbose, log_to, profile, _debug_exit_after_rednder=False)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        \"\"\"TODO\"\"\"\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        \"\"\"TODO\"\"\"\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __init__(\n    self, name, _id, children=None, parent=None, values=None, root=None\n) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __init__(\n    self, name, _id, children=None, parent=None, values=None, root=None\n) -> None:\n    self.name = name\n    self._id = _id\n    if children:\n        self.children = children\n    else:\n        self.children = []\n    self.parent = parent\n    if not values:\n        self.values = []\n    else:\n        self.values = values\n    self.root = root\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        \"\"\"TODO\"\"\"\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        \"\"\"TODO\"\"\"\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef pile_up(self, childstack: Self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef pile_up(self, childstack: Self):\n    childstack.parent = self\n    for exist_child in self.children:\n        if exist_child.name == childstack.name:\n            exist_child.values = list(\n                map(sum, zip(exist_child.values, childstack.values))\n            )\n            for new_child in childstack.children:\n                exist_child.pile_up(new_child)\n            return\n    self.children.append(childstack)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __eq__(self, other):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __eq__(self, other):\n    if isinstance(other, Frame):\n        return self._id == other._id\n    return False\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        \"\"\"TODO\"\"\"\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        \"\"\"TODO\"\"\"\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef display_color(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef display_color(self):\n    return r.get_color(self.color_key)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        \"\"\"TODO\"\"\"\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        \"\"\"TODO\"\"\"\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef humanize(self, sample_unit, value):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef humanize(self, sample_unit, value):\n    display_value = value\n    if sample_unit == \"bytes\":\n        display_value = sizeof(value)\n    return display_value\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        \"\"\"TODO\"\"\"\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        \"\"\"TODO\"\"\"\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __repr__(self) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __repr__(self) -> str:\n    return f\"<Frame #{self._id} {self.name}>\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef render_detail(self, sample_index: int, sample_unit: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef render_detail(self, sample_index: int, sample_unit: str):\n    \"\"\"\n    render stacked information\n    \"\"\"\n    detail = []\n    frame = self\n    while frame:\n        lines = self.render_one_frame_detail(frame, sample_index, sample_unit)\n        for line in lines:\n            detail.append(\n                Text.assemble(\n                    (\" \", Style(bgcolor=frame.display_color.rich_color)), \" \", line\n                )\n            )\n        frame = frame.parent\n    return Text.assemble(*detail)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n    raise NotImplementedError\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        \"\"\"TODO\"\"\"\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        \"\"\"TODO\"\"\"\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef title(self) -> Text:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef title(self) -> Text:\n    \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n    return Text(self.name)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        \"\"\"TODO\"\"\"\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        \"\"\"TODO\"\"\"\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef color_key(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef color_key(self):\n    \"\"\"Same key will get the same color\"\"\"\n    return self.name\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        \"\"\"TODO\"\"\"\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        \"\"\"TODO\"\"\"\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef display_name(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef display_name(self):\n    \"\"\"The name display on the flamegraph\"\"\"\n    return self.name\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __post_init__(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __post_init__(self):\n    \"\"\"\n    init_lines must be called before render\n    \"\"\"\n    t1 = time.time()\n    logger.info(\"start to create lines...\")\n    root = self.root_stack\n    lines = [[root]]\n    frameid_to_lineno = {(0): 0}\n    current = root.children\n    line_no = 1\n    while len(current) > 0:\n        line = []\n        next_line = []\n        for child in current:\n            line.append(child)\n            frameid_to_lineno[child._id] = line_no\n            next_line.extend(child.children)\n        lines.append(line)\n        line_no += 1\n        current = next_line\n    t2 = time.time()\n    logger.info(\"create lines done, took %.2f seconds\", t2 - t1)\n    self.lines = lines\n    self.frameid_to_lineno = frameid_to_lineno\n    self.name_aggr = self.get_name_aggr(self.root_stack)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/models.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef get_name_aggr(\n        self, start_frame: Frame, names: Set[str] | None = None\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_name_aggr(\n        self, start_frame: Frame, names: Set[str] | None = None\n    name = start_frame.name\n    result = {}\n    if names is None:\n        names = set()\n    if name not in names:\n        result[name] = [start_frame]\n    for child in start_frame.children:\n        name_aggr = self.get_name_aggr(child, names | set([name]))\n        for key, value in name_aggr.items():\n            result.setdefault(key, []).extend(value)\n    return result\n    \n\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        \"\"\"TODO\"\"\"\n\n\nr = Runtime()\n```",
        "current_file_path": "flameshow/runtime.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        \"\"\"TODO\"\"\"\n\n\nr = Runtime()\n```\n\n---\nFunction Complement\n---\ndef get_color(self, key):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_color(self, key):\n    return self.color_platte.get_color(key)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef sizeof(num, suffix=\"B\"):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    f = \"{num:.1f}{unit}{suffix}\"\n    for unit in (\"\", \"Ki\", \"Mi\", \"Gi\", \"Ti\", \"Pi\", \"Ei\", \"Zi\"):\n        if abs(num) < 1024.0:\n            return f.format(num=num, unit=unit, suffix=suffix)\n        num /= 1024.0\n    return f.format(num=num, unit=\"Yi\", suffix=suffix)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    \"\"\"TODO\"\"\"\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```",
        "current_file_path": "flameshow/parsers/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    \"\"\"TODO\"\"\"\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nFunction Complement\n---\ndef choose_parser(content: bytes):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef choose_parser(content: bytes):\n    for p in ALL_PARSERS:\n        if p.validate(content):\n            return p\n    raise ProfileParseException(\"Can not match any parser\")\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/parsers/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef choose_parser(content: bytes):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef choose_parser(content: bytes):\n    parser_cls = choose_parser(filecontent)\n    logger.info(\"Using %s...\", parser_cls)\n    parser = parser_cls(filename)\n    profile = parser.parse(filecontent)\n    return profile\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        \"\"\"TODO\"\"\"\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```",
        "current_file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        \"\"\"TODO\"\"\"\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nFunction Complement\n---\ndef render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n    return [Text(f\"{frame.name}\\n\")]\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        \"\"\"TODO\"\"\"\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```",
        "current_file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        \"\"\"TODO\"\"\"\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __init__(self, filename) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __init__(self, filename) -> None:\n    self.filename = filename\n    self.next_id = 0\n    self.root = StackCollapseFrame(\"root\", _id=self.idgenerator(), values=[0])\n    self.root.root = self.root\n    self.highest = 0\n    self.id_store: Dict[int, Frame] = {self.root._id: self.root}\n    self.line_regex = \"(.*?) (\\\\d+)$\"\n    self.line_matcher = re.compile(self.line_regex)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        \"\"\"TODO\"\"\"\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```",
        "current_file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        \"\"\"TODO\"\"\"\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nFunction Complement\n---\ndef idgenerator(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef idgenerator(self):\n    i = self.next_id\n    self.next_id += 1\n    return i\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        \"\"\"TODO\"\"\"\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```",
        "current_file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        \"\"\"TODO\"\"\"\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nFunction Complement\n---\ndef parse(self, text_data):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse(self, text_data):\n    text_data = text_data.decode()\n    lines = text_data.split(os.linesep)\n    for line in lines:\n        self.parse_line(line)\n    logger.info(\"root: %s, %s\", self.root, self.root.values)\n    logger.debug(\"root.children: %s\", self.root.children)\n    profile = Profile(\n        filename=self.filename,\n        root_stack=self.root,\n        highest_lines=self.highest,\n        total_sample=len(lines),\n        sample_types=[SampleType(\"samples\", \"count\")],\n        id_store=self.id_store,\n    )\n    logger.info(\"profile.lines = %s\", profile.lines)\n    logger.info(\"profile.id_store = %s\", profile.id_store)\n    return profile\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        \"\"\"TODO\"\"\"\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```",
        "current_file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        \"\"\"TODO\"\"\"\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nFunction Complement\n---\ndef parse_line(self, line) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_line(self, line) -> None:\n    line = line.strip()\n    if not line:\n        return\n    matcher = self.line_matcher.match(line)\n    if not matcher:\n        logger.warn(\"Can not parse {} with regex {}\".format(line, self.line_regex))\n        return\n    frame_str = matcher.group(1)\n    count = int(matcher.group(2))\n    frame_names = frame_str.split(\";\")\n    logger.info(\"frame names:%s, count: %s\", frame_names, count)\n    pre = None\n    head = None\n    for name in frame_names:\n        frame = StackCollapseFrame(\n            name,\n            self.idgenerator(),\n            children=[],\n            parent=pre,\n            values=[count],\n            root=self.root,\n        )\n        self.id_store[frame._id] = frame\n        if pre:\n            pre.children = [frame]\n            frame.parent = pre\n        if not head:\n            head = frame\n        pre = frame\n    if head:\n        self.root.pile_up(head)\n        self.root.values[0] += head.values[0]\n    if len(frame_names) > self.highest:\n        self.highest = len(frame_names)\n    logger.debug(\"over\")\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/parsers/stackcollapse_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef validate(cls, content: bytes) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef validate(cls, content: bytes) -> bool:\n    try:\n        to_check = content.decode(\"utf-8\")\n    except:\n        return False\n    lines = to_check.split(os.linesep)\n    to_validate_lines = [line.strip() for line in lines[:100] if line.strip()]\n    if not to_validate_lines:\n        logger.info(\"The file is empty, skip StackCollapseParser\")\n        return False\n    for index, line in enumerate(to_validate_lines):\n        if not re.match(\"(.* )?\\\\d+\", line):\n            logger.info(\n                \"line %d not match regex, line:%s not suitable for StackCollapseParser!\",\n                index + 1,\n                line,\n            )\n            return False\n    return True\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef color_key(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef color_key(self):\n    return self.golang_module\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"TODO\"\"\"\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"TODO\"\"\"\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef display_name(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef display_name(self):\n    return self.golang_module_function\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef render_one_frame_detail(self, frame, sample_index, sample_unit):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef render_one_frame_detail(self, frame, sample_index, sample_unit):\n    if frame._id == 0:\n        total = sum([c.values[sample_index] for c in frame.children])\n        value = frame.humanize(sample_unit, total)\n        if frame.children:\n            binary_name = f\"Binary: {frame.children[0].mapping.filename}\"\n        else:\n            binary_name = \"root\"\n        detail = f\"{binary_name} [b red]{value}[/b red]\\n\"\n        return [detail]\n    value = frame.humanize(sample_unit, frame.values[sample_index])\n    line1 = f\"{frame.line.function.name}: [b red]{value}[/b red]\\n\"\n    line2 = f\"  [grey37]{frame.line.function.filename}, [b]line {frame.line.line_no}[/b][/grey37]\\n\"\n    return [Text.from_markup(line1), Text.from_markup(line2)]\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        \"\"\"TODO\"\"\"\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        \"\"\"TODO\"\"\"\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef title(self) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef title(self) -> str:\n    return self.display_name\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    \"\"\"TODO\"\"\"\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    \"\"\"TODO\"\"\"\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef unmarshal(content) -> profile_pb2.Profile:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef unmarshal(content) -> profile_pb2.Profile:\n    if len(content) < 2:\n        raise Exception(\n            \"Profile content length is too short: {} bytes\".format(len(content))\n        )\n    is_gzip = content[0] == 31 and content[1] == 139\n    if is_gzip:\n        content = gzip.decompress(content)\n    profile = profile_pb2.Profile()\n    profile.ParseFromString(content)\n    return profile\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        \"\"\"TODO\"\"\"\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        \"\"\"TODO\"\"\"\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef idgenerator(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef idgenerator(self):\n    i = self.next_id\n    self.next_id += 1\n    return i\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        \"\"\"TODO\"\"\"\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        \"\"\"TODO\"\"\"\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef color_key(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef color_key(self):\n    return self._t[index]\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        \"\"\"TODO\"\"\"\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        \"\"\"TODO\"\"\"\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_internal_data(self, pbdata):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_internal_data(self, pbdata):\n    self._t = pbdata.string_table\n    self.functions = self.parse_functions(pbdata.function)\n    self.mappings = self.parse_mapping(pbdata.mapping)\n    self.locations = self.parse_location(pbdata.location)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        \"\"\"TODO\"\"\"\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        \"\"\"TODO\"\"\"\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_internal_data(self, pbdata):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_internal_data(self, pbdata):\n    pbdata = unmarshal(binary_data)\n    self.parse_internal_data(pbdata)\n    sample_types = self.parse_sample_types(pbdata.sample_type)\n    root = self.root\n    root.values = [0] * len(sample_types)\n    for pbsample in pbdata.sample:\n        child_frame = self.parse_sample(pbsample)\n        if not child_frame:\n            continue\n        root.values = list(map(sum, zip(root.values, child_frame.values)))\n        root.pile_up(child_frame)\n    pprof_profile = Profile(\n        filename=self.filename,\n        root_stack=root,\n        highest_lines=self.highest,\n        total_sample=len(pbdata.sample),\n        sample_types=sample_types,\n        id_store=self.id_store,\n    )\n    if pbdata.default_sample_type:\n        pprof_profile.default_sample_type_index = pbdata.default_sample_type\n    pprof_profile.created_at = self.parse_created_at(pbdata.time_nanos)\n    pprof_profile.period = pbdata.period\n    pprof_profile.period_type = self.to_smaple_type(pbdata.period_type)\n    return pprof_profile\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        \"\"\"TODO\"\"\"\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        \"\"\"TODO\"\"\"\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_sample(self, sample) -> PprofFrame | None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_sample(self, sample) -> PprofFrame | None:\n    values = sample.value\n    locations = list(reversed([self.locations[i] for i in sample.location_id]))\n    my_depth = sum(len(loc.lines) for loc in locations)\n    self.highest = max(my_depth, self.highest)\n    current_parent = None\n    head = None\n    for location in locations:\n        for line in location.lines:\n            frame = self.line2frame(location, line, values)\n            if current_parent:\n                frame.parent = current_parent\n                current_parent.children = [frame]\n            if not head:\n                head = frame\n            current_parent = frame\n    return head\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        \"\"\"TODO\"\"\"\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        \"\"\"TODO\"\"\"\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n    frame = PprofFrame(\n        name=line.function.name,\n        _id=self.idgenerator(),\n        values=values,\n        root=self.root,\n        mapping=location.mapping,\n    )\n    frame.line = line\n    self.id_store[frame._id] = frame\n    return frame\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        \"\"\"TODO\"\"\"\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        \"\"\"TODO\"\"\"\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_location(self, pblocations):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_location(self, pblocations):\n    parsed_locations = {}\n    for pl in pblocations:\n        loc = Location()\n        loc.id = pl.id\n        loc.mapping = self.mappings[pl.mapping_id]\n        loc.address = pl.address\n        loc.lines = self.parse_line(pl.line)\n        loc.is_folded = pl.is_folded\n        parsed_locations[loc.id] = loc\n    return parsed_locations\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        \"\"\"TODO\"\"\"\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        \"\"\"TODO\"\"\"\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_mapping(self, pbmappings):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_mapping(self, pbmappings):\n    mappings = {}\n    for pbm in pbmappings:\n        m = Mapping()\n        m.id = pbm.id\n        m.memory_start = pbm.memory_start\n        m.memory_limit = pbm.memory_limit\n        m.file_offset = pbm.file_offset\n        m.filename = self.s(pbm.filename)\n        m.build_id = self.s(pbm.build_id)\n        m.has_functions = pbm.has_functions\n        m.has_filenames = pbm.has_filenames\n        m.has_line_numbers = pbm.has_line_numbers\n        m.has_inline_frames = pbm.has_inline_frames\n        mappings[m.id] = m\n    return mappings\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        \"\"\"TODO\"\"\"\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        \"\"\"TODO\"\"\"\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_line(self, pblines) -> List[Line]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_line(self, pblines) -> List[Line]:\n    lines = []\n    for pl in reversed(pblines):\n        line = Line(line_no=pl.line, function=self.functions[pl.function_id])\n        lines.append(line)\n    return lines\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        \"\"\"TODO\"\"\"\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        \"\"\"TODO\"\"\"\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_functions(self, pfs):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_functions(self, pfs):\n    functions = {}\n    for pf in pfs:\n        functions[pf.id] = Function(\n            id=pf.id,\n            filename=self.s(pf.filename),\n            name=self.s(pf.name),\n            system_name=self.s(pf.system_name),\n            start_line=pf.start_line,\n        )\n    return functions\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        \"\"\"TODO\"\"\"\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        \"\"\"TODO\"\"\"\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_created_at(self, time_nanos):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_created_at(self, time_nanos):\n    date = datetime.datetime.fromtimestamp(\n        time_nanos / 1000000000.0, tz=datetime.timezone.utc\n    )\n    return date\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        \"\"\"TODO\"\"\"\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        \"\"\"TODO\"\"\"\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_sample_types(self, sample_types):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_sample_types(self, sample_types):\n    result = []\n    for st in sample_types:\n        result.append(self.to_smaple_type(st))\n    return result\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        \"\"\"TODO\"\"\"\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        \"\"\"TODO\"\"\"\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef to_smaple_type(self, st):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef to_smaple_type(self, st):\n    return SampleType(self.s(st.type), self.s(st.unit))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        \"\"\"TODO\"\"\"\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        \"\"\"TODO\"\"\"\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef validate(cls, content: bytes) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef validate(cls, content: bytes) -> bool:\n    try:\n        unmarshal(content)\n    except:\n        logger.info(\"Error when parse content as Pprof\")\n        return False\n    return True\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef get_frame_tree(root_frame):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n\n    def _get_child(frame):\n        return {c.name: _get_child(c) for c in frame.children}\n\n    return {\"root\": _get_child(root_frame)}\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef _get_child(frame):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _get_child(frame):\n    return {c.name: _get_child(c) for c in frame.children}\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```",
        "current_file_path": "flameshow/pprof_parser/parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nFunction Complement\n---\ndef parse_profile(binary_data, filename):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_profile(binary_data, filename):\n    parser = ProfileParser(filename)\n    profile = parser.parse(binary_data)\n    return profile\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        \"\"\"TODO\"\"\"\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        \"\"\"TODO\"\"\"\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef scroll_to_make_line_center(self, line_no):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef scroll_to_make_line_center(self, line_no):\n    height = self.size.height\n    start_line = max(0, line_no - round(height / 2))\n    self.scroll_to(y=start_line)\n    return start_line\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        \"\"\"TODO\"\"\"\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        \"\"\"TODO\"\"\"\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef __init__(\n    self,\n    profile,\n    _debug_exit_after_rednder=False,\n    *args,\n    **kwargs,\n):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __init__(\n    self,\n    profile,\n    _debug_exit_after_rednder=False,\n    *args,\n    **kwargs,\n):\n    super().__init__(*args, **kwargs)\n    self.profile = profile\n    self.root_stack = profile.root_stack\n    self._debug_exit_after_rednder = _debug_exit_after_rednder\n    self.parents_that_only_one_child = []\n    self.filename = self.profile.filename\n    if profile.default_sample_type_index < 0:\n        self.sample_index = (\n            len(profile.sample_types) + profile.default_sample_type_index\n        )\n    else:\n        self.sample_index = profile.default_sample_type_index\n    fg = FlameGraph(\n        self.profile, self.focused_stack_id, self.sample_index, self.root_stack\n    )\n    fg.styles.height = self.profile.highest_lines + 1\n    self.flamegraph_widget = fg\n    tabs = [\n        Tab(f\"{s.sample_type}, {s.sample_unit}\", id=f\"sample-{index}\")\n        for index, s in enumerate(profile.sample_types)\n    ]\n    active_tab = tabs[self.sample_index].id\n    self.tabs_widget = SampleTabs(*tabs, active=active_tab)\n    self.frame_detail = FrameDetail(\n        profile=profile, frame=self.root_stack, sample_index=self.sample_index\n    )\n    self.show_information_screen = False\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        \"\"\"TODO\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        \"\"\"TODO\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef on_mount(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef on_mount(self):\n    logger.info(\"mounted\")\n    self.title = \"flameshow\"\n    self.sub_title = f\"v{__version__}\"\n    self.view_frame = self.root_stack\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        \"\"\"TODO\"\"\"\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        \"\"\"TODO\"\"\"\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef compose(self) -> ComposeResult:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef compose(self) -> ComposeResult:\n    \"\"\"Create child widgets for the app.\"\"\"\n    center_text = self._center_header_text(self.sample_index)\n    yield FlameshowHeader(center_text)\n    yield self.tabs_widget\n    yield FlameGraphScroll(self.flamegraph_widget, id=\"flamegraph-out-container\")\n    yield self.frame_detail\n    yield self._profile_info(self.profile.created_at)\n    yield Footer()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        \"\"\"TODO\"\"\"\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        \"\"\"TODO\"\"\"\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef _center_header_text(self, sample_index):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _center_header_text(self, sample_index):\n    chosen_sample_type = self.profile.sample_types[sample_index]\n    center_header = f\"{self.filename}: ({chosen_sample_type.sample_type}, {chosen_sample_type.sample_unit})\"\n    return center_header\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        \"\"\"TODO\"\"\"\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        \"\"\"TODO\"\"\"\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef _profile_info(self, created_at: datetime):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _profile_info(self, created_at: datetime):\n    if not created_at:\n        return Static(\"\")\n    datetime_str = created_at.astimezone().strftime(\n        \"Dumped at %Y %b %d(%A) %H:%M:%S %Z\"\n    )\n    return Static(datetime_str, id=\"profile-detail-info\")\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_switch_sample_type(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_switch_sample_type(self):\n    self.tabs_widget.action_next_tab()\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        \"\"\"TODO\"\"\"\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        \"\"\"TODO\"\"\"\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef sample_unit(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef sample_unit(self):\n    return self.profile.sample_types[self.sample_index].sample_unit\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        \"\"\"TODO\"\"\"\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        \"\"\"TODO\"\"\"\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_debug(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_debug(self):\n    logger.info(\"currently focused on: %s\", self.focused)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        \"\"\"TODO\"\"\"\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        \"\"\"TODO\"\"\"\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef handle_sample_type_changed(self, event: Tabs.TabActivated):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef handle_sample_type_changed(self, event: Tabs.TabActivated):\n    logger.info(\"Tab changed: %s\", event)\n    chosen_index = event.tab.id.split(\"-\")[1]\n    self.sample_index = int(chosen_index)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        \"\"\"TODO\"\"\"\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        \"\"\"TODO\"\"\"\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_information_screen(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_information_screen(self):\n    if self.show_information_screen:\n        self.pop_screen()\n    else:\n        self.push_screen(\n            InformaionScreen(\n                self.view_frame, self.sample_index, self.sample_unit, self.profile\n            )\n        )\n    self.show_information_screen = not self.show_information_screen\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [
            "flameshow/__init__.py",
            "flameshow/colors.py",
            "flameshow/const.py",
            "flameshow/exceptions.py",
            "flameshow/main.py",
            "flameshow/models.py",
            "flameshow/runtime.py",
            "flameshow/utils.py",
            "flameshow/parsers/__init__.py",
            "flameshow/parsers/stackcollapse_parser.py",
            "flameshow/pprof_parser/__init__.py",
            "flameshow/pprof_parser/parser.py",
            "flameshow/pprof_parser/profile_pb2.py",
            "flameshow/render/__init__.py",
            "flameshow/render/app.py",
            "flameshow/render/flamegraph.py",
            "flameshow/render/framedetail.py",
            "flameshow/render/header.py",
            "flameshow/render/tabs.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/render/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `flameshow/__init__.py`.\n\n```python\n__version__ = \"1.1.2\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `flameshow/colors.py`.\n\n```python\nimport logging\nimport random\nfrom textual.color import Color\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorPlatteBase:\n    def __init__(self):\n        pass\n\n    def get_color(self, key):\n        pass\n\n    def assign_color(self, key):\n        pass\n\n\nclass LinaerColorPlatte(ColorPlatteBase):\n    def __init__(\n        self, start_color=Color.parse(\"#CD0000\"), end_color=Color.parse(\"#FFE637\")\n    ) -> None:\n        pass\n\n    def assign_color(self, key):\n        pass\n\n    def generate_platte(self):\n        pass\n\n\nclass FlameGraphRandomColorPlatte(ColorPlatteBase):\n    def __init__(self) -> None:\n        pass\n\n    def assign_color(self, *args):\n        pass\n\n\nflamegraph_random_color_platte = FlameGraphRandomColorPlatte()\nlinaer_color_platte = LinaerColorPlatte()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `flameshow/const.py`.\n\n```python\nVIEW_INFO_COLOR = \"#ffffff\"\nVIEW_INFO_OTHER_COLOR = \"#8884FF\"\nSELECTED_PARENTS_BG_COLOR_BLEND_TO = \"#8b0000\"\nSELECTED_PARENTS_BG_COLOR_BLEND_FACTOR = 0.5\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `flameshow/exceptions.py`.\n\n```python\nclass FlameshowException(Exception):\n    \"\"\"FlameShow base Exception\"\"\"\n\n\nclass ProfileParseException(FlameshowException):\n    \"\"\"Can not parse the profile\"\"\"\n\n\nclass UsageError(FlameshowException):\n    \"\"\"Usage Error\"\"\"\n\n\nclass RenderException(FlameshowException):\n    \"\"\"Got error when render, this usually means code bug of Flameshow, you can open an issue\"\"\"\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `flameshow/main.py`.\n\n```python\nimport logging\nimport os\nimport sys\nimport time\nimport click\nfrom flameshow import __version__\nfrom flameshow.parsers import parse\nfrom flameshow.render import FlameshowApp\n\nlogger = logging.getLogger(__name__)\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef ensure_tty():\n    pass\n\n\ndef run_app(verbose, log_to, profile_f, _debug_exit_after_rednder):\n    pass\n\n\ndef print_version(ctx, _, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    count=True,\n    default=2,\n    help=\"Add log verbose level, using -v, -vv, -vvv for printing more logs.\",\n)\n@click.option(\n    \"-l\",\n    \"--log-to\",\n    type=click.Path(),\n    default=None,\n    help=\"Printing logs to a file, for debugging, default is no logs.\",\n)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.argument(\"profile\", type=click.File(\"rb\"))\ndef main(verbose, log_to, profile):\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `flameshow/models.py`.\n\n```python\nimport datetime\nimport logging\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Set\nfrom flameshow.utils import sizeof\nfrom rich.style import Style\nfrom rich.text import Text\nfrom typing_extensions import Self\nfrom .runtime import r\n\nlogger = logging.getLogger(__name__)\n\n\nclass Frame:\n    def __init__(\n        self, name, _id, children=None, parent=None, values=None, root=None\n    ) -> None:\n        pass\n\n    def pile_up(self, childstack: Self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    @property\n    def display_color(self):\n        pass\n\n    def humanize(self, sample_unit, value):\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def render_detail(self, sample_index: int, sample_unit: str):\n        \"\"\"\n        render stacked information\n        \"\"\"\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n    @property\n    def title(self) -> Text:\n        \"\"\"Full name which will be displayed in the frame detail panel\"\"\"\n        pass\n\n    @property\n    def color_key(self):\n        \"\"\"Same key will get the same color\"\"\"\n        pass\n\n    @property\n    def display_name(self):\n        \"\"\"The name display on the flamegraph\"\"\"\n        pass\n\n\n@dataclass\nclass SampleType:\n    sample_type: str = \"\"\n    sample_unit: str = \"\"\n\n\n@dataclass\nclass Profile:\n    filename: str\n    root_stack: Frame\n    highest_lines: int\n    total_sample: int\n    sample_types: List[SampleType]\n    id_store: Dict[int, Frame]\n    default_sample_type_index: int = -1\n    period_type: SampleType | None = None\n    period: int = 0\n    created_at: datetime.datetime | None = None\n    lines: List = field(init=False)\n    frameid_to_lineno: Dict[int, int] = field(init=False)\n    name_aggr: Dict[str, List[Frame]] = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        init_lines must be called before render\n        \"\"\"\n        pass\n\n    def get_name_aggr(\n        self, start_frame: Frame, names: (Set[str] | None) = None\n    ) -> Dict[str, List[Frame]]:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `flameshow/runtime.py`.\n\n```python\n\"\"\"\nHolds the run time configs.\nCan be changed dynamically.\n\"\"\"\nimport logging\nfrom dataclasses import dataclass\nfrom .colors import flamegraph_random_color_platte\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Runtime:\n    color_platte = flamegraph_random_color_platte\n\n    def get_color(self, key):\n        pass\n\n\nr = Runtime()\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `flameshow/utils.py`.\n\n```python\ndef sizeof(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/9\n---\nHere is the file sketch of `flameshow/parsers/__init__.py`.\n\n```python\nimport logging\nfrom flameshow.exceptions import ProfileParseException\nfrom flameshow.pprof_parser.parser import ProfileParser as PprofParser\nfrom .stackcollapse_parser import StackCollapseParser\n\nlogger = logging.getLogger(__name__)\nALL_PARSERS = [PprofParser, StackCollapseParser]\n\n\ndef choose_parser(content: bytes):\n    pass\n\n\ndef parse(filecontent: bytes, filename):\n    pass\n```\n\n---\nRelevant File Sketch/10\n---\nHere is the file sketch of `flameshow/parsers/stackcollapse_parser.py`.\n\n```python\nimport logging\nimport os\nimport re\nfrom typing import Dict\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\n\nlogger = logging.getLogger(__name__)\n\n\nclass StackCollapseFrame(Frame):\n    def render_one_frame_detail(self, frame, sample_index: int, sample_unit: str):\n        pass\n\n\nclass StackCollapseParser:\n    def __init__(self, filename) -> None:\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def parse(self, text_data):\n        pass\n\n    def parse_line(self, line) -> None:\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n```\n\n---\nRelevant File Sketch/11\n---\nHere is the file sketch of `flameshow/pprof_parser/__init__.py`.\n\n```python\nfrom .parser import parse_profile\n\n__all__ = [\"parse_profile\"]\n```\n\n---\nRelevant File Sketch/12\n---\nHere is the file sketch of `flameshow/pprof_parser/parser.py`.\n\n```python\n\"\"\"\nParse golang's pprof format into flameshow.models which can be rendered.\n\nRef:\nhttps://github.com/google/pprof/tree/main/proto\n\"\"\"\nimport datetime\nimport gzip\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List\nfrom flameshow.models import Frame, Profile, SampleType\nfrom rich.text import Text\nfrom . import profile_pb2\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass Function:\n    id: int = 0\n    filename: str = \"\"\n    name: str = \"\"\n    start_line: int = 0\n    system_name: str = \"\"\n\n\n@dataclass\nclass Line:\n    line_no: int = 0\n    function: Function = field(default_factory=Function)\n\n\n@dataclass\nclass Mapping:\n    id: int = 0\n    memory_start: int = 0\n    memory_limit: int = 0\n    file_offset: int = 0\n    filename: str = \"\"\n    build_id: str = \"\"\n    has_functions: bool | None = None\n    has_filenames: bool | None = None\n    has_line_numbers: bool | None = None\n    has_inline_frames: bool | None = None\n\n\n@dataclass\nclass Location:\n    id: int = 0\n    mapping: Mapping = field(default_factory=Mapping)\n    address: int = 0\n    lines: List[Line] = field(default_factory=list)\n    is_folded: bool = False\n\n\nclass PprofFrame(Frame):\n    def __init__(\n        self,\n        name,\n        _id,\n        children=None,\n        parent=None,\n        values=None,\n        root=None,\n        line=None,\n        mapping=None,\n    ) -> None:\n        pass\n\n    @property\n    def color_key(self):\n        pass\n\n    @property\n    def display_name(self):\n        pass\n\n    def render_one_frame_detail(self, frame, sample_index, sample_unit):\n        pass\n\n    @property\n    def title(self) -> str:\n        pass\n\n\ndef unmarshal(content) -> profile_pb2.Profile:\n    pass\n\n\nclass ProfileParser:\n    def __init__(self, filename):\n        pass\n\n    def idgenerator(self):\n        pass\n\n    def s(self, index):\n        pass\n\n    def parse_internal_data(self, pbdata):\n        pass\n\n    def parse(self, binary_data):\n        pass\n\n    def parse_sample(self, sample) -> PprofFrame | None:\n        pass\n\n    def line2frame(self, location: Location, line: Line, values) -> PprofFrame:\n        pass\n\n    def parse_location(self, pblocations):\n        pass\n\n    def parse_mapping(self, pbmappings):\n        pass\n\n    def parse_line(self, pblines) -> List[Line]:\n        pass\n\n    def parse_functions(self, pfs):\n        pass\n\n    def parse_created_at(self, time_nanos):\n        pass\n\n    def parse_sample_types(self, sample_types):\n        pass\n\n    def to_smaple_type(self, st):\n        pass\n\n    @classmethod\n    def validate(cls, content: bytes) -> bool:\n        pass\n\n\ndef get_frame_tree(root_frame):\n    \"\"\"\n    only for testing and debugging\n    \"\"\"\n    pass\n\n\ndef parse_profile(binary_data, filename):\n    pass\n\n\nif __name__ == \"__main__\":\n    with open(\"tests/pprof_data/goroutine.out\", \"rb\") as f:\n        content = f.read()\n    parse_profile(content, \"abc\")\n```\n\n---\nRelevant File Sketch/13\n---\nHere is the file sketch of `flameshow/pprof_parser/profile_pb2.py`.\n\n```python\n\"\"\"Generated protocol buffer code.\"\"\"\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import descriptor_pool as _descriptor_pool\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf.internal import builder as _builder\n\n_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(\n    b'\\n\\rprofile.proto\\x12\\x12perftools.profiles\"\\xd5\\x03\\n\\x07Profile\\x122\\n\\x0bsample_type\\x18\\x01 \\x03(\\x0b2\\x1d.perftools.profiles.ValueType\\x12*\\n\\x06sample\\x18\\x02 \\x03(\\x0b2\\x1a.perftools.profiles.Sample\\x12,\\n\\x07mapping\\x18\\x03 \\x03(\\x0b2\\x1b.perftools.profiles.Mapping\\x12.\\n\\x08location\\x18\\x04 \\x03(\\x0b2\\x1c.perftools.profiles.Location\\x12.\\n\\x08function\\x18\\x05 \\x03(\\x0b2\\x1c.perftools.profiles.Function\\x12\\x14\\n\\x0cstring_table\\x18\\x06 \\x03(\\t\\x12\\x13\\n\\x0bdrop_frames\\x18\\x07 \\x01(\\x03\\x12\\x13\\n\\x0bkeep_frames\\x18\\x08 \\x01(\\x03\\x12\\x12\\n\\ntime_nanos\\x18\\t \\x01(\\x03\\x12\\x16\\n\\x0eduration_nanos\\x18\\n \\x01(\\x03\\x122\\n\\x0bperiod_type\\x18\\x0b \\x01(\\x0b2\\x1d.perftools.profiles.ValueType\\x12\\x0e\\n\\x06period\\x18\\x0c \\x01(\\x03\\x12\\x0f\\n\\x07comment\\x18\\r \\x03(\\x03\\x12\\x1b\\n\\x13default_sample_type\\x18\\x0e \\x01(\\x03\"\\'\\n\\tValueType\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\x03\\x12\\x0c\\n\\x04unit\\x18\\x02 \\x01(\\x03\"V\\n\\x06Sample\\x12\\x13\\n\\x0blocation_id\\x18\\x01 \\x03(\\x04\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x03\\x12(\\n\\x05label\\x18\\x03 \\x03(\\x0b2\\x19.perftools.profiles.Label\"@\\n\\x05Label\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x03\\x12\\x0b\\n\\x03str\\x18\\x02 \\x01(\\x03\\x12\\x0b\\n\\x03num\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08num_unit\\x18\\x04 \\x01(\\x03\"\\xdd\\x01\\n\\x07Mapping\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_start\\x18\\x02 \\x01(\\x04\\x12\\x14\\n\\x0cmemory_limit\\x18\\x03 \\x01(\\x04\\x12\\x13\\n\\x0bfile_offset\\x18\\x04 \\x01(\\x04\\x12\\x10\\n\\x08filename\\x18\\x05 \\x01(\\x03\\x12\\x10\\n\\x08build_id\\x18\\x06 \\x01(\\x03\\x12\\x15\\n\\rhas_functions\\x18\\x07 \\x01(\\x08\\x12\\x15\\n\\rhas_filenames\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10has_line_numbers\\x18\\t \\x01(\\x08\\x12\\x19\\n\\x11has_inline_frames\\x18\\n \\x01(\\x08\"v\\n\\x08Location\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x12\\n\\nmapping_id\\x18\\x02 \\x01(\\x04\\x12\\x0f\\n\\x07address\\x18\\x03 \\x01(\\x04\\x12&\\n\\x04line\\x18\\x04 \\x03(\\x0b2\\x18.perftools.profiles.Line\\x12\\x11\\n\\tis_folded\\x18\\x05 \\x01(\\x08\")\\n\\x04Line\\x12\\x13\\n\\x0bfunction_id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04line\\x18\\x02 \\x01(\\x03\"_\\n\\x08Function\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\x04\\x12\\x0c\\n\\x04name\\x18\\x02 \\x01(\\x03\\x12\\x13\\n\\x0bsystem_name\\x18\\x03 \\x01(\\x03\\x12\\x10\\n\\x08filename\\x18\\x04 \\x01(\\x03\\x12\\x12\\n\\nstart_line\\x18\\x05 \\x01(\\x03B-\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProtob\\x06proto3'\n)\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, \"profile_pb2\", globals())\nif _descriptor._USE_C_DESCRIPTORS == False:\n    DESCRIPTOR._options = None\n    DESCRIPTOR._serialized_options = (\n        b\"\\n\\x1dcom.google.perftools.profilesB\\x0cProfileProto\"\n    )\n    _PROFILE._serialized_start = 38\n    _PROFILE._serialized_end = 507\n    _VALUETYPE._serialized_start = 509\n    _VALUETYPE._serialized_end = 548\n    _SAMPLE._serialized_start = 550\n    _SAMPLE._serialized_end = 636\n    _LABEL._serialized_start = 638\n    _LABEL._serialized_end = 702\n    _MAPPING._serialized_start = 705\n    _MAPPING._serialized_end = 926\n    _LOCATION._serialized_start = 928\n    _LOCATION._serialized_end = 1046\n    _LINE._serialized_start = 1048\n    _LINE._serialized_end = 1089\n    _FUNCTION._serialized_start = 1091\n    _FUNCTION._serialized_end = 1186\n```\n\n---\nRelevant File Sketch/14\n---\nHere is the file sketch of `flameshow/render/__init__.py`.\n\n```python\nfrom .app import FlameshowApp\n\n__all__ = [\"FlameshowApp\"]\n```\n\n---\nRelevant File Sketch/15\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        pass\n```\n\n---\nRelevant File Sketch/16\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nRelevant File Sketch/17\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nRelevant File Sketch/18\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nRelevant File Sketch/19\n---\nHere is the file sketch of `flameshow/render/tabs.py`.\n\n```python\nfrom textual.widgets import Tabs\n\n\nclass SampleTabs(Tabs, can_focus=(False)):\n    pass\n```\n\n---\nCurrent File Sketch/20\n---\nHere is the file sketch of `flameshow/render/app.py`.\n\n```python\nimport logging\nfrom datetime import datetime\nfrom typing import ClassVar\nfrom flameshow import __version__\nfrom flameshow.render.framedetail import FrameDetail, InformaionScreen\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.render.tabs import SampleTabs\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding, BindingType\nfrom textual.containers import VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.reactive import reactive\nfrom textual.widgets import Footer, Static, Tab, Tabs\nfrom .flamegraph import FlameGraph\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlameGraphScroll(VerticalScroll, inherit_bindings=(False), can_focus=(False)):\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\"b\", \"page_up\", \"Scroll Page Up\", show=True, key_display=\"B\"),\n        Binding(\"f,space\", \"page_down\", \"Scroll Page Down\", show=True, key_display=\"F\"),\n        Binding(\"home\", \"scroll_home\", \"Scroll Home\", show=False),\n        Binding(\"end\", \"scroll_end\", \"Scroll End\", show=False),\n        Binding(\"pageup\", \"page_up\", \"Page Up\", show=False),\n        Binding(\"pagedown\", \"page_down\", \"Page Down\", show=False),\n    ]\n\n    def scroll_to_make_line_center(self, line_no):\n        pass\n\n\nclass FlameshowApp(App):\n    BINDINGS = [\n        Binding(\"d\", \"toggle_dark\", \"Toggle dark mode\", show=False),\n        Binding(\n            \"tab,n\",\n            \"switch_sample_type\",\n            \"Switch Sample Type\",\n            priority=True,\n            show=True,\n            key_display=\"tab\",\n        ),\n        Binding(\"ctrl+c,q\", \"quit\", \"Quit\", show=True, key_display=\"Q\"),\n        Binding(\"o\", \"debug\"),\n        Binding(\"i\", \"information_screen\", \"Toggle view stack\", show=True),\n    ]\n    DEFAULT_CSS = \"\"\"\n\n        width: 20%;\n        height: 1fr;\n    }\n\n    #profile-detail-info {\n        text-align: right;\n        color: grey;\n    }\n\n    Tabs {\n        margin-bottom: 0;\n    }\n    \"\"\"\n    focused_stack_id = reactive(0)\n    sample_index = reactive(None, init=False)\n    view_frame = reactive(None, init=False)\n\n    def __init__(self, profile, _debug_exit_after_rednder=False, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def _center_header_text(self, sample_index):\n        pass\n\n    def _profile_info(self, created_at: datetime):\n        pass\n\n    @on(FlameGraph.ViewFrameChanged)\n    async def handle_view_frame_changed(self, e):\n        logger.debug(\"app handle_view_frame_changed...\")\n        new_frame = e.frame\n        by_mouse = e.by_mouse\n        self.view_frame = new_frame\n        self.flamegraph_widget.view_frame = new_frame\n        if not by_mouse:\n            frame_line_no = self.profile.frameid_to_lineno[new_frame._id]\n            container = self.query_one(\"#flamegraph-out-container\")\n            container.scroll_to_make_line_center(line_no=frame_line_no)\n\n    async def watch_sample_index(self, sample_index):\n        logger.info(\"sample index changed to %d\", sample_index)\n        center_text = self._center_header_text(self.sample_index)\n        try:\n            header = self.query_one(\"FlameshowHeader\")\n        except NoMatches:\n            logger.warning(\"FlameshowHeader not found, might be not composed yet.\")\n            return\n        header.center_text = center_text\n        self.flamegraph_widget.sample_index = sample_index\n        self.frame_detail.sample_index = sample_index\n        if self.show_information_screen:\n            information_screen = self.query_one(\"InformaionScreen\")\n            information_screen.sample_index = sample_index\n\n    async def watch_view_frame(self, old, new_frame):\n        logger.debug(\"view info stack changed: old: %s, new: %s\", old, new_frame)\n        self.frame_detail.frame = new_frame\n\n    async def watch_focused_stack_id(self, focused_stack_id):\n        logger.info(f\"focused_stack_id={focused_stack_id!r} changed\")\n        self.flamegraph_widget.focused_stack_id = focused_stack_id\n\n    def action_switch_sample_type(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def action_debug(self):\n        pass\n\n    @on(Tabs.TabActivated)\n    def handle_sample_type_changed(self, event: Tabs.TabActivated):\n        pass\n\n    def action_information_screen(self):\n        pass\n\n    @on(InformaionScreen.InformaionScreenPopped)\n    def handle_inforamtion_screen_pop(self, event):\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef handle_inforamtion_screen_pop(self, event):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef handle_inforamtion_screen_pop(self, event):\n    logger.info(\"Information screen popped, event=%s\", event)\n    if self.show_information_screen:\n        self.pop_screen()\n    self.show_information_screen = False\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    \"\"\"TODO\"\"\"\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    \"\"\"TODO\"\"\"\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef add_array(arr1, arr2):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef add_array(arr1, arr2):\n    return list(map(sum, zip(arr1, arr2)))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            \"\"\"TODO\"\"\"\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            \"\"\"TODO\"\"\"\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __repr__(self) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __repr__(self) -> str:\n    return f\"ViewFrameChanged(self.frame={self.frame!r})\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        \"\"\"TODO\"\"\"\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        \"\"\"TODO\"\"\"\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef render_lines(self, crop):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef render_lines(self, crop):\n    my_width = crop.size.width\n    self.frame_maps = self.generate_frame_maps(my_width, self.focused_stack_id)\n    logger.info(\"render crop: %s\", crop)\n    return super().render_lines(crop)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef generate_frame_maps(self, width, focused_stack_id):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef generate_frame_maps(self, width, focused_stack_id):\n    \"\"\"\n    compute attributes for render for every frame\n\n    only re-computes with width, focused_stack changing\n    \"\"\"\n    t1 = time.time()\n    logger.info(\n        \"lru cache miss, Generates frame map, for width=%d, focused_stack_id=%s\",\n        width,\n        focused_stack_id,\n    )\n    frame_maps: Dict[int, List[FrameMap]] = {}\n    current_focused_stack = self.profile.id_store[focused_stack_id]\n    st_count = len(current_focused_stack.values)\n    logger.debug(\"values count: %s\", st_count)\n    me = current_focused_stack\n    while me:\n        frame_maps[me._id] = [FrameMap(0, width) for _ in range(st_count)]\n        me = me.parent\n    logger.info(\"frame maps: %s\", frame_maps)\n\n    def _generate_for_children(frame):\n        my_maps = frame_maps[frame._id]\n        for sample_i, my_map in enumerate(my_maps):\n            parent_width = my_map.width\n            if frame.values[sample_i] <= 0:\n                child_widthes = [(0.0) for _ in frame.children]\n            else:\n                child_widthes = [\n                    (child.values[sample_i] / frame.values[sample_i] * parent_width)\n                    for child in frame.children\n                ]\n            tail_spaces = float(parent_width - sum(child_widthes))\n            if tail_spaces > 0:\n                child_widthes.append(tail_spaces)\n            rounded_child_widthes = iteround.saferound(\n                child_widthes, 0, topline=parent_width\n            )\n            offset = my_map.offset\n            for index, child in enumerate(frame.children):\n                child_width = int(rounded_child_widthes[index])\n                frame_maps.setdefault(child._id, []).append(\n                    FrameMap(offset=offset, width=child_width)\n                )\n                offset += child_width\n        for child in frame.children:\n            _generate_for_children(child)\n\n    _generate_for_children(current_focused_stack)\n    t2 = time.time()\n    logger.info(\"Generates frame maps done, took %.4f seconds\", t2 - t1)\n    return frame_maps\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _generate_for_children(frame):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _generate_for_children(frame):\n    my_maps = frame_maps[frame._id]\n    for sample_i, my_map in enumerate(my_maps):\n        parent_width = my_map.width\n        if frame.values[sample_i] <= 0:\n            child_widthes = [(0.0) for _ in frame.children]\n        else:\n            child_widthes = [\n                (child.values[sample_i] / frame.values[sample_i] * parent_width)\n                for child in frame.children\n            ]\n        tail_spaces = float(parent_width - sum(child_widthes))\n        if tail_spaces > 0:\n            child_widthes.append(tail_spaces)\n        rounded_child_widthes = iteround.saferound(\n            child_widthes, 0, topline=parent_width\n        )\n        offset = my_map.offset\n        for index, child in enumerate(frame.children):\n            child_width = int(rounded_child_widthes[index])\n            frame_maps.setdefault(child._id, []).append(\n                FrameMap(offset=offset, width=child_width)\n            )\n            offset += child_width\n    for child in frame.children:\n        _generate_for_children(child)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        \"\"\"TODO\"\"\"\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        \"\"\"TODO\"\"\"\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef render_lines(self, crop):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef render_lines(self, crop):\n    line = self.profile.lines[y]\n    if not self.frame_maps:\n        raise RenderException(\"frame_maps is not init yet!\")\n    segments = []\n    cursor = 0\n    for frame in line:\n        frame_maps = self.frame_maps.get(frame._id)\n        if not frame_maps:\n            continue\n        frame_map = frame_maps[self.sample_index]\n        my_width = frame_map.width\n        if not my_width:\n            continue\n        text = \"\u258f\" + frame.display_name\n        offset = frame_map.offset\n        pre_pad = offset - cursor\n        if pre_pad > 0:\n            segments.append(Segment(\" \" * pre_pad))\n            cursor += pre_pad\n        elif pre_pad < 0:\n            raise Exception(\"Prepad is negative! {}\".format(pre_pad))\n        if len(text) < my_width:\n            text += \" \" * (my_width - len(text))\n        if len(text) > my_width:\n            text = text[:my_width]\n        display_color = frame.display_color\n        bold = False\n        expand_before_line = self.profile.frameid_to_lineno[self.focused_stack_id]\n        if y <= expand_before_line:\n            display_color = display_color.blend(\n                Color.parse(SELECTED_PARENTS_BG_COLOR_BLEND_TO),\n                SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n            )\n        if frame is self.view_frame:\n            display_color = Color.parse(VIEW_INFO_COLOR)\n            bold = True\n        elif frame.name == self.view_frame.name:\n            display_color = Color.parse(VIEW_INFO_OTHER_COLOR)\n        if my_width > 0:\n            segments.append(Segment(text[0], Style(bgcolor=display_color.rich_color)))\n        if my_width > 1:\n            segments.append(\n                Segment(\n                    text[1:],\n                    Style(\n                        color=display_color.get_contrast_text().rich_color,\n                        bgcolor=display_color.rich_color,\n                        bold=bold,\n                    ),\n                )\n            )\n        cursor += my_width\n    strip = Strip(segments)\n    return strip\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        \"\"\"TODO\"\"\"\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        \"\"\"TODO\"\"\"\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_zoom_in(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_zoom_in(self):\n    logger.info(\"Zoom in!\")\n    self.focused_stack_id = self.view_frame._id\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        \"\"\"TODO\"\"\"\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        \"\"\"TODO\"\"\"\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_zoom_out(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_zoom_out(self):\n    logger.info(\"Zoom out!\")\n    self.focused_stack_id = self.profile.root_stack._id\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        \"\"\"TODO\"\"\"\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        \"\"\"TODO\"\"\"\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_move_down(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_move_down(self):\n    logger.debug(\"move down\")\n    view_frame = self.view_frame\n    children = view_frame.children\n    if not children:\n        logger.debug(\"no more children\")\n        return\n    new_view_info_frame = self._get_biggest_exist_child(children)\n    self.post_message(self.ViewFrameChanged(new_view_info_frame))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        \"\"\"TODO\"\"\"\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        \"\"\"TODO\"\"\"\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _get_biggest_exist_child(self, stacks):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _get_biggest_exist_child(self, stacks):\n    biggest = max(stacks, key=lambda s: s.values[self.sample_index])\n    return biggest\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        \"\"\"TODO\"\"\"\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        \"\"\"TODO\"\"\"\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_move_up(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_move_up(self):\n    logger.debug(\"move up\")\n    parent = self.view_frame.parent\n    if not parent:\n        logger.debug(\"no more children\")\n        return\n    self.post_message(self.ViewFrameChanged(parent))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        \"\"\"TODO\"\"\"\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        \"\"\"TODO\"\"\"\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_move_right(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_move_right(self):\n    logger.debug(\"move right\")\n    right = self._find_right_sibling(self.view_frame)\n    logger.debug(\"found right sibling: %s\", right)\n    if not right:\n        logger.debug(\"Got no right sibling\")\n        return\n    self.post_message(self.ViewFrameChanged(right))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        \"\"\"TODO\"\"\"\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        \"\"\"TODO\"\"\"\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _find_right_sibling(self, me):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _find_right_sibling(self, me):\n    my_parent = me.parent\n    while my_parent:\n        siblings = my_parent.children\n        if len(siblings) >= 2:\n            choose_index = siblings.index(me)\n            while choose_index < len(siblings):\n                choose_index = choose_index + 1\n                if (\n                    choose_index < len(siblings)\n                    and siblings[choose_index].values[self.sample_index] > 0\n                ):\n                    return siblings[choose_index]\n        me = my_parent\n        my_parent = my_parent.parent\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        \"\"\"TODO\"\"\"\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        \"\"\"TODO\"\"\"\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_move_left(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_move_left(self):\n    logger.debug(\"move left\")\n    left = self._find_left_sibling(self.view_frame)\n    if not left:\n        logger.debug(\"Got no left sibling\")\n        return\n    self.post_message(self.ViewFrameChanged(left))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _find_left_sibling(self, me):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _find_left_sibling(self, me):\n    \"\"\"\n    Find left.\n    Even not currently displayed, still can be viewed on detail.\n    No need to check if the fgid is currently rendered.\n    \"\"\"\n    my_parent = me.parent\n    while my_parent:\n        siblings = my_parent.children\n        if len(siblings) >= 2:\n            choose_index = siblings.index(me)\n            while choose_index >= 0:\n                choose_index = choose_index - 1\n                if (\n                    choose_index >= 0\n                    and siblings[choose_index].values[self.sample_index] > 0\n                ):\n                    return siblings[choose_index]\n        me = my_parent\n        my_parent = my_parent.parent\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        \"\"\"TODO\"\"\"\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        \"\"\"TODO\"\"\"\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef on_mouse_move(self, event: MouseMove) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef on_mouse_move(self, event: MouseMove) -> None:\n    hover_frame = self.get_frame_under_mouse(event)\n    if hover_frame:\n        logger.info(\"mouse hover on %s\", hover_frame)\n        self.post_message(self.ViewFrameChanged(hover_frame, by_mouse=True))\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        \"\"\"TODO\"\"\"\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        \"\"\"TODO\"\"\"\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        pass\n```\n\n---\nFunction Complement\n---\ndef handle_click_frame(self, event: Click):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef handle_click_frame(self, event: Click):\n    frame = self.get_frame_under_mouse(event)\n    if frame:\n        self.focused_stack_id = frame._id\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/render/flamegraph.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/flamegraph.py`.\n\n```python\nimport logging\nimport time\nfrom collections import namedtuple\nfrom functools import lru_cache\nfrom typing import Dict, List, Union\nimport iteround\nfrom flameshow.const import (\n    SELECTED_PARENTS_BG_COLOR_BLEND_FACTOR,\n    SELECTED_PARENTS_BG_COLOR_BLEND_TO,\n    VIEW_INFO_COLOR,\n    VIEW_INFO_OTHER_COLOR,\n)\nfrom flameshow.exceptions import RenderException\nfrom flameshow.models import Frame\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual import on\nfrom textual.binding import Binding\nfrom textual.color import Color\nfrom textual.events import Click, MouseEvent, MouseMove\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.strip import Strip\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\nFrameMap = namedtuple(\"FrameMap\", \"offset width\")\n\n\ndef add_array(arr1, arr2):\n    pass\n\n\nclass FlameGraph(Widget, can_focus=(True)):\n    BINDINGS = [\n        Binding(\"j,down\", \"move_down\", \"Down\", key_display=\"\u2193\"),\n        Binding(\"k,up\", \"move_up\", \"Up\", key_display=\"\u2191\"),\n        Binding(\"l,right\", \"move_right\", \"Right\", key_display=\"\u2192\"),\n        Binding(\"h,left\", \"move_left\", \"Left\", key_display=\"\u2190\"),\n        Binding(\"enter\", \"zoom_in\", \"Zoom In\"),\n        Binding(\"escape\", \"zoom_out\", \"Zoom Out\", show=False),\n    ]\n    focused_stack_id = reactive(0)\n    sample_index = reactive(0, init=False)\n    view_frame = reactive(None, init=False)\n\n    class ViewFrameChanged(Message):\n        \"\"\"View Frame changed\"\"\"\n\n        def __init__(self, frame, by_mouse=False) -> None:\n            pass\n\n        def __repr__(self) -> str:\n            pass\n\n    def __init__(\n        self,\n        profile,\n        focused_stack_id,\n        sample_index,\n        view_frame: Frame,\n        *args,\n        **kwargs\n    ):\n        pass\n\n    def render_lines(self, crop):\n        pass\n\n    @lru_cache\n    def generate_frame_maps(self, width, focused_stack_id):\n        \"\"\"\n        compute attributes for render for every frame\n\n        only re-computes with width, focused_stack changing\n        \"\"\"\n        pass\n\n    def render_line(self, y: int) -> Strip:\n        pass\n\n    def action_zoom_in(self):\n        pass\n\n    def action_zoom_out(self):\n        pass\n\n    def action_move_down(self):\n        pass\n\n    def _get_biggest_exist_child(self, stacks):\n        pass\n\n    def action_move_up(self):\n        pass\n\n    def action_move_right(self):\n        pass\n\n    def _find_right_sibling(self, me):\n        pass\n\n    def action_move_left(self):\n        pass\n\n    def _find_left_sibling(self, me):\n        \"\"\"\n        Find left.\n        Even not currently displayed, still can be viewed on detail.\n        No need to check if the fgid is currently rendered.\n        \"\"\"\n        pass\n\n    def on_mouse_move(self, event: MouseMove) -> None:\n        pass\n\n    @on(Click)\n    def handle_click_frame(self, event: Click):\n        pass\n\n    def get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_frame_under_mouse(self, event: MouseEvent) -> Union[None, Frame]:\n    line_no = event.y\n    x = event.x\n    if line_no >= len(self.profile.lines):\n        return\n    line = self.profile.lines[line_no]\n    for frame in line:\n        frame_maps = self.frame_maps.get(frame._id)\n        if not frame_maps:\n            continue\n        frame_map = frame_maps[self.sample_index]\n        offset = frame_map.offset\n        width = frame_map.width\n        if offset <= x < offset + width:\n            return frame\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    \"\"\"TODO\"\"\"\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    \"\"\"TODO\"\"\"\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef humanize(sample_unit, value):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef humanize(sample_unit, value):\n    display_value = value\n    if sample_unit == \"bytes\":\n        display_value = sizeof(value)\n    return str(display_value)\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_this_total_value_humanize(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_this_total_value_humanize(self):\n    logger.info(\"this instance: %s\", self.frame)\n    logger.info(\n        \"this instance name: %s, values=%s\", self.frame.display_name, self.frame.values\n    )\n    value = self.frame.values[self.sample_index]\n    value_display = humanize(self.sample_unit, value)\n    return value_display\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_self_value(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_self_value(self):\n    value = self.frame.values[self.sample_index]\n    self_value = value\n    child_value = 0\n    if self.frame.children:\n        for child in self.frame.children:\n            child_value += child.values[self.sample_index]\n    self_value -= child_value\n    return self_value\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_self_value_humanize(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_self_value_humanize(self):\n    value_display = humanize(self.sample_unit, self.frame_self_value)\n    return value_display\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_self_percent(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_self_percent(self):\n    frame = self.frame\n    sample_index = self.sample_index\n    if not frame.root.values[sample_index]:\n        p_root = 0\n    else:\n        p_root = self.frame_self_value / frame.root.values[sample_index] * 100\n    return f\"{p_root:.2f}%\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_total_percent(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_total_percent(self):\n    frame = self.frame\n    sample_index = self.sample_index\n    if not frame.root.values[sample_index]:\n        p_root = 0\n    else:\n        p_root = frame.values[sample_index] / frame.root.values[sample_index] * 100\n    return f\"{p_root:.2f}%\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_all_self_value(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_all_self_value(self):\n    frames_same_name = self.name_to_frame[self.frame.name]\n    total_value = 0\n    i = self.sample_index\n    for instance in frames_same_name:\n        self_value = instance.values[i]\n        if instance.children:\n            child_total = sum(child.values[i] for child in instance.children)\n            self_value -= child_total\n        total_value += self_value\n    return total_value\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_all_self_value_humanize(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_all_self_value_humanize(self):\n    value_display = humanize(self.sample_unit, self.frame_all_self_value)\n    return value_display\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_all_total_value(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_all_total_value(self):\n    frames_same_name = self.name_to_frame[self.frame.name]\n    total_value = sum(f.values[self.sample_index] for f in frames_same_name)\n    return total_value\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_all_total_value_humanize(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_all_total_value_humanize(self):\n    value_display = humanize(self.sample_unit, self.frame_all_total_value)\n    return value_display\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_all_self_percent(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_all_self_percent(self):\n    frame = self.frame\n    sample_index = self.sample_index\n    if not frame.root.values[sample_index]:\n        p_root = 0\n    else:\n        p_root = self.frame_all_self_value / frame.root.values[sample_index] * 100\n    return f\"{p_root:.2f}%\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef frame_all_total_percent(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef frame_all_total_percent(self):\n    frame = self.frame\n    sample_index = self.sample_index\n    if not frame.root.values[sample_index]:\n        p_root = 0\n    else:\n        p_root = self.frame_all_total_value / frame.root.values[sample_index] * 100\n    return f\"{p_root:.2f}%\"\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        \"\"\"TODO\"\"\"\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```",
        "current_file_path": "flameshow/render/framedetail.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/framedetail.py`.\n\n```python\nimport logging\nfrom flameshow.models import Frame\nfrom flameshow.render.header import FlameshowHeader\nfrom flameshow.utils import sizeof\nfrom textual.binding import Binding\nfrom textual.containers import Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Static\n\nlogger = logging.getLogger(__name__)\n\n\ndef humanize(sample_unit, value):\n    pass\n\n\nclass FrameStatThis(Widget):\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n    DEFAULT_CSS = \"\"\"\n    FrameStatThis {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-this-total-label {\n        background: $primary-background;\n    }\n    #stat-this-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_this_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_value(self):\n        pass\n\n    @property\n    def frame_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_self_percent(self):\n        pass\n\n    @property\n    def frame_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameStatAll(Widget):\n    frame = reactive(None)\n    sample_index = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    FrameStatAll {\n        height: 5;\n        padding: 0 1;\n        border: round $secondary;\n        border-title-align: center;\n\n        layout: grid;\n        grid-size: 2 3;\n        grid-rows: 1fr;\n        grid-columns: 1fr;\n        grid-gutter: 0 1;\n    }\n\n    #stat-all-total-label {\n        background: $primary-background;\n    }\n    #stat-all-self-label {\n        background: $secondary-background;\n    }\n    \"\"\"\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_frame(self, _: Frame):\n        pass\n\n    def watch_sample_index(self, _: int):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def frame_all_self_value(self):\n        pass\n\n    @property\n    def frame_all_self_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_total_value(self):\n        pass\n\n    @property\n    def frame_all_total_value_humanize(self):\n        pass\n\n    @property\n    def frame_all_self_percent(self):\n        pass\n\n    @property\n    def frame_all_total_percent(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n\nclass FrameDetail(Widget):\n    DEFAULT_CSS = \"\"\"\n    FrameDetail {\n        layout: horizontal;\n        height: 10;\n    }\n\n    #span-stack-container {\n        width: 1fr;\n        height: 1fr;\n        padding-left: 1;\n        padding-right: 0;\n        border: round $secondary;\n        content-align-vertical: middle;\n    }\n\n    #stat-container {\n        width: 20%;\n        max-width: 25;\n    }\n    \"\"\"\n    frame = reactive(None, init=False)\n    sample_index = reactive(None, init=False)\n\n    def __init__(self, frame, profile, sample_index, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n\n    def watch_frame(self, new_frame):\n        pass\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n\nclass InformaionScreen(Screen):\n    BINDINGS = [Binding(\"escape\", \"exit_screen\", \"Close detail screen\", show=True)]\n    sample_index = reactive(None, init=False)\n\n    class InformaionScreenPopped(Message):\n        pass\n\n    def __init__(\n        self, frame, sample_index, sample_unit, profile, *args, **kwargs\n    ) -> None:\n        pass\n\n    def compose(self):\n        pass\n\n    def action_exit_screen(self):\n        \"\"\"TODO\"\"\"\n\n    def watch_sample_index(self, new_sample_index):\n        pass\n\n    def _rerender(self):\n        pass\n\n    @property\n    def sample_unit(self):\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_exit_screen(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_exit_screen(self):\n    self.post_message(self.InformaionScreenPopped())\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        \"\"\"TODO\"\"\"\n\n    def watch_center_text(self, newtext):\n        pass\n```",
        "current_file_path": "flameshow/render/header.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        \"\"\"TODO\"\"\"\n\n    def watch_center_text(self, newtext):\n        pass\n```\n\n---\nFunction Complement\n---\ndef compose(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef compose(self):\n    yield HeaderIcon()\n    yield Horizontal(\n        HeaderTitle(), HeaderOpenedFilename(self.center_text, id=\"header-center-text\")\n    )\n```"
    },
    {
        "readme": "# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "flameshow/render/header.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# Flameshow\n\nFlameshow is a terminal Flamegraph viewer.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 flameshow\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 colors.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 exceptions.py\n    \u251c\u2500\u2500 main.py # from flameshow import __version__;\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 runtime.py\n    \u251c\u2500\u2500 utils.py\n    \u251c\u2500\u2500 parsers\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u2514\u2500\u2500 stackcollapse_parser.py\n    \u251c\u2500\u2500 pprof_parser\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 parser.py # from . import profile_pb2;\n    |   \u2514\u2500\u2500 profile_pb2.py\n    \u2514\u2500\u2500 render\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from flameshow import __version__;\n        \u251c\u2500\u2500 flamegraph.py\n        \u251c\u2500\u2500 framedetail.py\n        \u251c\u2500\u2500 header.py\n        \u2514\u2500\u2500 tabs.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `flameshow/render/header.py`.\n\n```python\nimport logging\nfrom rich.text import Text\nfrom textual.app import RenderResult\nfrom textual.containers import Horizontal\nfrom textual.css.query import NoMatches\nfrom textual.reactive import Reactive, reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\n\nlogger = logging.getLogger(__name__)\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding-right: 1;\n        width: 3;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = reactive(\"\ud83d\udd25\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass HeaderTitle(Widget):\n    \"\"\"Display the title / subtitle in the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderTitle {\n        content-align: left middle;\n        width: 20;\n    }\n    \"\"\"\n    text: Reactive[str] = Reactive(\"\")\n    \"\"\"The main title text.\"\"\"\n    sub_text = Reactive(\"\")\n    \"\"\"The sub-title text.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the title and sub-title.\n\n        Returns:\n            The value to render.\n        \"\"\"\n        pass\n\n\nclass HeaderOpenedFilename(Widget):\n    DEFAULT_CSS = \"\"\"\n    HeaderOpenedFilename {\n        content-align: center middle;\n        width: 70%;\n    }\n    \"\"\"\n    filename = reactive(\"\")\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def render(self) -> RenderResult:\n        pass\n\n\nclass FlameshowHeader(Header):\n    center_text = reactive(\"\", init=False)\n\n    def __init__(self, filename, *args, **kwargs):\n        pass\n\n    def compose(self):\n        pass\n\n    def watch_center_text(self, newtext):\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef watch_center_text(self, newtext):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef watch_center_text(self, newtext):\n    try:\n        headero = self.query_one(\"#header-center-text\")\n    except NoMatches:\n        pass\n    else:\n        headero.filename = newtext\n```"
    }
]