[
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    \"\"\"TODO\"\"\"\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    \"\"\"TODO\"\"\"\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef call_anthropic(prompt, temperature=0.5):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef call_anthropic(prompt, temperature=0.5):\n    prompt = f\"{HUMAN_PROMPT} {prompt} {AI_PROMPT}\"\n    try:\n        anthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n        request = anthropic.completions.create(\n            model=\"claude-2\",\n            max_tokens_to_sample=3000,\n            temperature=temperature,\n            prompt=prompt,\n        )\n        return request.completion\n    except:\n        return \"An error occured with Claude\"\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    \"\"\"TODO\"\"\"\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    \"\"\"TODO\"\"\"\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef call_openai(prompt, temperature=0.5):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef call_openai(prompt, temperature=0.5):\n    try:\n        result = openai.ChatCompletion.create(\n            model=\"gpt-4-1106-preview\",\n            temperature=temperature,\n            messages=[{\"role\": \"user\", \"content\": prompt}],\n        )\n        return result.choices[0].message.content\n    except openai.error.InvalidRequestError as e:\n        error_msg = f\"An error occurred with OpenAI: {e}\"\n        print(error_msg)\n        return error_msg\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    \"\"\"TODO\"\"\"\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    \"\"\"TODO\"\"\"\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef transcribe_audio(file_url, episode_name, speakers_count):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    file_url = re.sub(\n        \"https?:\\\\/\\\\/(www\\\\.)?dropbox\\\\.com\",\n        \"https://dl.dropboxusercontent.com\",\n        file_url,\n    )\n    print(f\"Running smol-podcaster on {file_url}\")\n    output = replicate.run(\n        \"thomasmol/whisper-diarization:7e5dafea13d80265ea436e51a310ae5103b9f16e2039f54de4eede3060a61617\",\n        input={\n            \"file_url\": file_url,\n            \"num_speakers\": speakers_count,\n            \"prompt\": \"Audio of Latent Space, a technical podcast about artificial intelligence and machine learning hosted by Swyx and Alessio.\",\n        },\n    )\n    with open(f\"./podcasts-raw-transcripts/{episode_name}.json\", \"w\") as f:\n        json.dump(output, f)\n    return output[\"segments\"]\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef process_transcript(transcript, episode_name):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    transcript_strings = []\n    for entry in transcript:\n        speaker = entry[\"speaker\"]\n        text = entry[\"text\"]\n        seconds = int(float(entry[\"start\"]))\n        minutes, seconds = divmod(seconds, 60)\n        hours, minutes = divmod(minutes, 60)\n        timestamp = \"[{:02d}:{:02d}:{:02d}]\".format(hours, minutes, seconds)\n        transcript_strings.append(f\"**{speaker}** {timestamp}: {text}\")\n    clean_transcript = \"\\n\\n\".join(transcript_strings)\n    with open(f\"./podcasts-clean-transcripts/{episode_name}.md\", \"w\") as f:\n        f.write(clean_transcript)\n    return clean_transcript\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef create_chapters(transcript):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_chapters(transcript):\n    prompt = f\"\"\"I'm going to give you a podcast transcript with timestamps for each speaker section in this format: `SPEAKER: Some transcription [00:00:00]`. Generate a list of all major topics covered in the podcast, and the timestamp where the discussion starts. Make sure to use the timestamp BEFORE the the discussion starts. Make sure to cover topics from the whole episode. Use this format: `- [00:00:00] Topic name`. Here's the transcript: \n    \n     {transcript}\"\"\"\n    claude_suggestions = call_anthropic(prompt, 0.6)\n    gpt_suggestions = call_openai(prompt, 0.6)\n    return \"\\n\".join([claude_suggestions, gpt_suggestions])\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef create_show_notes(transcript):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_show_notes(transcript):\n    prompt = f\"\"\"I'll give you a podcast transcript; help me create a list of every company, person, project, or any other named entitiy that you find in it. Here's the transcript: \n    \n     {transcript}\"\"\"\n    claude_suggestions = call_anthropic(prompt, 0.4)\n    gpt_suggestions = call_openai(prompt, 0.4)\n    return \"\\n\".join([claude_suggestions, gpt_suggestions])\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef create_writeup(transcript):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_writeup(transcript):\n    prompt = (\n        f\"\"\"You're the writing assistant of a podcast producer. For each episode, we do a write up to recap the core ideas of the episode and expand on them. Write a list of bullet points on topics we should expand on, and then 4-5 paragraphs about them. Here's the transcript: \n    \n     {transcript}\"\"\",\n    )\n    claude_suggestions = call_anthropic(prompt, 0.7)\n    gpt_suggestions = call_openai(prompt, 0.7)\n    return \"\\n\".join([claude_suggestions, gpt_suggestions])\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    \"\"\"TODO\"\"\"\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    \"\"\"TODO\"\"\"\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef title_suggestions(writeup):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef title_suggestions(writeup):\n    prompt = f\"\"\"\n        These are some titles of previous podcast episodes we've published:\n    \n        1. \"From RLHF to RLHB: The Case for Learning from Human Behavior\"\n        2. \"Commoditizing the Petaflop\"\n        3. \"Llama 2: The New Open LLM SOTA\"\n        4. \"FlashAttention 2: making Transformers 800\\\\%\\\\ faster w/o approximation\"\n        5. \"Mapping the future of *truly* Open Models and Training Dolly for $30\"\n        6. \"Beating GPT-4 with Open Source LLMs\"\n        7. \"Why AI Agents Don't Work (yet)\"\n        8. \"The End of Finetuning\"\n    \n        Here's a write up of the latest podcast episode; suggest 8 title options for it that will be just as successful in catching the readers' attention:\n        \n        {writeup}\n        \"\"\"\n    gpt_suggestions = call_openai(prompt, 0.7)\n    claude_suggestions = call_anthropic(prompt)\n    suggestions = f\"\"\"\n    \n    GPT-4 title suggestions:\n    \n    {gpt_suggestions}\n    \n    Claude's title suggestions:\n    {claude_suggestions}\n    \n    \"\"\"\n    return suggestions\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    \"\"\"TODO\"\"\"\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef tweet_suggestions(transcript):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef tweet_suggestions(transcript):\n    prompt = f\"\"\"\n        Here's a transcript of our latest podcast episode; suggest 8 tweets to share it on social medias.\n        It should include a few bullet points of the most interesting topics. Our audience is technical.\n        Use a writing style between Hemingway's and Flash Fiction. \n        \n        {transcript}\n        \"\"\"\n    gpt_suggestions = call_openai(prompt, 0.7)\n    claude_suggestions = call_anthropic(prompt, 0.7)\n    suggestions = f\"\"\"GPT-4 tweet suggestions:\n    {gpt_suggestions}\n    \n    Claude's tweet suggestions:\n    {claude_suggestions}\n    \"\"\"\n    return suggestions\n```"
    },
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `smol-podcaster.py`.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef main():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Transcribe the podcast audio from an URL like tmpfiles.\"\n    )\n    parser.add_argument(\"url\", help=\"The URL of the podcast to be processed.\")\n    parser.add_argument(\n        \"name\", help=\"The name of the output transcript file without extension.\"\n    )\n    parser.add_argument(\n        \"speakers\", help=\"The number of speakers on the track.\", default=3\n    )\n    args = parser.parse_args()\n    url = args.url\n    name = args.name\n    speakers_count = int(args.speakers)\n    raw_transcript_path = f\"./podcasts-raw-transcripts/{name}.json\"\n    clean_transcript_path = f\"./podcasts-clean-transcripts/{name}.md\"\n    results_file_path = f\"./podcasts-results/{name}.md\"\n    substack_file_path = f\"./podcasts-results/substack_{name}.md\"\n    if not os.path.exists(raw_transcript_path):\n        transcript = transcribe_audio(url, name, speakers_count)\n    else:\n        file = open(raw_transcript_path, \"r\").read()\n        transcript = json.loads(file)[\"segments\"]\n    print(\"Raw transcript is ready\")\n    if not os.path.exists(clean_transcript_path):\n        transcript = process_transcript(transcript, name)\n    else:\n        transcript = open(clean_transcript_path, \"r\").read()\n    print(\"Clean transcript is ready\")\n    chapters = create_chapters(transcript)\n    print(chapters)\n    print(\"Chapters are ready\")\n    show_notes = create_show_notes(transcript)\n    print(\"Show notes are ready\")\n    writeup = create_writeup(transcript)\n    print(\"Writeup is ready\")\n    title_suggestions_str = title_suggestions(writeup)\n    print(\"Titles are ready\")\n    tweet_suggestions_str = tweet_suggestions(transcript)\n    print(\"Tweets are ready\")\n    with open(results_file_path, \"w\") as f:\n        f.write(\"Chapters:\\n\")\n        f.write(chapters)\n        f.write(\"\\n\\n\")\n        f.write(\"Writeup:\\n\")\n        f.write(writeup)\n        f.write(\"\\n\\n\")\n        f.write(\"Show Notes:\\n\")\n        f.write(show_notes)\n        f.write(\"\\n\\n\")\n        f.write(\"Title Suggestions:\\n\")\n        f.write(title_suggestions_str)\n        f.write(\"\\n\\n\")\n        f.write(\"Tweet Suggestions:\\n\")\n        f.write(tweet_suggestions_str)\n        f.write(\"\\n\")\n    with open(substack_file_path, \"w\") as f:\n        f.write(\"### Show Notes\\n\")\n        f.write(show_notes)\n        f.write(\"\\n\\n\")\n        f.write(\"### Timestamps\\n\")\n        f.write(chapters)\n        f.write(\"\\n\\n\")\n        f.write(\"### Transcript\\n\")\n        f.write(transcript)\n    print(f\"Results written to {results_file_path}\")\n```"
    }
]