[
    {
        "readme": "# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py",
        "file_path": "smol-podcaster.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# smol-podcaster\n\nWe use smol-podcaster to take care of most of [Latent Space](https://latent.space) transcription work. What it will do for you:\n\n- Generate a clean, diarized transcript of the podcast with speaker labels and timestamps\n- Generate a list of chapters with timestamps for the episode\n- Give you title ideas based on previous ones (modify the prompt to give examples of your own, it comes with Latent Space ones)\n- Give you ideas for tweets to announce the podcast\n\nTo run:\n\n`python smol-podcaster.py AUDIO_FILE_URL GUEST_NAME NUMBER_OF_SPEAKERS`\n\nThe URL needs to be a direct download link, it can't be a GDrive. For files <100MB you can use tmpfiles.org, otherwise Dropbox. For example: \n\n`python smol-podcaster.py \"https://dl.dropboxusercontent.com/XXXX\" \"Tianqi\" 3`  \n\nThe script will automatically switch https://www.dropbox.com to https://dl.dropboxusercontent.com in the link.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 smol-podcaster.py\n```\n\n---\nFile Path\n---\nsmol-podcaster.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport argparse\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport openai\nimport replicate\nimport requests\nfrom anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\nanthropic = Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\n\ndef call_anthropic(prompt, temperature=0.5):\n    pass\n\n\ndef call_openai(prompt, temperature=0.5):\n    pass\n\n\ndef transcribe_audio(file_url, episode_name, speakers_count):\n    pass\n\n\ndef process_transcript(transcript, episode_name):\n    \"\"\"\n    {\n        \"end\": \"3251\",\n        \"text\": \" This was great.  Yeah, this has been really fun.\",\n        \"start\": \"3249\",\n        \"speaker\": \"SPEAKER 1\"\n    }\n\n    The transcript argument of this function is an array of these.\n    \"\"\"\n    pass\n\n\ndef create_chapters(transcript):\n    pass\n\n\ndef create_show_notes(transcript):\n    pass\n\n\ndef create_writeup(transcript):\n    pass\n\n\ndef title_suggestions(writeup):\n    pass\n\n\ndef tweet_suggestions(transcript):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]