[
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "setup.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsetup.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\n    Setup file for kanban-python.\n    Use setup.cfg to configure your project.\n\n    This file was generated with PyScaffold 4.5.\n    PyScaffold helps you to put up the scaffold of your new Python project.\n    Learn more under: https://pyscaffold.org/\n\"\"\"\nfrom setuptools import setup\n\nif __name__ == \"__main__\":\n    try:\n        setup(use_scm_version={\"version_scheme\": \"no-guess-dev\"})\n    except:\n        print(\n            \"\"\"\n\nAn error occurred while building the project, please ensure you have the most updated version of setuptools, setuptools_scm and wheel with:\n   pip install -U setuptools setuptools_scm wheel\n\n\"\"\"\n        )\n        raise\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "docs/conf.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\ndocs/conf.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport os\nimport shutil\nimport sys\n\n__location__ = os.path.dirname(__file__)\nsys.path.insert(0, os.path.join(__location__, \"../src\"))\ntry:\n    from sphinx.ext import apidoc\nexcept ImportError:\n    from sphinx import apidoc\noutput_dir = os.path.join(__location__, \"api\")\nmodule_dir = os.path.join(__location__, \"../src/kanban_python\")\ntry:\n    shutil.rmtree(output_dir)\nexcept FileNotFoundError:\n    pass\ntry:\n    import sphinx\n\n    cmd_line = f\"sphinx-apidoc --implicit-namespaces -f -o {output_dir} {module_dir}\"\n    args = cmd_line.split(\" \")\n    if tuple(sphinx.__version__.split(\".\")) >= (\"1\", \"7\"):\n        args = args[1:]\n    apidoc.main(args)\nexcept Exception as e:\n    print(\"Running `sphinx-apidoc` failed!\\n{}\".format(e))\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.coverage\",\n    \"sphinx.ext.doctest\",\n    \"sphinx.ext.ifconfig\",\n    \"sphinx.ext.mathjax\",\n    \"sphinx.ext.napoleon\",\n]\ntemplates_path = [\"_templates\"]\nextensions.append(\"myst_parser\")\nmyst_enable_extensions = [\n    \"amsmath\",\n    \"colon_fence\",\n    \"deflist\",\n    \"dollarmath\",\n    \"html_image\",\n    \"linkify\",\n    \"replacements\",\n    \"smartquotes\",\n    \"substitution\",\n    \"tasklist\",\n]\nsource_suffix = [\".rst\", \".md\"]\nmaster_doc = \"index\"\nproject = \"kanban-python\"\ncopyright = \"2023, Zaloog\"\ntry:\n    from kanban_python import __version__ as version\nexcept ImportError:\n    version = \"\"\nif not version or version.lower() == \"unknown\":\n    version = os.getenv(\"READTHEDOCS_VERSION\", \"unknown\")\nrelease = version\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\", \".venv\"]\npygments_style = \"sphinx\"\ntodo_emit_warnings = True\nhtml_theme = \"alabaster\"\nhtml_theme_options = {\"sidebar_width\": \"300px\", \"page_width\": \"1200px\"}\nhtml_static_path = [\"_static\"]\nhtmlhelp_basename = \"kanban-python-doc\"\nlatex_elements = {}\nlatex_documents = [\n    (\"index\", \"user_guide.tex\", \"kanban-python Documentation\", \"Zaloog\", \"manual\")\n]\npython_version = \".\".join(map(str, sys.version_info[0:2]))\nintersphinx_mapping = {\n    \"sphinx\": (\"https://www.sphinx-doc.org/en/master\", None),\n    \"python\": (\"https://docs.python.org/\" + python_version, None),\n    \"matplotlib\": (\"https://matplotlib.org\", None),\n    \"numpy\": (\"https://numpy.org/doc/stable\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable\", None),\n    \"pandas\": (\"https://pandas.pydata.org/pandas-docs/stable\", None),\n    \"scipy\": (\"https://docs.scipy.org/doc/scipy/reference\", None),\n    \"setuptools\": (\"https://setuptools.pypa.io/en/stable/\", None),\n    \"pyscaffold\": (\"https://pyscaffold.org/en/stable\", None),\n}\nprint(f\"loading configurations for {project} {version} ...\", file=sys.stderr)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/app.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/cli_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/cli_parser.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/config.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/constants.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/constants.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/controls.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/interface.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/kanban_python/utils.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```"
    }
]