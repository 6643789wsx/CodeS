[
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/kanban_python/__init__.py",
            "src/kanban_python/app.py",
            "src/kanban_python/cli_parser.py",
            "src/kanban_python/config.py",
            "src/kanban_python/constants.py",
            "src/kanban_python/controls.py",
            "src/kanban_python/interface.py",
            "src/kanban_python/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```",
        "current_file_path": "src/kanban_python/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nFunction Complement\n---\ndef fib(n):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    assert n > 0\n    a, b = 1, 1\n    for _i in range(n - 1):\n        a, b = b, a + b\n    return a\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/kanban_python/__init__.py",
            "src/kanban_python/app.py",
            "src/kanban_python/cli_parser.py",
            "src/kanban_python/config.py",
            "src/kanban_python/constants.py",
            "src/kanban_python/controls.py",
            "src/kanban_python/interface.py",
            "src/kanban_python/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```",
        "current_file_path": "src/kanban_python/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nFunction Complement\n---\ndef main(args):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    args = cli_parser.parse_args(args)\n    cli_parser.setup_logging(args.loglevel)\n    if not config.check_config_exists():\n        config.create_init_config()\n        return\n    if args.command == \"init\":\n        utils.console.print(\"Starting new [blue]Kanban Board[/]:mechanical_arm:\")\n        controls.create_new_db()\n    if args.command == \"configure\":\n        controls.change_settings()\n    if args.command == \"scan\":\n        controls.add_todos_to_board()\n    if args.command == \"report\":\n        controls.create_report()\n        return\n    while True:\n        controls.show()\n        user_input = controls.get_user_action()\n        if user_input == 1:\n            controls.add_new_task_to_db()\n        elif user_input == 2:\n            controls.update_task_from_db()\n        elif user_input == 3:\n            controls.change_kanban_board()\n        elif user_input == 4:\n            controls.show_tasks()\n        elif user_input == 5:\n            controls.delete_kanban_board()\n        elif user_input == 6:\n            controls.change_settings()\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/kanban_python/__init__.py",
            "src/kanban_python/app.py",
            "src/kanban_python/cli_parser.py",
            "src/kanban_python/config.py",
            "src/kanban_python/constants.py",
            "src/kanban_python/controls.py",
            "src/kanban_python/interface.py",
            "src/kanban_python/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    run()\n```",
        "current_file_path": "src/kanban_python/app.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nFunction Complement\n---\ndef run():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    try:\n        main(sys.argv[1:])\n    except (KeyboardInterrupt, EOFError):\n        utils.console.print(utils.get_motivational_quote())\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/kanban_python/__init__.py",
            "src/kanban_python/app.py",
            "src/kanban_python/cli_parser.py",
            "src/kanban_python/config.py",
            "src/kanban_python/constants.py",
            "src/kanban_python/controls.py",
            "src/kanban_python/interface.py",
            "src/kanban_python/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```",
        "current_file_path": "src/kanban_python/cli_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nFunction Complement\n---\ndef setup_logging(loglevel):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    logformat = \"[%(asctime)s] %(levelname)s:%(name)s:%(message)s\"\n    logging.basicConfig(\n        level=loglevel, stream=sys.stdout, format=logformat, datefmt=\"%Y-%m-%d %H:%M:%S\"\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/kanban_python/__init__.py",
            "src/kanban_python/app.py",
            "src/kanban_python/cli_parser.py",
            "src/kanban_python/config.py",
            "src/kanban_python/constants.py",
            "src/kanban_python/controls.py",
            "src/kanban_python/interface.py",
            "src/kanban_python/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/kanban_python/cli_parser.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/__init__.py`.\n\n```python\nimport sys\n\nif sys.version_info[:2] >= (3, 8):\n    from importlib.metadata import PackageNotFoundError, version\nelse:\n    from importlib_metadata import PackageNotFoundError, version\ntry:\n    dist_name = \"kanban-python\"\n    __version__ = version(dist_name)\nexcept PackageNotFoundError:\n    __version__ = \"unknown\"\nfinally:\n    del version, PackageNotFoundError\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/kanban_python/app.py`.\n\n```python\n\"\"\"\nThis is a skeleton file that can serve as a starting point for a Python\nconsole script. To run this script uncomment the following lines in the\n``[options.entry_points]`` section in ``setup.cfg``::\n\n    console_scripts =\n         fibonacci = kanban_python.skeleton:run\n\nThen run ``pip install .`` (or ``pip install -e .`` for editable mode)\nwhich will install the command ``fibonacci`` inside your current environment.\n\nBesides console scripts, the header (i.e. until ``_logger``...) of this file can\nalso be used as template for Python modules.\n\nNote:\n    This file can be renamed depending on your needs or safely removed if not needed.\n\nReferences:\n    - https://setuptools.pypa.io/en/latest/userguide/entry_point.html\n    - https://pip.pypa.io/en/stable/reference/pip_install\n\"\"\"\nimport sys\nfrom kanban_python import cli_parser, config, controls, utils\n\n__author__ = \"Zaloog\"\n__copyright__ = \"Zaloog\"\n__license__ = \"MIT\"\n\n\ndef fib(n):\n    \"\"\"Fibonacci example function\n\n    Args:\n      n (int): integer\n\n    Returns:\n      int: n-th Fibonacci number\n    \"\"\"\n    pass\n\n\ndef main(args):\n    \"\"\"Wrapper allowing :func:`fib` to be called with string arguments in a CLI fashion\n\n    Instead of returning the value from :func:`fib`, it prints the result to the\n    ``stdout`` in a nicely formatted message.\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--verbose\", \"42\"]``).\n    \"\"\"\n    pass\n\n\ndef run():\n    \"\"\"Calls :func:`main` passing the CLI arguments extracted from :obj:`sys.argv`\n\n    This function can be used as entry point to create console scripts with setuptools.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    run()\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    pass\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `src/kanban_python/constants.py`.\n\n```python\nfrom pathlib import Path\nfrom kanban_python import __version__\nfrom platformdirs import user_config_dir, user_data_dir\n\nTASK_FILE_NAME = \"pykanban.json\"\nCONFIG_FILE_NAME = \"pykanban.ini\"\nREPORT_FILE_NAME = \"pykanban.md\"\nKANBAN_BOARDS_FOLDER_NAME = \"kanban_boards\"\nREPORTS_FOLDER_NAME = \"kanban_report\"\nCONFIG_PATH = Path(\n    user_config_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nDATA_PATH = Path(\n    user_data_dir(appname=\"kanban-python\", appauthor=False, ensure_exists=True)\n)\nKANBAN_BOARDS_PATH = DATA_PATH / KANBAN_BOARDS_FOLDER_NAME\nCONFIG_FILE_PATH = CONFIG_PATH / CONFIG_FILE_NAME\nREPORT_FILE_PATH = DATA_PATH / REPORTS_FOLDER_NAME\nQUOTES = [\n    \"\"\"\n:wave:Stay Hard:wave:\"\"\",\n    \"\"\"\n:wave:See you later:wave:\"\"\",\n    \"\"\"\n:wave:Lets get started:wave:\"\"\",\n    \"\"\"\n:wave:Lets work on those tasks:wave:\"\"\",\n]\nBOARD_CAPTION_STRING = \"Tasks have the following Structure:     [[cyan]ID[/]] ([orange3]TAG[/]) [white]Task Title[/] |[red]Days Left[/]|\"\nCOLOR_DICT = {\n    \"Ready\": \"[red]Ready[/]\",\n    \"Doing\": \"[yellow]Doing[/]\",\n    \"Done\": \"[green]Done[/]\",\n    \"Deleted\": \"[deep_pink4]Deleted[/]\",\n    \"Archived\": \"[dark_goldenrod]Archived[/]\",\n}\nDUMMY_TASK = {\n    \"Title\": \"Welcome Task\",\n    \"Description\": \"Welcome to kanban-python, I hope this helps your productivity\",\n    \"Tag\": \"HI\",\n    \"Status\": \"Ready\",\n    \"Begin_Time\": \"\",\n    \"Complete_Time\": \"\",\n    \"Duration\": 0,\n    \"Creation_Date\": \"\",\n    \"Due_Date\": \"\",\n}\nDUMMY_DB = {(1): DUMMY_TASK}\nFOOTER_LINK = \"[link=https://github.com/Zaloog/kanban-python][blue]kanban-python[/]\"\nFOOTER_AUTHOR = \"[/link][grey35] (by Zaloog)[/]\"\nFOOTER_FIRST = FOOTER_LINK + FOOTER_AUTHOR\nFOOTER_LAST = f\"version [blue]{__version__}[/]\"\nFOOTER = [FOOTER_FIRST, FOOTER_LAST]\nREPORT_COLORS = [\"#161b22\", \"#0e4429\", \"#006d32\", \"#26a641\", \"#39d353\"]\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nRelevant File Sketch/8\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nCurrent File Sketch/9\n---\nHere is the file sketch of `src/kanban_python/cli_parser.py`.\n\n```python\nimport argparse\nimport logging\nimport sys\nfrom kanban_python import __version__\n\n\ndef setup_logging(loglevel):\n    \"\"\"Setup basic logging\n\n    Args:\n      loglevel (int): minimum loglevel for emitting messages\n    \"\"\"\n    pass\n\n\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef parse_args(args):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef parse_args(args):\n    \"\"\"Parse command line parameters\n\n    Args:\n      args (List[str]): command line parameters as list of strings\n          (for example  ``[\"--help\"]``).\n\n    Returns:\n      :obj:`argparse.Namespace`: command line parameters namespace\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"Usage Options\")\n    parser.add_argument(\n        \"--version\", action=\"version\", version=f\"kanban-python {__version__}\"\n    )\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        dest=\"loglevel\",\n        help=\"set loglevel to INFO\",\n        action=\"store_const\",\n        const=logging.INFO,\n    )\n    parser.add_argument(\n        \"-vv\",\n        \"--very-verbose\",\n        dest=\"loglevel\",\n        help=\"set loglevel to DEBUG\",\n        action=\"store_const\",\n        const=logging.DEBUG,\n    )\n    parser.add_argument(\n        nargs=\"?\",\n        choices=[\"init\", \"configure\", \"scan\", \"report\"],\n        dest=\"command\",\n        help=\"\"\"\n            initialize new board, configure settings, scan for TODOs in files, create Report\n                    \"\"\",\n    )\n    return parser.parse_args(args)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        \"\"\"TODO\"\"\"\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        \"\"\"TODO\"\"\"\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef __init__(self, path=CONFIG_FILE_PATH) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __init__(self, path=CONFIG_FILE_PATH) -> None:\n    self.configpath = path\n    self._config = configparser.ConfigParser(default_section=None)\n    self._config.optionxform = str\n    self._config.read(path)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        \"\"\"TODO\"\"\"\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        \"\"\"TODO\"\"\"\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef __repr__(self) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __repr__(self) -> str:\n    output = \"\"\n    for sec in self.config:\n        if sec:\n            output += 15 * \"-\"\n            output += f\"Section: {sec}\"\n            output += 15 * \"-\" + \"\\n\"\n        for key, val in self.config[sec].items():\n            output += f\"{key}: {val}\\n\"\n    return output\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        \"\"\"TODO\"\"\"\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef save(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef save(self):\n    with open(self.configpath, \"w\") as configfile:\n        self.config.write(configfile)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef config(self) -> configparser.ConfigParser:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef config(self) -> configparser.ConfigParser:\n    return self._config\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef kanban_boards(self) -> list:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef kanban_boards(self) -> list:\n    return [board for board in self.config[\"kanban_boards\"]]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef active_board_path(self) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef active_board_path(self) -> str:\n    return self.config[\"kanban_boards\"][self.active_board]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        \"\"\"TODO\"\"\"\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef vis_cols(self) -> list:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef vis_cols(self) -> list:\n    return [c for c, v in self.kanban_columns_dict.items() if v == \"True\"]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    \"\"\"TODO\"\"\"\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    \"\"\"TODO\"\"\"\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    config = configparser.ConfigParser(default_section=None)\n    config.optionxform = str\n    config[\"settings.general\"] = {\n        \"Active_Board\": \"\",\n        \"Column_Min_Width\": 35,\n        \"Done_Limit\": 10,\n        \"Show_Footer\": \"True\",\n    }\n    config[\"settings.columns.visible\"] = {\n        \"Ready\": True,\n        \"Doing\": True,\n        \"Done\": True,\n        \"Deleted\": False,\n        \"Archived\": False,\n    }\n    config[\"settings.scanner\"] = {\"Files\": \".py .md\", \"Patterns\": \"# TODO,#TODO,# BUG\"}\n    config[\"kanban_boards\"] = {}\n    if not (data_path / KANBAN_BOARDS_FOLDER_NAME).exists():\n        data_path.mkdir(exist_ok=True)\n        (data_path / KANBAN_BOARDS_FOLDER_NAME).mkdir(exist_ok=True)\n    with open(conf_path / CONFIG_FILE_NAME, \"w\") as configfile:\n        config.write(configfile)\n    console.print(\n        f\"Welcome, I Created a new [orange3]{CONFIG_FILE_NAME}[/] file \"\n        + f\"located in [orange3]{conf_path}[/]\"\n    )\n    console.print(\"Now use 'kanban init' to create kanban boards\")\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n    for b_name, b_path in cfg.kanban_boards_dict.items():\n        if b_path == curr_path:\n            cfg.config[\"kanban_boards\"].pop(b_name)\n    cfg.save()\n    \n\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    return boardname in cfg.kanban_boards\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    return check_if_board_name_exists_in_config(cfg=cfg, boardname=cfg.active_board)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    cfg.config[\"kanban_boards\"].pop(board_name)\n    cfg.save()\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef get_json_path(boardname: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef get_json_path(boardname: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    return path.exists()\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/kanban_python/config.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/config.py`.\n\n```python\nimport configparser\nfrom pathlib import Path\nfrom .constants import (\n    CONFIG_FILE_NAME,\n    CONFIG_FILE_PATH,\n    CONFIG_PATH,\n    DATA_PATH,\n    KANBAN_BOARDS_FOLDER_NAME,\n    KANBAN_BOARDS_PATH,\n    TASK_FILE_NAME,\n)\nfrom .utils import console\n\n\nclass KanbanConfig:\n    def __init__(self, path=CONFIG_FILE_PATH) -> None:\n        pass\n\n    def __repr__(self) -> str:\n        pass\n\n    def save(self):\n        pass\n\n    @property\n    def config(self) -> configparser.ConfigParser:\n        pass\n\n    @property\n    def active_board(self) -> str:\n        pass\n\n    @active_board.setter\n    def active_board(self, new_board):\n        pass\n\n    @property\n    def kanban_boards(self) -> list:\n        pass\n\n    @property\n    def kanban_boards_dict(self) -> dict:\n        pass\n\n    @kanban_boards_dict.setter\n    def kanban_boards_dict(self, board_name: str) -> dict:\n        pass\n\n    @property\n    def active_board_path(self) -> str:\n        pass\n\n    @property\n    def show_footer(self):\n        pass\n\n    @show_footer.setter\n    def show_footer(self, visible):\n        pass\n\n    @property\n    def col_min_width(self) -> int:\n        pass\n\n    @col_min_width.setter\n    def col_min_width(self, new_width: int) -> None:\n        pass\n\n    @property\n    def kanban_columns_dict(self) -> dict:\n        pass\n\n    @kanban_columns_dict.setter\n    def kanban_columns_dict(self, updated_dict) -> dict:\n        pass\n\n    @property\n    def vis_cols(self) -> list:\n        pass\n\n    @property\n    def done_limit(self) -> int:\n        pass\n\n    @done_limit.setter\n    def done_limit(self, new_limit: int) -> None:\n        pass\n\n    @property\n    def scanned_files(self) -> list:\n        pass\n\n    @scanned_files.setter\n    def scanned_files(self, new_files_to_scan: str) -> None:\n        pass\n\n    @property\n    def scanned_patterns(self) -> list:\n        pass\n\n    @scanned_patterns.setter\n    def scanned_patterns(self, new_patterns_to_scan: str) -> None:\n        pass\n\n\ncfg = KanbanConfig(path=CONFIG_FILE_PATH)\n\n\ndef create_init_config(conf_path=CONFIG_PATH, data_path=DATA_PATH):\n    pass\n\n\ndef delete_current_folder_board_from_config(\n    cfg=cfg, curr_path: str = str(Path.cwd())\n) -> None:\n    pass\n\n\ndef check_if_board_name_exists_in_config(boardname: str, cfg=cfg) -> bool:\n    pass\n\n\ndef check_if_current_active_board_in_board_list(cfg=cfg) -> bool:\n    pass\n\n\ndef delete_board_from_config(board_name, cfg=cfg) -> None:\n    pass\n\n\ndef check_config_exists(path=CONFIG_FILE_PATH) -> bool:\n    pass\n\n\ndef get_json_path(boardname: str):\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef get_json_path(boardname: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_json_path(boardname: str):\n    return str(KANBAN_BOARDS_PATH / boardname / TASK_FILE_NAME)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_new_db() -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_new_db() -> None:\n    while True:\n        while True:\n            new_board_name = input_ask_for_new_board_name()\n            if check_board_name_valid(new_board_name):\n                break\n            console.print(f\":warning:  '{new_board_name}' is [red]not[/] a valid Name.\")\n        if not check_if_board_name_exists_in_config(new_board_name):\n            break\n        console.print(\n            f\":warning:  Board '{new_board_name}' already exists, choose another Name.\"\n        )\n    cfg.kanban_boards_dict = new_board_name\n    new_db_path = KANBAN_BOARDS_PATH / new_board_name\n    if not new_db_path.exists():\n        new_db_path.mkdir()\n    with open(get_json_path(new_board_name), \"w\", encoding=\"utf-8\") as f:\n        dump(DUMMY_DB, f, ensure_ascii=False, indent=4)\n    console.print(\n        f\"Created new [orange3]{TASK_FILE_NAME}[/] file at \"\n        + f\"[orange3]{KANBAN_BOARDS_PATH / new_board_name}[/] to save tasks.\"\n    )\n    if input_confirm_set_board_active(name=new_board_name):\n        cfg.active_board = new_board_name\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    \"\"\"TODO\"\"\"\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    \"\"\"TODO\"\"\"\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef save_db(data):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef save_db(data):\n    path = cfg.active_board_path\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        dump(data, f, ensure_ascii=False, indent=4)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef add_tasks_to_db(tasks: dict | list[dict]) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef add_tasks_to_db(tasks: dict | list[dict]) -> None:\n    db_data = read_db()\n    if isinstance(tasks, dict):\n        new_id = str(max(int(i) for i in db_data.keys()) + 1)\n        db_data[new_id] = tasks\n    else:\n        for task in tasks:\n            new_id = str(max(int(i) for i in db_data.keys()) + 1)\n            db_data[new_id] = task\n    save_db(data=db_data)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef read_db(path: str = None) -> dict:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef read_db(path: str = None) -> dict:\n    if not path:\n        path = cfg.active_board_path\n    if path == \"all\":\n        board_dict = {\n            b: read_single_board(b_path) for b, b_path in cfg.kanban_boards_dict.items()\n        }\n        return board_dict\n    try:\n        data = read_single_board(path)\n        return data\n    except FileNotFoundError:\n        print(path)\n        console.print(f\":warning: No [orange3]{TASK_FILE_NAME}[/] file here anymore.\")\n        console.print(\"Please change to another board.\")\n        change_kanban_board()\n    console.print(f\"[red]Seems like the previous {TASK_FILE_NAME} file was deleted[/]\")\n    console.print(f\"Create new [orange3]{TASK_FILE_NAME}[/] file here.\")\n    create_new_db()\n    return read_db()\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    \"\"\"TODO\"\"\"\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    \"\"\"TODO\"\"\"\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef read_single_board(path):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef read_single_board(path):\n    with open(path, \"r\") as file:\n        data = load(file)\n    return data\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    \"\"\"TODO\"\"\"\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    \"\"\"TODO\"\"\"\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef get_user_action():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_user_action():\n    return input_ask_for_action()\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    \"\"\"TODO\"\"\"\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    \"\"\"TODO\"\"\"\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef add_new_task_to_db():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef add_new_task_to_db():\n    new_task = input_create_new_task()\n    add_tasks_to_db(tasks=new_task)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    \"\"\"TODO\"\"\"\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    \"\"\"TODO\"\"\"\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef update_task_from_db():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef update_task_from_db():\n    db_data = read_db()\n    if not check_if_there_are_visible_tasks_in_board(db_data, cfg.vis_cols):\n        console.print(\":cross_mark:[red]No Tasks available on this Kanban board[/]\")\n        return\n    selected_id = input_ask_which_task_to_update(db_data)\n    updated_task = input_update_task(current_task=db_data[selected_id])\n    db_data[selected_id] = updated_task\n    while not check_if_done_col_leq_X(cfg=cfg, data=db_data):\n        first_task_id, archive_task = move_first_done_task_to_archive(data=db_data)\n        db_data[first_task_id] = archive_task\n    save_db(data=db_data)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    \"\"\"TODO\"\"\"\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    \"\"\"TODO\"\"\"\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef change_kanban_board():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef change_kanban_board():\n    boards_dict = read_db(path=\"all\")\n    new_active_board = input_ask_for_change_board(boards_dict)\n    cfg.active_board = new_active_board\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    \"\"\"TODO\"\"\"\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    \"\"\"TODO\"\"\"\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef show_tasks():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef show_tasks():\n    db_data = read_db()\n    choices = get_tag_id_choices(db_data, cfg.vis_cols)\n    selection_criteria = input_ask_which_tasks_to_show(choices)\n    for i, task in db_data.items():\n        if selection_criteria in [i, task[\"Tag\"]]:\n            console.print(\n                20 * \"[bold blue]#[/]\" + f\" Task {i} \" + 20 * \"[bold blue]#[/]\"\n            )\n            pprint(\n                {\n                    key: val\n                    for key, val in task.items()\n                    if key in [\"Title\", \"Description\", \"Tag\", \"Status\", \"Due_Date\"]\n                },\n                console=console,\n                expand_all=True,\n            )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    \"\"\"TODO\"\"\"\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    \"\"\"TODO\"\"\"\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef delete_kanban_board():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef delete_kanban_board():\n    board_to_delete = input_ask_for_delete_board()\n    if input_confirm_delete_board(board_to_delete):\n        board_to_delete_path = cfg.kanban_boards_dict[board_to_delete]\n        delete_json_file(board_to_delete_path)\n        delete_board_from_config(board_to_delete)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    \"\"\"TODO\"\"\"\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    \"\"\"TODO\"\"\"\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef show_tasks():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef show_tasks():\n    if not cfg.kanban_boards:\n        console.print(\":warning:  [red]No Boards created yet[/]:warning:\")\n        console.print(\"Use 'kanban init' to create a new kanban board.\")\n        raise KeyboardInterrupt\n    if not check_if_current_active_board_in_board_list():\n        console.print(\n            \"[yellow]Hmm, Something went wrong.[/] \"\n            + f\"The active board '{cfg.active_board}' is not in the list of boards.\"\n        )\n        change_kanban_board()\n        show()\n        return\n    db_data = read_db()\n    table = create_table(data=db_data)\n    console.print(table)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    \"\"\"TODO\"\"\"\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    \"\"\"TODO\"\"\"\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef add_todos_to_board():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef add_todos_to_board():\n    files = scan_files(endings=cfg.scanned_files)\n    todos = scan_for_todos(file_paths=files, patterns=cfg.scanned_patterns)\n    if not todos:\n        console.print(\n            \":cross_mark: [red]Nothing found that \"\n            + \"matches any of your provided patterns.[/]\"\n        )\n        return\n    if input_confirm_add_todos_to_board(todos=todos):\n        todo_task_list = []\n        for task, file in todos:\n            tag, title = split_todo_in_tag_and_title(task, cfg.scanned_patterns)\n            new_task = {\n                \"Title\": title,\n                \"Description\": f\"from {file}\",\n                \"Status\": \"Ready\",\n                \"Tag\": tag,\n                \"Creation_Date\": current_time_to_str(),\n                \"Begin_Time\": \"\",\n                \"Complete_Time\": \"\",\n                \"Duration\": 0,\n            }\n            todo_task_list.append(new_task)\n        add_tasks_to_db(tasks=todo_task_list)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef change_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef change_settings():\n    while True:\n        show_settings()\n        settings_selection = input_ask_for_action_settings()\n        if settings_selection == 1:\n            change_kanban_board()\n            new_min_col_widths = input_change_min_col_width_settings()\n            cfg.col_min_width = new_min_col_widths\n            done_limit = input_change_done_limit_settings()\n            cfg.done_limit = done_limit\n            footer_visible = input_change_footer_settings()\n            cfg.show_footer = \"True\" if footer_visible else \"False\"\n        if settings_selection == 2:\n            updated_col_config = input_change_column_settings()\n            cfg.kanban_columns_dict = updated_col_config\n        if settings_selection == 3:\n            while True:\n                new_files_to_scan = input_change_files_to_scan_settings()\n                if check_scanner_files_valid(new_files_to_scan):\n                    cfg.scanned_files = new_files_to_scan\n                    break\n                console.print(\n                    f\":warning:  '{new_files_to_scan}' is [red]not[/] a valid.\"\n                )\n            while True:\n                new_patterns_to_scan = input_change_patterns_to_scan_settings()\n                if check_scanner_patterns_valid(new_patterns_to_scan):\n                    cfg.scanned_patterns = new_patterns_to_scan\n                    break\n                console.print(\n                    f\":warning:  '{new_patterns_to_scan}' is [red]not[/] a valid.\"\n                )\n        if settings_selection == 4:\n            break\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef create_report():\n    pass\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef create_report():\n    pass\n```\n\n---\nFunction Complement\n---\ndef show_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef show_settings():\n    settings_table = create_config_table()\n    console.print(settings_table)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/kanban_python/controls.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/controls.py`.\n\n```python\nfrom __future__ import annotations\nfrom json import dump, load\nfrom rich.pretty import pprint\nfrom .config import (\n    cfg,\n    check_if_board_name_exists_in_config,\n    check_if_current_active_board_in_board_list,\n    delete_board_from_config,\n    get_json_path,\n)\nfrom .constants import (\n    DUMMY_DB,\n    KANBAN_BOARDS_PATH,\n    REPORT_FILE_NAME,\n    REPORT_FILE_PATH,\n    TASK_FILE_NAME,\n)\nfrom .interface import (\n    create_config_table,\n    create_github_like_report_table,\n    create_table,\n    input_ask_for_action,\n    input_ask_for_action_settings,\n    input_ask_for_change_board,\n    input_ask_for_delete_board,\n    input_ask_for_new_board_name,\n    input_ask_which_task_to_update,\n    input_ask_which_tasks_to_show,\n    input_change_column_settings,\n    input_change_done_limit_settings,\n    input_change_files_to_scan_settings,\n    input_change_footer_settings,\n    input_change_min_col_width_settings,\n    input_change_patterns_to_scan_settings,\n    input_confirm_add_todos_to_board,\n    input_confirm_delete_board,\n    input_confirm_set_board_active,\n    input_create_new_task,\n    input_update_task,\n)\nfrom .utils import (\n    check_board_name_valid,\n    check_if_done_col_leq_X,\n    check_if_there_are_visible_tasks_in_board,\n    check_scanner_files_valid,\n    check_scanner_patterns_valid,\n    console,\n    create_report_document,\n    current_time_to_str,\n    delete_json_file,\n    get_tag_id_choices,\n    move_first_done_task_to_archive,\n    scan_files,\n    scan_for_todos,\n    split_todo_in_tag_and_title,\n)\n\n\ndef create_new_db() -> None:\n    pass\n\n\ndef save_db(data):\n    pass\n\n\ndef add_tasks_to_db(tasks: (dict | list[dict])) -> None:\n    pass\n\n\ndef read_db(path: str = None) -> dict:\n    pass\n\n\ndef read_single_board(path):\n    pass\n\n\ndef get_user_action():\n    pass\n\n\ndef add_new_task_to_db():\n    pass\n\n\ndef update_task_from_db():\n    pass\n\n\ndef change_kanban_board():\n    pass\n\n\ndef show_tasks():\n    pass\n\n\ndef delete_kanban_board():\n    pass\n\n\ndef show():\n    pass\n\n\ndef add_todos_to_board():\n    pass\n\n\ndef change_settings():\n    pass\n\n\ndef show_settings():\n    pass\n\n\ndef create_report():\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef create_report():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_report():\n    boards_dict = read_db(\"all\")\n    gh_table = create_github_like_report_table(boards_dict)\n    console.print(gh_table)\n    if not REPORT_FILE_PATH.exists():\n        REPORT_FILE_PATH.mkdir(exist_ok=True)\n    create_report_document(boards_dict=boards_dict)\n    console.print(\n        \"\"\"\n    [bright_black]You can find your markdown report under:\"\"\"\n        + f\"\"\"\n    [bold green]{REPORT_FILE_PATH / REPORT_FILE_NAME}\"\"\"\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_table(data: dict) -> Table:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_table(data: dict) -> Table:\n    status_dict = create_status_dict_for_rows(data=data, vis_cols=cfg.vis_cols)\n    table_name = cfg.active_board\n    table = Table(\n        title=f\"[blue]Active Board: {table_name}[/]\",\n        highlight=True,\n        show_header=True,\n        show_footer=True if cfg.show_footer == \"True\" else False,\n        caption=BOARD_CAPTION_STRING,\n    )\n    for i, category in enumerate([COLOR_DICT.get(col, col) for col in cfg.vis_cols]):\n        table.add_column(\n            header=category + f\"\\t({len(status_dict[cfg.vis_cols[i]])} Task/s)\",\n            header_style=\"bold\",\n            justify=\"left\",\n            overflow=\"fold\",\n            footer=FOOTER[0]\n            if i == 0\n            else FOOTER[1]\n            if i == len(cfg.vis_cols) - 1\n            else \"\",\n            min_width=cfg.col_min_width,\n        )\n    for row_tasks in zip_longest(*status_dict.values()):\n        table.add_row(*row_tasks)\n    return table\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    \"\"\"TODO\"\"\"\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    \"\"\"TODO\"\"\"\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_for_action():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_for_action():\n    console.print(\n        \"[yellow]Whats up!?[/], how can I help you being productive today :rocket:?\"\n    )\n    console.print(\n        \"\\t[1] :clipboard: [green]Create new Task[/]\"\n        + 2 * \"\\t\"\n        + \"[2] :clockwise_vertical_arrows: [bold cornflower_blue]Update/Check Task[/]\"\n    )\n    console.print(\n        \"\\t[3] :bookmark_tabs: [bold yellow]Change Kanban Board[/]\"\n        + \"\\t\"\n        + \"[4] :magnifying_glass_tilted_left: [bold blue]Show Task Details[/]\"\n    )\n    console.print(\n        \"\\t[5] :cross_mark: [red]Delete Kanban Board[/]\"\n        + \"\\t\"\n        + \"[6] :hammer_and_wrench:  [grey69]Show Current Settings[/]\"\n    )\n    action = IntPrompt.ask(\n        prompt=\"Choose wisely :books:\",\n        choices=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n        show_choices=False,\n    )\n    return action\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_create_new_task() -> dict:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_create_new_task() -> dict:\n    title = Prompt.ask(prompt=\"[1/5] Add Task Title\")\n    description = Prompt.ask(\n        prompt=\"[2/5] Add Task Description\", show_default=True, default=\"\"\n    )\n    tag = Prompt.ask(prompt=\"[3/5] Add a Tag\", show_default=True, default=\"ETC\")\n    while True:\n        due_date = Prompt.ask(\n            prompt=\"[4/5] Add a Due Date (YYYY-MM-DD)\", show_default=True, default=\"\"\n        )\n        if not due_date or check_due_date_format(date_str=due_date):\n            break\n        else:\n            console.print(\n                f\":warning: '{due_date}' has [red]not[/] \"\n                + \"the right format YYYY-MM-DD\"\n            )\n    console.print(f\"\\t[1] {COLOR_DICT['Ready']}\")\n    console.print(f\"\\t[2] {COLOR_DICT['Doing']}\")\n    status = IntPrompt.ask(\n        prompt=\"[5/5] Status of Task\",\n        show_choices=False,\n        choices=[\"1\", \"2\"],\n        show_default=True,\n        default=\"1\",\n    )\n    new_task = {\n        \"Title\": title,\n        \"Description\": description,\n        \"Status\": \"Ready\" if str(status) == \"1\" else \"Doing\",\n        \"Tag\": tag.upper(),\n        \"Creation_Date\": current_time_to_str(),\n        \"Due_Date\": due_date_date_to_datetime(due_date),\n        \"Begin_Time\": current_time_to_str() if str(status) == \"2\" else \"\",\n        \"Complete_Time\": \"\",\n        \"Duration\": 0,\n    }\n    return new_task\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_which_task_to_update(data: dict) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_which_task_to_update(data: dict) -> str:\n    choice_task_ids = [\n        id for id, task in data.items() if task[\"Status\"] in cfg.vis_cols\n    ]\n    task_id_to_update = IntPrompt.ask(\n        prompt=\"Which Task to update? Select an [[cyan]Id[/]]\",\n        choices=choice_task_ids,\n        show_choices=False,\n    )\n    return str(task_id_to_update)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_update_task_title(current_title) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_update_task_title(current_title) -> str:\n    return Prompt.ask(\n        prompt=\"[1/5] Update Task Title\", show_default=True, default=current_title\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_update_task_description(current_desc) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_update_task_description(current_desc) -> str:\n    return Prompt.ask(\n        prompt=\"[2/5] Update Task Description\", show_default=True, default=current_desc\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_update_task_tag(current_tag) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_update_task_tag(current_tag) -> str:\n    return Prompt.ask(prompt=\"[3/5] Update Tag\", show_default=True, default=current_tag)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_update_due_date(current_due) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_update_due_date(current_due) -> str:\n    while True:\n        due_date_str = Prompt.ask(\n            prompt=\"[4/5] Update Due Date (YYYY-MM-DD or ` `)\",\n            show_default=True,\n            default=due_date_datetime_to_date(date_datetime=current_due),\n        )\n        if not due_date_str or check_due_date_format(date_str=due_date_str):\n            break\n        else:\n            console.print(\n                f\":warning: '{due_date_str}' has [red]not[/] \"\n                + \"the right format YYYY-MM-DD\"\n            )\n    return due_date_date_to_datetime(due_date_str)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    \"\"\"TODO\"\"\"\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_to_what_status_to_move(task_title):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_to_what_status_to_move(task_title):\n    possible_status = [cat for cat in cfg.kanban_columns_dict]\n    console.print(f'Updating Status of Task \"[white]{task_title}[/]\"')\n    for idx, status in enumerate(possible_status, start=1):\n        console.print(f\"\\t[{idx}] {COLOR_DICT.get(status, status)}\")\n    new_status = IntPrompt.ask(\n        prompt=\"[5/5] New Status of Task?\",\n        show_choices=False,\n        choices=[f\"{i}\" for i, _ in enumerate(possible_status, start=1)],\n    )\n    return possible_status[int(new_status) - 1]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_update_task_title(current_title) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_update_task_title(current_title) -> str:\n    title = input_update_task_title(current_task[\"Title\"])\n    description = input_update_task_description(current_task[\"Description\"])\n    tag = input_update_task_tag(current_task[\"Tag\"])\n    due_date = input_update_due_date(current_task.get(\"Due_Date\", \"\"))\n    status = input_ask_to_what_status_to_move(current_task[\"Title\"])\n    if status == \"Doing\" and current_task[\"Status\"] != \"Doing\":\n        start_doing = current_time_to_str()\n        stop_doing = current_task.get(\"Complete_Time\", \"\")\n        duration = current_task.get(\"Duration\", 0)\n    elif status != \"Doing\" and current_task[\"Status\"] == \"Doing\":\n        start_doing = current_task.get(\"Begin_Time\", \"\")\n        stop_doing = current_time_to_str()\n        duration = calculate_time_delta_str(\n            start_time_str=current_task.get(\"Begin_Time\", \"\"), end_time_str=stop_doing\n        ) + current_task.get(\"Duration\", 0)\n    else:\n        start_doing = current_task.get(\"Begin_Time\", \"\")\n        stop_doing = current_task.get(\"Complete_Time\", \"\")\n        duration = current_task.get(\"Duration\", 0)\n    if status == \"Done\":\n        stop_doing = current_time_to_str()\n        console.print(\n            f\":sparkle: Congrats, you just completed '{title}'\"\n            + f\" after {duration} minutes :muscle:\"\n        )\n    updated_task = {\n        \"Title\": title,\n        \"Description\": description,\n        \"Status\": status,\n        \"Tag\": tag.upper(),\n        \"Due_Date\": due_date,\n        \"Begin_Time\": start_doing,\n        \"Complete_Time\": stop_doing,\n        \"Duration\": duration,\n    }\n    current_task.update(updated_task)\n    return current_task\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_confirm_set_board_active(name) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_confirm_set_board_active(name) -> bool:\n    return Confirm.ask(\n        f\"Do you want to set the Board '{name}' as active:question_mark:\"\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_for_new_board_name() -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_for_new_board_name() -> str:\n    return Prompt.ask(\n        prompt=\"A new folder will be created for your board\\n\"\n        + \":warning:  [yellow]Only[/] use alpha-numeric characters or\"\n        + \"\"\" [green]'-', '_', ' '[/] for new board names.\n    \"\"\"\n        + \"What should the new board be called?\"\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    boards = cfg.kanban_boards\n    max_board_len = max([len(b) for b in cfg.kanban_boards])\n    try:\n        active_board_idx = boards.index(cfg.active_board) + 1\n    except ValueError:\n        active_board_idx = None\n    for idx, (board, board_data) in enumerate(boards_dict.items(), start=1):\n        status_dict = create_status_dict_for_rows(board_data, cfg.vis_cols)\n        days_left_list = [\n            calculate_days_left_till_due(val[\"Due_Date\"])\n            for val in board_data.values()\n            if val.get(\"Due_Date\") and val[\"Status\"] in [\"Ready\", \"Doing\"]\n        ]\n        days_left = min(days_left_list) if days_left_list else -9999\n        console.print(\n            f\"[{idx}] {board}\"\n            + \" \" * (max_board_len - len(board) + 1)\n            + \" | \".join(\n                [\n                    f\"{COLOR_DICT[col]}: {len(status_dict[col]):02d}\"\n                    for col in cfg.vis_cols\n                ]\n            )\n            + (\n                f\"\\t next due in {days_left} day/s\"\n                if days_left > 0\n                else f\"[red]\\t task {-days_left} day/s overdue[/]\"\n                if days_left != -9999\n                else \"\\t no dues present here\"\n            )\n        )\n    answer = IntPrompt.ask(\n        prompt=\"Which board to activate\",\n        choices=[f\"{i}\" for i, _ in enumerate(boards, start=1)],\n        show_choices=False,\n        default=active_board_idx,\n        show_default=True,\n    )\n    return boards[int(answer) - 1]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_which_tasks_to_show(choices):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_which_tasks_to_show(choices):\n    return Prompt.ask(\n        prompt=\"What Task/s to show? Select an [[cyan]Id[/]] or ([orange3]Tag[/])?\",\n        default=False,\n        show_default=False,\n        choices=choices,\n        show_choices=False,\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_for_delete_board() -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_for_delete_board() -> str:\n    boards = [b for b in cfg.kanban_boards]\n    for idx, board in enumerate(boards, start=1):\n        console.print(f\"[{idx}] {board}\")\n    answer = IntPrompt.ask(\n        prompt=\"Which board to delete\",\n        choices=[f\"{i}\" for i, _ in enumerate(boards, start=1)],\n        show_choices=False,\n    )\n    return boards[int(answer) - 1]\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_confirm_delete_board(name) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_confirm_delete_board(name) -> bool:\n    return Confirm.ask(\n        f\"Are you sure you want to delete the Board '{name}':question_mark:\"\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_confirm_show_all_todos() -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_confirm_show_all_todos() -> bool:\n    return Confirm.ask(\n        prompt=\"Do you want to list all of them?\", default=True, show_default=True\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef print_all_todos(todos: list) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef print_all_todos(todos: list) -> None:\n    pattern_dict = {pat: f\"[orange3]{pat}[/]\" for pat in cfg.scanned_patterns}\n    for i, (todo, path) in enumerate(todos, start=1):\n        todo_string = f\"[cyan]{i}[/]) \" if i > 9 else f\"[cyan]0{i}[/]) \"\n        for pat, col_pat in pattern_dict.items():\n            todo = todo.replace(pat, col_pat)\n        todo_string += f\"{todo:<90} \"\n        todo_string += f\"[blue]{str(path):>10}[/] \"\n        console.print(todo_string)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    console.print(f\"Found [blue]{len(todos)}[/] TODOs.\")\n    if len(todos) > 10:\n        if input_confirm_show_all_todos():\n            print_all_todos(todos)\n    else:\n        print_all_todos(todos)\n    return Confirm.ask(\n        prompt=\"Add found Tasks to active board?\", default=False, show_default=True\n    )\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    \"\"\"TODO\"\"\"\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_github_like_report_table(boards_dict: dict):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_github_like_report_table(boards_dict: dict):\n    done_tasks = []\n    for _, task_dict in boards_dict.items():\n        done_tasks += [task for _, task in task_dict.items() if task[\"Complete_Time\"]]\n    max_val, report_dict = create_dict_for_report_view(done_tasks)\n    current_year = datetime.now().year\n    done_tasks_this_year = [\n        task\n        for task in done_tasks\n        if datetime.strptime(task[\"Complete_Time\"], \"%Y-%m-%d %H:%M:%S\").year\n        == current_year\n    ]\n    gh_table = Table(\n        title=f\"[{REPORT_COLORS[4]}]{len(done_tasks_this_year)}[/] Tasks completed\"\n        + f\" in [{REPORT_COLORS[4]}]{current_year}[/]\",\n        title_justify=\"left\",\n        highlight=True,\n        padding=False,\n        show_header=True,\n        box=None,\n        caption=\"\\nless\"\n        + \" \".join([f\"[{scale} on {scale}]  [/] \" for scale in REPORT_COLORS])\n        + \" more\",\n        caption_justify=\"right\",\n    )\n    for work_week in range(0, 53):\n        gh_table.add_column(\n            header=\"\" if work_week % 5 or work_week == 0 else f\"{work_week}\",\n            header_style=\"bold\",\n            justify=\"left\",\n            overflow=\"fold\",\n        )\n    for day in range(1, 8):\n        day_name = calendar.day_abbr[day - 1] if day % 2 else \"\"\n        day_row_vals = [report_dict[day].get(week, 0) for week in range(1, 53)]\n        mapped_day_row_vals = create_color_mapping(day_row_vals, max_val=max_val)\n        gh_table.add_row(\n            day_name,\n            *[\n                f\"[{REPORT_COLORS[i]} on {REPORT_COLORS[i]}]  [/]\"\n                for i in mapped_day_row_vals\n            ],\n        )\n    return gh_table\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    \"\"\"TODO\"\"\"\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    \"\"\"TODO\"\"\"\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_ask_for_action_settings() -> int:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_ask_for_action_settings() -> int:\n    console.print(\n        \"[yellow]Not happy with current settings!?[/],\"\n        + \"which [blue]Section[/] do you want to change :hammer_and_wrench:?\"\n    )\n    console.print(\n        \"\\t[1] :clipboard: [blue]settings.general[/]\"\n        + 2 * \"\\t\"\n        + \"[2] :eye:  [blue]settings.columns.visibility[/]\"\n    )\n    console.print(\n        \"\\t[3] :magnifying_glass_tilted_left: [blue]settings.scanner[/]\"\n        + 2 * \"\\t\"\n        + \"[4] :cross_mark: [red]Go back to Kanban Board[/]\"\n    )\n    action = IntPrompt.ask(\n        prompt=\"Choose [blue]Section[/], where you want to change the Current Value\",\n        choices=[\"1\", \"2\", \"3\", \"4\"],\n        show_choices=False,\n    )\n    return action\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_config_table():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_config_table():\n    settings_table = Table(\n        title=\":hammer_and_wrench:  [grey69]Settings Overview[/]:hammer_and_wrench:\",\n        highlight=True,\n        show_header=True,\n        caption=f\"Your config file is located under [light_green]{CONFIG_FILE_PATH}[/]\",\n    )\n    for col in [\"Option\", \"Current Value\"]:\n        settings_table.add_column(\n            header=col,\n            header_style=\"bold\",\n            justify=\"left\",\n            overflow=\"fold\",\n            min_width=30,\n        )\n    for section in cfg.config:\n        if section:\n            settings_table.add_section()\n            settings_table.add_row(f\"[blue]{section}[/]\", \"\")\n        for key, val in cfg.config[section].items():\n            settings_table.add_row(key, val)\n    return settings_table\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_change_footer_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_change_footer_settings():\n    footer_visible = Confirm.ask(\n        prompt=\"Should Footer be visible?\",\n        default=True if cfg.show_footer == \"True\" else False,\n        show_default=True,\n    )\n    return footer_visible\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_change_done_limit_settings() -> int:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_change_done_limit_settings() -> int:\n    done_limit = IntPrompt.ask(\n        prompt=f\"What should the Limit of Tasks in {COLOR_DICT.get('Done', 'Done')} \"\n        + f\"Column be, before moving to {COLOR_DICT.get('Archived', 'Archived')}?\",\n        default=cfg.done_limit,\n        show_default=True,\n    )\n    return str(done_limit)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_change_min_col_width_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_change_min_col_width_settings():\n    new_min_col_width = IntPrompt.ask(\n        prompt=\"What should the minimum Column Width be?\",\n        default=cfg.col_min_width,\n        show_default=True,\n    )\n    return new_min_col_width\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_change_column_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_change_column_settings():\n    updated_column_dict = {}\n    for col, vis in cfg.kanban_columns_dict.items():\n        new_visible = Confirm.ask(\n            prompt=f\"Should Column {COLOR_DICT.get(col, col)} be visible?\",\n            default=True if vis == \"True\" else False,\n            show_default=True,\n        )\n        updated_column_dict[col] = \"True\" if new_visible else \"False\"\n    return updated_column_dict\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    \"\"\"TODO\"\"\"\n\n\ndef input_change_patterns_to_scan_settings():\n    pass\n```\n\n---\nFunction Complement\n---\ndef input_change_files_to_scan_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_change_files_to_scan_settings():\n    files_to_scan = Prompt.ask(\n        prompt=\"Which Files to scan? Enter [green]' '[/] separated File Endings\",\n        default=\" \".join(cfg.scanned_files),\n        show_default=True,\n    )\n    return files_to_scan\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/kanban_python/interface.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/interface.py`.\n\n```python\nimport calendar\nfrom datetime import datetime\nfrom itertools import zip_longest\nfrom rich.prompt import Confirm, IntPrompt, Prompt\nfrom rich.table import Table\nfrom .config import cfg\nfrom .constants import (\n    BOARD_CAPTION_STRING,\n    COLOR_DICT,\n    CONFIG_FILE_PATH,\n    FOOTER,\n    REPORT_COLORS,\n)\nfrom .utils import (\n    calculate_days_left_till_due,\n    calculate_time_delta_str,\n    check_due_date_format,\n    console,\n    create_color_mapping,\n    create_dict_for_report_view,\n    create_status_dict_for_rows,\n    current_time_to_str,\n    due_date_date_to_datetime,\n    due_date_datetime_to_date,\n)\n\n\ndef create_table(data: dict) -> Table:\n    pass\n\n\ndef input_ask_for_action():\n    pass\n\n\ndef input_create_new_task() -> dict:\n    pass\n\n\ndef input_ask_which_task_to_update(data: dict) -> str:\n    pass\n\n\ndef input_update_task_title(current_title) -> str:\n    pass\n\n\ndef input_update_task_description(current_desc) -> str:\n    pass\n\n\ndef input_update_task_tag(current_tag) -> str:\n    pass\n\n\ndef input_update_due_date(current_due) -> str:\n    pass\n\n\ndef input_ask_to_what_status_to_move(task_title):\n    pass\n\n\ndef input_update_task(current_task: dict) -> dict:\n    pass\n\n\ndef input_confirm_set_board_active(name) -> bool:\n    pass\n\n\ndef input_ask_for_new_board_name() -> str:\n    pass\n\n\ndef input_ask_for_change_board(boards_dict: dict) -> str:\n    pass\n\n\ndef input_ask_which_tasks_to_show(choices):\n    pass\n\n\ndef input_ask_for_delete_board() -> str:\n    pass\n\n\ndef input_confirm_delete_board(name) -> bool:\n    pass\n\n\ndef input_confirm_show_all_todos() -> bool:\n    pass\n\n\ndef print_all_todos(todos: list) -> None:\n    pass\n\n\ndef input_confirm_add_todos_to_board(todos: list) -> bool:\n    pass\n\n\ndef create_github_like_report_table(boards_dict: dict):\n    pass\n\n\ndef input_ask_for_action_settings() -> int:\n    pass\n\n\ndef create_config_table():\n    pass\n\n\ndef input_change_footer_settings():\n    pass\n\n\ndef input_change_done_limit_settings() -> int:\n    pass\n\n\ndef input_change_min_col_width_settings():\n    pass\n\n\ndef input_change_column_settings():\n    pass\n\n\ndef input_change_files_to_scan_settings():\n    pass\n\n\ndef input_change_patterns_to_scan_settings():\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef input_change_patterns_to_scan_settings():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef input_change_patterns_to_scan_settings():\n    files_to_scan = Prompt.ask(\n        prompt=\"Which Patterns to scan? Enter [green]','[/] separated Patterns\",\n        default=\",\".join(cfg.scanned_patterns),\n        show_default=True,\n    )\n    return files_to_scan\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef get_motivational_quote() -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_motivational_quote() -> str:\n    return choice(QUOTES)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef current_time_to_str() -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef current_time_to_str() -> str:\n    return datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    \"\"\"TODO\"\"\"\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    \"\"\"TODO\"\"\"\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    date_format = \"%Y-%m-%d %H:%M:%S\"\n    start_time = datetime.strptime(start_time_str, date_format)\n    end_time = datetime.strptime(end_time_str, date_format)\n    delta = end_time - start_time\n    delta_minutes = delta.total_seconds() / 60\n    return round(delta_minutes, 2)\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    status_dict = {col: [] for col in vis_cols}\n    for id, task in data.items():\n        if not task[\"Status\"] in vis_cols:\n            continue\n        task_str = f\"[[cyan]{id}[/]]\" if int(id) > 9 else f\"[[cyan]0{id}[/]]\"\n        task_str += f\"([orange3]{task.get('Tag')}[/])\"\n        task_str += f\" [white]{task['Title']}[/]\"\n        if all((task[\"Status\"] in [\"Ready\", \"Doing\"], task.get(\"Due_Date\", False))):\n            days_left = calculate_days_left_till_due(task[\"Due_Date\"])\n            task_str += f\" |[red]{days_left:02d}[/]|\"\n        status_dict[task[\"Status\"]].append(task_str)\n    return status_dict\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    done_col_idxs = [idx for idx, t in data.items() if t[\"Status\"] == \"Done\"]\n    return len(done_col_idxs) <= cfg.done_limit\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    for task in data.values():\n        if task[\"Status\"] in vis_cols:\n            return True\n    return False\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    \"\"\"TODO\"\"\"\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    \"\"\"TODO\"\"\"\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef move_first_done_task_to_archive(data: dict):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef move_first_done_task_to_archive(data: dict):\n    first_task_id = [idx for idx, t in data.items() if t[\"Status\"] == \"Done\"][0]\n    updated_task = data[first_task_id]\n    updated_task[\"Status\"] = \"Archived\"\n    return first_task_id, updated_task\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef delete_json_file(db_path: str) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef delete_json_file(db_path: str) -> None:\n    path = Path(db_path)\n    try:\n        path.unlink()\n        path.parent.rmdir()\n        console.print(f\"File under {path.parent} was now removed\")\n    except FileNotFoundError:\n        console.print(\"File already deleted\")\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    \"\"\"TODO\"\"\"\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    \"\"\"TODO\"\"\"\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_board_name_valid(boardname: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_board_name_valid(boardname: str):\n    checker = \"\".join(x for x in boardname if x.isalnum() or x in \"_- \")\n    return True if checker == boardname else False\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    \"\"\"TODO\"\"\"\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    \"\"\"TODO\"\"\"\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    def recursive_search(path, file_list: list, progress):\n        for entry in os.scandir(path):\n            try:\n                if entry.is_dir(follow_symlinks=False) and not entry.name.startswith(\n                    \".\"\n                ):\n                    recursive_search(\n                        path=entry.path, file_list=file_list, progress=progress\n                    )\n                elif entry.is_file(follow_symlinks=False):\n                    if any(entry.path.endswith(ending) for ending in endings):\n                        file_list.append(entry.path)\n                        prog.update(task_id=task, advance=1)\n            except PermissionError:\n                continue\n\n    file_list = []\n    with Progress(transient=True) as prog:\n        task = prog.add_task(\"[blue]Collecting files...\", total=None)\n        recursive_search(path=path, file_list=file_list, progress=prog)\n    return file_list\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef recursive_search(path, file_list: list, progress):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef recursive_search(path, file_list: list, progress):\n    for entry in os.scandir(path):\n        try:\n            if entry.is_dir(follow_symlinks=False) and not entry.name.startswith(\".\"):\n                recursive_search(\n                    path=entry.path, file_list=file_list, progress=progress\n                )\n            elif entry.is_file(follow_symlinks=False):\n                if any(entry.path.endswith(ending) for ending in endings):\n                    file_list.append(entry.path)\n                    prog.update(task_id=task, advance=1)\n        except PermissionError:\n            continue\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    \"\"\"TODO\"\"\"\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    \"\"\"TODO\"\"\"\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n    todos = []\n    with Progress(MofNCompleteColumn(), *Progress.get_default_columns()) as prog:\n        task = prog.add_task(\"Files searched for TODOs...\", total=len(file_paths))\n        for file_path in file_paths:\n            prog.update(task_id=task, advance=1)\n            with open(file_path, \"r\") as file:\n                try:\n                    todos += [\n                        (line.strip(), str(Path(file_path).relative_to(rel_path)))\n                        for line in file.readlines()\n                        if any(line.strip().startswith(pattern) for pattern in patterns)\n                    ]\n                except UnicodeDecodeError:\n                    continue\n    return todos\n    \n\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    \"\"\"TODO\"\"\"\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    \"\"\"TODO\"\"\"\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    for pattern in patterns:\n        if pattern in todo:\n            tag = \"\".join(c for c in pattern if c.isalnum())\n        if not todo.split(pattern)[0]:\n            title = todo.split(pattern)[1].strip()\n            title = title[1:].strip() if title.startswith(\":\") else title\n    return tag.upper(), title\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    \"\"\"TODO\"\"\"\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    \"\"\"TODO\"\"\"\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    valid_ids = [i for i, task in data_dict.items() if task[\"Status\"] in vis_cols]\n    valid_tags = [\n        task[\"Tag\"] for task in data_dict.values() if task[\"Status\"] in vis_cols\n    ]\n    valid_choices = list(set(valid_ids + valid_tags))\n    return valid_choices\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_scanner_files_valid(files: str) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_scanner_files_valid(files: str) -> bool:\n    for file in files.split(\" \"):\n        if not file.startswith(\".\"):\n            return False\n        if not all(char.isalpha() for char in file[1:]):\n            return False\n    return True\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    for pattern in patterns.split(\",\"):\n        if not pattern.startswith(\"#\"):\n            return False\n    return True\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    \"\"\"TODO\"\"\"\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    \"\"\"TODO\"\"\"\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef get_iso_calender_info(date_str: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_iso_calender_info(date_str: str):\n    year, week, weekday = datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\").isocalendar()\n    return year, week, weekday\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    \"\"\"TODO\"\"\"\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    \"\"\"TODO\"\"\"\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_dict_for_report_view(completed_tasks: list):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_dict_for_report_view(completed_tasks: list):\n    report_dict = defaultdict(lambda: defaultdict(int))\n    max_val = 0\n    current_year = datetime.now().year\n    for task in completed_tasks:\n        year, week, day = get_iso_calender_info(task[\"Complete_Time\"])\n        if year != current_year:\n            continue\n        report_dict[day][week] += 1\n        max_val = max(max_val, report_dict[day][week])\n    return max_val, report_dict\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    \"\"\"TODO\"\"\"\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    \"\"\"TODO\"\"\"\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_color_mapping(amount_list: list, max_val: int):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_color_mapping(amount_list: list, max_val: int):\n    mapped_list = []\n    for val in amount_list:\n        if val == 0:\n            mapped_list.append(0)\n        elif val / max_val <= 0.25:\n            mapped_list.append(1)\n        elif val / max_val <= 0.5:\n            mapped_list.append(2)\n        elif val / max_val <= 0.75:\n            mapped_list.append(3)\n        elif val / max_val <= 1:\n            mapped_list.append(4)\n        else:\n            continue\n    return mapped_list\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    \"\"\"TODO\"\"\"\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    \"\"\"TODO\"\"\"\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef create_report_document(boards_dict: dict):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef create_report_document(boards_dict: dict):\n    date_dict = defaultdict(list)\n    for _, task_dict in boards_dict.items():\n        for _, task in task_dict.items():\n            if not task[\"Complete_Time\"]:\n                continue\n            completion_date = datetime.strptime(\n                task[\"Complete_Time\"], \"%Y-%m-%d %H:%M:%S\"\n            ).date()\n            date_dict[completion_date].append(f\"- {task['Tag']} {task['Title']}\\n\")\n    with open(REPORT_FILE_PATH / REPORT_FILE_NAME, \"w\") as report_file:\n        last_year = \"\"\n        last_month = \"\"\n        last_day = \"\"\n        for date, completed in sorted(date_dict.items()):\n            if date.year != last_year:\n                last_year = date.year\n                report_file.write(f\"# Tasks Completed in {date.year}\\n\")\n            if date.month != last_month:\n                last_month = date.month\n                report_file.write(f\"## {calendar.month_name[date.month]}\\n\")\n            if date.day != last_day:\n                last_day = date.day\n                report_file.write(f\"### {date}\\n\")\n            report_file.write(\"\".join(completed))\n    return date_dict\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    \"\"\"TODO\"\"\"\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef check_due_date_format(date_str: str) -> bool:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef check_due_date_format(date_str: str) -> bool:\n    try:\n        datetime.strptime(date_str, \"%Y-%m-%d\")\n        return True\n    except ValueError:\n        return False\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    if date_datetime:\n        date_str = str(datetime.strptime(date_datetime, \"%Y-%m-%d %H:%M:%S\").date())\n        return date_str\n    return date_datetime\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef calculate_days_left_till_due(due_date: str):\n    pass\n```\n\n---\nFunction Complement\n---\ndef due_date_date_to_datetime(date_str: str) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef due_date_date_to_datetime(date_str: str) -> str:\n    if date_str:\n        date_datetime = str(\n            datetime.strptime(f\"{date_str} 23:59:59\", \"%Y-%m-%d %H:%M:%S\")\n        )\n        return date_datetime\n    return date_str\n```"
    },
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/kanban_python/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/kanban_python/utils.py`.\n\n```python\nimport calendar\nimport os\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom random import choice\nfrom rich.console import Console\nfrom rich.progress import MofNCompleteColumn, Progress\nfrom .constants import QUOTES, REPORT_FILE_NAME, REPORT_FILE_PATH\n\nconsole = Console()\n\n\ndef get_motivational_quote() -> str:\n    pass\n\n\ndef current_time_to_str() -> str:\n    pass\n\n\ndef calculate_time_delta_str(start_time_str: str, end_time_str: str) -> float:\n    pass\n\n\ndef create_status_dict_for_rows(data: dict, vis_cols: list) -> dict:\n    pass\n\n\ndef check_if_done_col_leq_X(cfg, data: dict) -> bool:\n    pass\n\n\ndef check_if_there_are_visible_tasks_in_board(data: dict, vis_cols: list) -> bool:\n    pass\n\n\ndef move_first_done_task_to_archive(data: dict):\n    pass\n\n\ndef delete_json_file(db_path: str) -> None:\n    pass\n\n\ndef check_board_name_valid(boardname: str):\n    pass\n\n\ndef scan_files(path=Path.cwd(), endings: list = [\".py\"]):\n    pass\n\n\ndef scan_for_todos(\n    file_paths: list, rel_path=Path.cwd(), patterns: list = [\"#TODO\", \"# TODO\"]\n) -> list:\n    pass\n\n\ndef split_todo_in_tag_and_title(todo: str, patterns: list):\n    pass\n\n\ndef get_tag_id_choices(data_dict: dict, vis_cols: list) -> list:\n    pass\n\n\ndef check_scanner_files_valid(files: str) -> bool:\n    pass\n\n\ndef check_scanner_patterns_valid(patterns: str) -> bool:\n    pass\n\n\ndef get_iso_calender_info(date_str: str):\n    pass\n\n\ndef create_dict_for_report_view(completed_tasks: list):\n    pass\n\n\ndef create_color_mapping(amount_list: list, max_val: int):\n    pass\n\n\ndef create_report_document(boards_dict: dict):\n    pass\n\n\ndef check_due_date_format(date_str: str) -> bool:\n    pass\n\n\ndef due_date_datetime_to_date(date_datetime: str) -> str:\n    pass\n\n\ndef due_date_date_to_datetime(date_str: str) -> str:\n    pass\n\n\ndef calculate_days_left_till_due(due_date: str):\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef calculate_days_left_till_due(due_date: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef calculate_days_left_till_due(due_date: str):\n    time_now = datetime.now()\n    time_due = datetime.strptime(due_date, \"%Y-%m-%d %H:%M:%S\")\n    delta_days = (time_due - time_now).days\n    return delta_days\n```"
    }
]