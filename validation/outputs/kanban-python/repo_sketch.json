[
    {
        "readme": "# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.",
        "instruction": "Below is a detailed README.md of repository. Please write a repository sketch in the form of a tree, including all folders, files, as well as imports information if necessary.\n\n---\nREADME.md\n---\n# kanban-python\n\n> A Terminal Kanban Application written in Python to boost your productivity\n\n## Introduction\nWelcome to **kanban-python**, your Terminal Kanban-Board Manager.\n\nThe [clikan] Kanban App inspired me to write\nmy own Terminal Kanban Application since I preferred a more simple and guided workflow.\n\n**kanban-python** also comes with more features, like custom column creation,\nautomatic scanning and customizable config file to support you being productive.\n\nThis package was developed with [pyscaffold], which provides awesome project templates\nand takes over much of the boilerplate for python packaging.\nIt was a great help for developing my first package and I can highly recommend it.\n\n## Features\n<details><summary>Colorful and Interactive</summary>\n\n- kanban-python uses [rich] under the hood to process user input\nand display nice looking kanban-boards to the terminal.\n- Each task has a unique `ID` per board and also has an optional `Tag` and `Due Date` associated with it,\nwhich are displayed alongside its `Title`\n\n</details>\n\n\n<details><summary>Following the XDG basedir convention</summary>\n\n- kanban-python utilizes [platformdirs] `user_config_dir` to save the config file and `user_data_dir` for\nthe board specific task files. After creating your first board, you can use `kanban configure` to show the current settings table.\nThe config path in the table caption and the path for the task files can be found in the kanban_boards section.\n\n</details>\n\n\n<details><summary>Scanning of Files for automatic Task Creation</summary>\n\n- kanban-python can scan files of defined types for specific patterns at start of line.\nCheck [Automatic Task Creation](#automatic-task-creation) for more Infos.\n\n</details>\n\n\n<details><summary>Customizable Configfile</summary>\n\n- A `pykanban.ini` file gets created on first initialization in a `kanban-python` folder in your `user_config_dir`-Directory.\nThis can be edited manually or within the kanban-python application. It tracks the location for all your created boards. \\\n![configfile](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_config.PNG)\n   * `Active_Board`: current board that is shown when using `kanban`-command\n   * `Done_Limit`: If the amount of tasks exceed this number in the  <span style=\"color:green\">Done</span> column,\n   the first task of that column gets its status updated to <span style=\"color:gold\">Archived</span> and is moved into that column. (default: `10`)\n   * `Column_Min_Width`: Sets the minimum width of columns. (default: `40`)\n   * `Show_Footer`: Shows the table footer with package name and version. (default: `True`)\n   * `Files`: Space seperated filetypes to search for patterns to create tasks. (default: `.py .md`)\n   * `Patterns`: Comma seperated patterns to search for start of line to create tasks. <br />(default: `# TODO,#TODO,# BUG`)\n\n</details>\n\n\n<details><summary>Task Storage File for each Board</summary>\n\n- Each created board comes with its own name and `pykanban.json` file,\nwhich stores all tasks for that board. The files are stored in board specific folders under `$USER_DATA_DIR/kanban-python/kanban_boards/<BOARDNAME>`.\nWhen changing Boards you also get an overview over tasks in visible columns for each board and the most urgent or overdue task on that board.\n![change_view](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_change.PNG)\n\n</details>\n\n\n<details><summary>Customizable Columns</summary>\n\n- kanban-python comes with 5 pre-defined colored columns: [Ready, Doing, Done, Archived, Deleted]\nMore column can be added manually in the `pykanban.ini`, the visibility can be configured in the settings\nwith `kanban configure`.\n\n</details>\n\n\n<details><summary>Time Tracking of Task duration in Doing</summary>\n\n- For each task it is tracked, how long it was in the\n <span style=\"color:yellow\">Doing</span> column, based on the moments when you update the task status.\n The initial Task structure on creation looks as follows:\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_task_example.PNG)\n\n</details>\n\n\n<details><summary>Report Creation for completed Tasks</summary>\n\n- When you use [kanban report](#create-report) a github-like contribution map is displayed for the current year,\nAlso a markdown file is created with all tasks comleted based on the moment, when the tasks were moved to Done Column.\n![task](https://raw.githubusercontent.com/Zaloog/kanban-python/main/images/image_kanban_report_document.PNG)\n\n</details>\n\n## Usage\nAfter Installation of kanban-python, there are 5 commands available:\n\n### Create new Boards\n  ```bash\n  kanban init\n  ```\nIs used to create a new kanban board i.e. it asks for a name and then creates a `pykanban.json` file with a Welcome Task.\nOn first use of any command, the `pykanban.ini` configfile and the `kanban-python` folder will be created automatically.\n\n### Interact with Tasks/Boards\n  ```bash\n  kanban\n  ```\nThis is your main command to interact with your boards and tasks. It also gives the option to show the current settings and adjust them.\nAdjusting the settings can also be done directly by using the command `kanban configure`.\n\nUse `Ctrl-C` or `Ctrl-D` to exit the application at any time. :warning: If you exit in the middle of creating/updating a task,\nor changing settings, your progress wont be saved.\n\n### Automatic Task Creation\n  ```bash\n  kanban scan\n  ```\nAfter executing this command, kanban-python scans your current Directory recursively for the defined filetypes and searches for lines that start with the pattern provided.\n\nAfter confirmation to add the found tasks to table they will be added to the board. The alphanumeric Part of the Pattern will be used as tag.\nThe filepath were the task was found will be added as description of the task.\n\n### Create Report\n  ```bash\n  kanban report\n  ```\nGoes over all your Boards and creates a single markdown file by checking the `Completion Dates` of your tasks.\nAlso shows a nice github-like contribution table for the current year.\n\n### Change Settings\n  ```bash\n  kanban configure\n  ```\nTo create a new custom Columns, you have to edit the `pykanban.ini` manually and add a new column name + visibility status\nunder the `settings.columns.visible` section. The other options are all customizable now via the new settings menu.\n\n---\nRepository Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 docs\n|   \u251c\u2500\u2500 conf.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 kanban_python\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 app.py # from kanban_python import cli_parser, config, controls, utils;\n        \u251c\u2500\u2500 cli_parser.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 config.py\n        \u251c\u2500\u2500 constants.py # from kanban_python import __version__;\n        \u251c\u2500\u2500 controls.py\n        \u251c\u2500\u2500 interface.py\n        \u2514\u2500\u2500 utils.py\n```"
    }
]