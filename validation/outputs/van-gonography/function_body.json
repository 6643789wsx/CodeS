[
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/__version__.py",
            "src/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n    \"\"\"\n        Adds a header to the cover image before hiding data.\n    \n        Parameters:\n        - image (str): Path to the cover image.\n        - extension (str): File extension to be hidden.\n        - data_length (int): Length of the data to be hidden.\n    \n        Returns:\n        None\n        \"\"\"\n    try:\n        with open(image, \"rb\") as img_file:\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Image file not found: {image}\")\n    if not extension or not isinstance(extension, str):\n        raise ValueError(\"Invalid extension. It should be a non-empty string.\")\n    if not isinstance(data_length, int) or data_length <= 0:\n        raise ValueError(\"Invalid data length. It should be a positive integer.\")\n    try:\n        with Image.open(image, \"r\") as cover:\n            cover_array = np.array(cover)\n    except Exception as e:\n        raise Exception(f\"Error opening the cover image: {e}\")\n    height = cover_array.shape[0]\n    extension_binary = text_to_binary(extension)\n    extension_length = len(extension_binary)\n    data_length_binary = text_to_binary(str(data_length))\n    data_length_length = len(data_length_binary)\n    total_bits_needed = extension_length + data_length_length\n    max_bits_available = (height - 1) * 3 * 8\n    if total_bits_needed > max_bits_available:\n        raise ValueError(\"Data to be hidden is too large for the given image.\")\n    cover_array[0, 0] = [extension_length, data_length_length, 0]\n    pixel_bits_used = 3\n    pixels_needed = np.ceil(extension_length / pixel_bits_used).astype(int)\n    for i in range(pixels_needed):\n        r, g, b = cover_array[i + 1, 0]\n        extension_bits = extension_binary[\n            i * pixel_bits_used : (i + 1) * pixel_bits_used\n        ].ljust(pixel_bits_used, \"0\")\n        extension_int = int(extension_bits, 2)\n        r = r & 248 | extension_int\n        cover_array[i + 1, 0] = [r, g, b]\n    starting_index = 1 + pixels_needed\n    pixels_needed = np.ceil(data_length_length / pixel_bits_used).astype(int)\n    for i in range(starting_index, starting_index + pixels_needed):\n        r, g, b = cover_array[i, 0]\n        data_length_bits = data_length_binary[\n            (i - starting_index)\n            * pixel_bits_used : (i - starting_index + 1)\n            * pixel_bits_used\n        ].ljust(pixel_bits_used, \"0\")\n        data_length_int = int(data_length_bits, 2)\n        g = g & 248 | data_length_int\n        cover_array[i, 0] = [r, g, b]\n    try:\n        Image.fromarray(cover_array).save(image, format=\"PNG\")\n    except Exception as e:\n        raise Exception(f\"Error saving the modified cover image: {e}\")\n    \n\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/__version__.py",
            "src/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    \"\"\"TODO\"\"\"\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef get_header(image: str) -> dict:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_header(image: str) -> dict:\n    try:\n        with open(image, \"rb\"):\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Image file not found: {image}\")\n    try:\n        with Image.open(image, \"r\") as cover:\n            cover_array = np.array(cover)\n    except Exception as e:\n        raise Exception(f\"Error opening the cover image: {e}\")\n    try:\n        extension_length, data_length_length, _ = cover_array[0, 0]\n    except IndexError:\n        raise ValueError(\"Invalid image format. Header information not found.\")\n    extension = \"\"\n    pixel_bits_used = 3\n    pixels_needed = np.ceil(extension_length / pixel_bits_used).astype(int)\n    for i in range(pixels_needed):\n        try:\n            r, _, _ = cover_array[i + 1, 0]\n        except IndexError:\n            raise ValueError(\"Invalid image format. Insufficient pixels for extension.\")\n        extension_bits = f\"{r & 7:03b}\"\n        extension += extension_bits\n    extension = extension[:extension_length]\n    try:\n        extension = binary_to_text(extension)\n    except ValueError as e:\n        raise ValueError(f\"Error converting extension to text: {e}\")\n    starting_index = 1 + pixels_needed\n    pixels_needed = np.ceil(data_length_length / pixel_bits_used).astype(int)\n    data_length = \"\"\n    for i in range(starting_index, starting_index + pixels_needed):\n        try:\n            _, g, _ = cover_array[i, 0]\n        except IndexError:\n            raise ValueError(\n                \"Invalid image format. Insufficient pixels for data length.\"\n            )\n        data_length_bits = f\"{g & 7:03b}\"\n        data_length += data_length_bits\n    data_length = data_length[:data_length_length]\n    try:\n        data_length = binary_to_text(data_length).replace(\"\\x00\", \"\")\n    except ValueError as e:\n        raise ValueError(f\"Error converting data length to text: {e}\")\n    return {\"extension\": extension, \"data_length\": int(data_length)}\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/__version__.py",
            "src/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef encode_image(\n    file: str,\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef encode_image(\n    file: str,\n    try:\n        with open(file, \"rb\") as f:\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File to hide not found: {file}\")\n    try:\n        with open(image, \"rb\") as img_file:\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Cover image file not found: {image}\")\n    with open(file, \"rb\") as f:\n        data = \"\".join([f\"{byte:08b}\" for byte in f.read()])\n    data_length = len(data)\n    if compress:\n        try:\n            data = zlib.compress(data.encode())\n        except Exception as e:\n            raise Exception(f\"Error compressing the data: {e}\")\n        data_length = len(data)\n    data = \"\".join([f\"{byte:08b}\" for byte in data])\n    if encrypt:\n        key = Fernet.generate_key()\n        with open(\"key.key\", \"wb\") as key_file:\n            key_file.write(\n                f\"This is your encryption key, keep it safe, you will need it to decrypt the data: {key}\".encode()\n            )\n        try:\n            f = Fernet(key)\n            data = f.encrypt(data.encode())\n            data = \"\".join([f\"{byte:08b}\" for byte in data])\n        except Exception as e:\n            raise Exception(f\"Error encrypting the data: {e}\")\n    extension = os.path.splitext(file)[1][1:]\n    try:\n        with Image.open(image, \"r\") as cover:\n            cover_array = np.array(cover)\n    except Exception as e:\n        raise Exception(f\"Error opening the cover image: {e}\")\n    width = cover_array.shape[1]\n    height = cover_array.shape[0]\n    if width * height * SINGLE_RGB_PIXEL_BIT_SIZE * 2 < data_length:\n        raise ValueError(\"Cover image is too small to hide the data.\")\n    data_index = 0\n    bitmask = 252\n    for i in range(1, width):\n        for j in range(height):\n            if data_index >= len(data):\n                break\n            r, g, b = cover_array[j, i]\n            for k in range(3):\n                if data_index < len(data):\n                    cover_array[j, i][k] = cover_array[j, i][k] & bitmask | int(\n                        data[data_index : data_index + 2], 2\n                    )\n                    data_index += 2\n                else:\n                    break\n    output_filename = f\"Cover_{extension}.png\"\n    if encrypt:\n        output_filename = f\"Cover_{extension}_encrypted.png\"\n    if output_directory:\n        output_filename = os.path.join(output_directory, output_filename)\n    try:\n        Image.fromarray(cover_array).save(output_filename, format=\"PNG\")\n    except Exception as e:\n        raise Exception(f\"Error saving the modified cover image: {e}\")\n    try:\n        add_header(output_filename, extension, data_length, output_filename)\n    except Exception as e:\n        raise Exception(f\"Error adding header to the modified cover image: {e}\")\n    \n\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/__version__.py",
            "src/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    try:\n        with open(image, \"rb\"):\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Image file not found: {image}\")\n    try:\n        header_info = get_header(image)\n        extension = header_info[\"extension\"].replace(\"\\x01\", \"_\")\n        data_length = header_info[\"data_length\"]\n    except Exception as e:\n        raise Exception(f\"Error decoding header information: {e}\")\n    try:\n        with Image.open(image, \"r\") as steg_image:\n            steg_array = np.array(steg_image)\n    except Exception as e:\n        raise Exception(f\"Error opening the stego image: {e}\")\n    width = steg_array.shape[1]\n    height = steg_array.shape[0]\n    binary_string = \"\".join(\n        [\n            f\"{steg_array[j, i][0] & 3:02b}{steg_array[j, i][1] & 3:02b}{steg_array[j, i][2] & 3:02b}\"\n            for i in range(1, width)\n            for j in range(height)\n            if data_length > 0\n        ]\n    )\n    binary_string = binary_string[:data_length]\n    if compressed:\n        try:\n            binary_string = zlib.decompress(binary_string.encode())\n        except Exception as e:\n            raise Exception(f\"Error decompressing the data: {e}\")\n        binary_string = \"\".join([f\"{byte:08b}\" for byte in binary_string])\n    if decrypt:\n        if not key:\n            raise ValueError(\"No key was given, you must give a key to decrypt the data.\")\n        try:\n            f = Fernet(key)\n            binary_string = f.decrypt(binary_string.encode())\n        except Exception as e:\n            raise Exception(f\"Error decrypting the data: {e}\")\n    output_filename = f\"Output.{extension}\"\n    if output_directory:\n        output_filename = os.path.join(output_directory, output_filename)\n    try:\n        binary_to_file(binary_string, output_filename)\n    except Exception as e:\n        raise Exception(f\"Error creating output file: {e}\")\n    if open_on_success:\n        try:\n            os.startfile(output_filename)\n        except Exception as e:\n            raise Exception(\n                f\"Error opening output file make sure you have the right program to open it: {e}\"\n            )\n    \n\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/__version__.py",
            "src/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    \"\"\"TODO\"\"\"\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    try:\n        with open(source, \"rb\"):\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Source image file not found: {source}\")\n    try:\n        with open(cover, \"rb\"):\n            pass\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Cover image file not found: {cover}\")\n    try:\n        with Image.open(source, \"r\") as source_image, Image.open(\n            cover, \"r\"\n        ) as cover_image:\n            source_array = np.array(source_image)\n            cover_array = np.array(cover_image)\n    except Exception as e:\n        raise Exception(f\"Error opening source or cover image: {e}\")\n    width = source_array.shape[1]\n    height = source_array.shape[0]\n    difference_array = np.zeros((height, width, 3), dtype=np.uint8)\n    for i in range(width):\n        for j in range(height):\n            r, g, b = source_array[j, i]\n            r2, g2, b2 = cover_array[j, i]\n            scaled_difference = (\n                np.uint8(min(255, max(0, np.int16(r2) - np.int16(r) + 128))),\n                np.uint8(min(255, max(0, np.int16(g2) - np.int16(g) + 128))),\n                np.uint8(min(255, max(0, np.int16(b2) - np.int16(b) + 128))),\n            )\n            difference_array[j, i] = scaled_difference\n    output_filename = \"Difference.png\"\n    if output_directory:\n        output_filename = os.path.join(output_directory, output_filename)\n    try:\n        Image.fromarray(difference_array).save(output_filename, format=\"PNG\")\n    except Exception as e:\n        raise Exception(f\"Error saving the difference image: {e}\")\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [
            "src/__version__.py",
            "src/utils.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `src/__version__.py`.\n\n```python\n__version__ = \"1.0.1\"\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nCurrent File Sketch/3\n---\nHere is the file sketch of `src/VanGonography.py`.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef main():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef main():\n    os.system(\"cls\" if os.name == \"nt\" else \"clear\")\n    parser = argparse.ArgumentParser(\n        description=\"Van Gonography is a steganography tool that hides files in images.\"\n    )\n    optional_group = parser.add_argument_group(\"Optional arguments\")\n    optional_group.add_argument(\n        \"-ood\",\n        dest=\"ood\",\n        action=\"store_true\",\n        default=False,\n        help=\"Open file after decoding from image (default: False)\",\n    )\n    optional_group.add_argument(\n        \"-l\",\n        \"--log\",\n        dest=\"log\",\n        action=\"store_true\",\n        default=False,\n        help=\"Log file for the program (default: False)\",\n    )\n    optional_group.add_argument(\n        \"-cli\",\n        dest=\"cli\",\n        action=\"store_true\",\n        default=False,\n        help=\"Run the program in CLI mode, this means there's not gonna be any menu (default: False)\",\n    )\n    optional_group.add_argument(\n        \"-o\",\n        \"--output\",\n        dest=\"output\",\n        type=str,\n        metavar=\"OUTPUT_DIR\",\n        help=\"Output directory for the modified image or revealed file\",\n    )\n    optional_group.add_argument(\n        \"-v\",\n        \"--version\",\n        action=\"version\",\n        version=f\"VanGonography v{__version__}\",\n        help=\"Show the version number and exit\",\n    )\n    optional_group.add_argument(\n        \"--encrypt\",\n        dest=\"encrypt\",\n        action=\"store_true\",\n        default=False,\n        help=\"Encrypt the data before hiding it (default: False)\",\n    )\n    optional_group.add_argument(\n        \"--decrypt\",\n        dest=\"decrypt\",\n        action=\"store_true\",\n        default=False,\n        help=\"Decrypt the data after revealing it (default: False)\",\n    )\n    optional_group.add_argument(\n        \"--key\",\n        dest=\"key\",\n        type=str,\n        metavar=\"KEY\",\n        help=\"Key to decrypt the data (default: None)\",\n    )\n    optional_group.add_argument(\n        \"--json\",\n        dest=\"json\",\n        type=str,\n        metavar=\"JSON_FILE\",\n        help=\"JSON file containing the arguments (default: None)\",\n    )\n    optional_group.add_argument(\n        \"--stealth\",\n        dest=\"stealth\",\n        action=\"store_true\",\n        default=False,\n        help=\"Hides the file in stealth mode (default: False)\",\n    )\n    optional_group.add_argument(\n        \"-z\",\n        \"--zip\",\n        dest=\"zip\",\n        action=\"store_true\",\n        default=False,\n        help=\"Zip or unzips the file (default: False\",\n    )\n    positional_group = parser.add_argument_group(\n        \"Positional arguments (only used in CLI mode)\"\n    )\n    positional_group.add_argument(\n        \"-s\",\n        \"--show\",\n        dest=\"show\",\n        action=\"store_true\",\n        default=False,\n        help=\"Show the difference between two images (default: False)\",\n    )\n    positional_group.add_argument(\n        \"-e\",\n        \"--encode\",\n        dest=\"encode\",\n        action=\"store_true\",\n        default=False,\n        help=\"Encode the file in the image (default: False)\",\n    )\n    positional_group.add_argument(\n        \"-d\",\n        \"--decode\",\n        dest=\"decode\",\n        action=\"store_true\",\n        default=False,\n        help=\"Decode the file hidden in the image (default: False)\",\n    )\n    positional_group.add_argument(\n        \"-c\",\n        \"--cover\",\n        dest=\"cover\",\n        type=str,\n        metavar=\"COVER_IMAGE\",\n        help=\"Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\",\n    )\n    positional_group.add_argument(\n        \"-f\",\n        \"--file\",\n        dest=\"file\",\n        type=str,\n        metavar=\"HIDDEN_FILE\",\n        help=\"File to be hidden\",\n    )\n    args = parser.parse_args()\n    if args.json:\n        with open(args.json, \"r\") as json_file:\n            json_data = json.load(json_file)\n            json_data.pop(\"desc\")\n        for key, value in json_data.items():\n            if hasattr(args, key):\n                setattr(args, key, value)\n            else:\n                print(\n                    f\"Invalid argument was passed, double check the argument name and try again: {key}\"\n                )\n                logging.error(f\"Invalid argument: {key}\")\n                return\n    if args.cli:\n        if args.log:\n            if args.log == True:\n                args.log = \"log.log\"\n            logging.basicConfig(\n                filename=args.log,\n                level=logging.DEBUG,\n                format=\"%(asctime)s - %(levelname)s - %(message)s\",\n                datefmt=\"%Y-%m-%d %H:%M:%S\",\n            )\n            logging.info(\"Logging started\")\n            logging.info(f\"Arguments: {args}\")\n        if args.cover:\n            if args.encrypt and args.decrypt:\n                print(\"You can't encrypt and decrypt at the same time, choose one.\")\n                logging.error(\n                    \"You can't encrypt and decrypt at the same time, choose one.\"\n                )\n                return\n            elif args.decrypt and not args.key:\n                print(\"You must give a key to decrypt the data.\")\n                logging.error(\n                    \"No key was given, you must give a key to decrypt the data.\"\n                )\n                return\n            if args.encode:\n                if not args.file:\n                    print(\"You must insert the file to hide\")\n                    logging.error(\"No file to hide was given\")\n                    return\n                try:\n                    logging.info(\"Encoding started\")\n                    logging.info(f\"Encoding {args.file} in {args.cover}\")\n                    encode_image(\n                        args.file, args.cover, args.output, args.encrypt, args.zip\n                    )\n                    print(f\"File hidden successfully in {args.cover}.\")\n                    logging.info(f\"File hidden successfully in {args.cover}.\")\n                except Exception as e:\n                    print(f\"An error occurred: {e}\")\n                    logging.error(f\"An error occurred: {e}\")\n            elif args.decode:\n                if args.file:\n                    print(\n                        \"You can't insert the file you must only insert the image with the hidden file and optionally the output directory.\"\n                    )\n                    logging.error(\n                        \"A file to hide was given, but you must only insert the image with the hidden file and optionally the output directory.\"\n                    )\n                try:\n                    logging.info(\"Decoding started\")\n                    logging.info(f\"Decoding {args.cover}\")\n                    decode_image(\n                        args.cover,\n                        args.output,\n                        args.ood,\n                        args.decrypt,\n                        args.key,\n                        args.zip,\n                    )\n                    print(f\"File revealed successfully from {args.cover}.\")\n                    logging.info(f\"File revealed successfully from {args.cover}.\")\n                except Exception as e:\n                    print(f\"An error occurred: {e}\")\n                    logging.error(f\"An error occurred: {e}\")\n            elif args.show:\n                if args.file:\n                    print(\n                        \"You can't insert the file to hide you must only insert the source and cover images and optionally the output directory.\"\n                    )\n                    logging.error(\n                        \"A file to hide was given, but you must only insert the source and cover images and optionally the output directory.\"\n                    )\n                try:\n                    logging.info(\"Differentiating started\")\n                    logging.info(f\"Differentiating {args.cover} and {args.file}\")\n                    differentiate_image(args.cover, args.output)\n                    print(f\"Difference image saved successfully as Difference.png.\")\n                    logging.info(\n                        f\"Difference image saved successfully as Difference.png.\"\n                    )\n                except Exception as e:\n                    print(f\"An error occurred: {e}\")\n                    logging.error(f\"An error occurred: {e}\")\n            else:\n                print(\"Invalid arguments.\")\n                logging.error(\n                    \"Invalid arguments, you must choose a mode to run the program in between encode, decode and show.\"\n                )\n        else:\n            print(\n                \"You must insert all the required arguments, no cover image was given, use -h for help.\"\n            )\n            logging.error(\n                \"No cover image was given, for checking all the arguments use -h in CLI mode.\"\n            )\n    else:\n        if (\n            args.show\n            or args.encode\n            or args.decode\n            or args.output\n            or args.cover\n            or args.file\n        ):\n            print(\"You can't use arguments in UI mode.\")\n            return\n        init(autoreset=True)\n        print(\n            \"\"\"\n                                                   ,----..                                                                              ,---,                           ,---,       ,----..       ,----..    \n           ,---.                                  /   /   \\\\                                                                 ,-.----.  ,--.' |                        ,`--.' |      /   /   \\\\     /   /   \\\\   \n          /__./|                   ,---,         |   :     :    ,---.        ,---,    ,---.               __  ,-.           \\\\    /  \\\\ |  |  :                       /    /  :     /   .     :   /   .     :  \n     ,---.;  ; |               ,-+-. /  |        .   |  ;. /   '   ,'\\\\   ,-+-. /  |  '   ,'\\\\   ,----._,.,' ,'/ /|           |   :    |:  :  :                      :    |.' '    .   /   ;.  \\\\ .   /   ;.  \\\\ \n    /___/ \\\\  | |   ,--.--.    ,--.'|'   |        .   ; /--`   /   /   | ,--.'|'   | /   /   | /   /  ' /'  | |' | ,--.--.   |   | .\\\\ ::  |  |,--.     .--,         `----':  |   .   ;   /  ` ;.   ;   /  ` ; \n    \\\\   ;  \\\\ ' |  /       \\\\  |   |  ,\"' |        ;   | ;  __ .   ; ,. :|   |  ,\"' |.   ; ,. :|   :     ||  |   ,'/       \\\\  .   : |: ||  :  '   |   /_ ./|            '   ' ;   ;   |  ; \\\\ ; |;   |  ; \\\\ ; | \n     \\\\   \\\\  \\\\: | .--.  .-. | |   | /  | |        |   : |.' .''   | |: :|   | /  | |'   | |: :|   | .\\\\  .'  :  / .--.  .-. | |   |  \\\\ :|  |   /' :, ' , ' :            |   | |   |   :  | ; | '|   :  | ; | ' \n      ;   \\\\  ' .  \\\\__\\\\/: . . |   | |  | |        .   | '_.' :'   | .; :|   | |  | |'   | .; :.   ; ';  ||  | '   \\\\__\\\\/: . . |   : .  |'  :  | | /___/ \\\\: |            '   : ;   .   |  ' ' ' :.   |  ' ' ' : \n       \\\\   \\\\   '  ,\" .--.; | |   | |  |/         '   ; : \\\\  ||   :    ||   | |  |/ |   :    |'   .   . |;  : |   ,\" .--.; | :     |`-'|  |  ' | :.  \\\\  ' |            |   | '   '   ;  \\\\; /  |'   ;  \\\\; /  | \n        \\\\   `  ; /  /  ,.  | |   | |--'          '   | '/  .' \\\\   \\\\  / |   | |--'   \\\\   \\\\  /  `---`-'| ||  , ;  /  /  ,.  | :   : :   |  :  :_:,' \\\\  ;   :            '   : | ___\\\\   \\\\  ',  /__\\\\   \\\\  ',  /  \n         :   \\\\ |;  :   .'   \\\\|   |/              |   :    /    `----'  |   |/        `----'   .'__/\\\\_: | ---'  ;  :   .'   \\\\|   | :   |  | ,'      \\\\  \\\\  ;            ;   |.'/  .\\\\;   :    /  .\\\\;   :    /   \n          '---\" |  ,     .-./'---'                \\\\   \\\\ .'             '---'                  |   :    :       |  ,     .-./`---'.|   `--''         :  \\\\  \\\\           '---'  \\\\  ; |\\\\   \\\\ .'\\\\  ; |\\\\   \\\\ .'    \n                 `--`---'                          `---`                                       \\\\   \\\\  /         `--`---'      `---`                  \\\\  ' ;                   `--\"  `---`   `--\"  `---`      \n                                                                                                `--`-'                                                `--`                                                   \n                \"\"\"\n        )\n        print()\n        print(Fore.YELLOW + \"Version 1.0.0\")\n        print(\"Welcome to VanGonography! Please select an option:\")\n        print()\n        print(Fore.LIGHTRED_EX + \"[1] \" + Fore.WHITE + \"Hide a file in an image\")\n        print(\n            Fore.LIGHTRED_EX + \"[2] \" + Fore.WHITE + \"Reveal a hidden file in an image\"\n        )\n        print(\n            Fore.LIGHTRED_EX\n            + \"[3] \"\n            + Fore.WHITE\n            + \"Show the difference between two images\"\n        )\n        print(Fore.LIGHTRED_EX + \"[4] \" + Fore.WHITE + \"Exit\")\n        print()\n        while True:\n            choice = input(\"Enter your choice: \")\n            if choice == \"1\":\n                try:\n                    root = Tk()\n                    root.withdraw()\n                    file = filedialog.askopenfilename(title=\"Select file to hide\")\n                    if not file:\n                        print(\"File selection canceled.\")\n                    root = Tk()\n                    root.withdraw()\n                    image = filedialog.askopenfilename(title=\"Select cover image\")\n                    if not image:\n                        print(\"Image selection canceled.\")\n                    if not is_image_file(image):\n                        print(\"Selected cover image is not a valid image file.\")\n                    root = Tk()\n                    root.withdraw()\n                    output_directory = filedialog.askdirectory(\n                        title=\"Select output directory\"\n                    )\n                    if not output_directory:\n                        print(\"Output directory selection canceled.\")\n                    if not os.path.isdir(output_directory):\n                        print(\"Selected output directory is not a valid directory.\")\n                    encode_image(file, image, output_directory)\n                except Exception as e:\n                    print(f\"An error occurred: {e}\")\n            elif choice == \"2\":\n                try:\n                    root = Tk()\n                    root.withdraw()\n                    image = filedialog.askopenfilename(\n                        title=\"Select image with hidden file\"\n                    )\n                    if not image:\n                        print(\"Image selection canceled.\")\n                    if not is_image_file(image):\n                        print(\"Selected image is not a valid image file.\")\n                    root = Tk()\n                    root.withdraw()\n                    output_directory = filedialog.askdirectory(\n                        title=\"Select output directory\"\n                    )\n                    if not output_directory:\n                        print(\"Output directory selection canceled.\")\n                    if not os.path.isdir(output_directory):\n                        print(\"Selected output directory is not a valid directory.\")\n                    decode_image(image, output_directory)\n                except Exception as e:\n                    print(f\"An error occurred: {e}\")\n            elif choice == \"3\":\n                try:\n                    root = Tk()\n                    root.withdraw()\n                    source = filedialog.askopenfilename(title=\"Select source image\")\n                    if not source:\n                        print(\"Source image selection canceled.\")\n                    if not is_image_file(source):\n                        print(\"Selected source image is not a valid image file.\")\n                    root = Tk()\n                    root.withdraw()\n                    cover = filedialog.askopenfilename(title=\"Select cover image\")\n                    if not cover:\n                        print(\"Cover image selection canceled.\")\n                    if not is_image_file(cover):\n                        print(\"Selected cover image is not a valid image file.\")\n                    root = Tk()\n                    root.withdraw()\n                    output_directory = filedialog.askdirectory(\n                        title=\"Select output directory\"\n                    )\n                    if not output_directory:\n                        print(\"Output directory selection canceled.\")\n                    if not os.path.isdir(output_directory):\n                        print(\"Selected output directory is not a valid directory.\")\n                    differentiate_image(source, cover, output_directory)\n                except Exception as e:\n                    print(f\"An error occurred: {e}\")\n            elif choice == \"4\":\n                print(\"Exiting...\")\n                return\n            else:\n                print(\"Invalid choice.\")\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    \"\"\"TODO\"\"\"\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```",
        "current_file_path": "src/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    \"\"\"TODO\"\"\"\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nFunction Complement\n---\ndef get_file_size(file_path: str) -> int:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_file_size(file_path: str) -> int:\n    size = os.path.getsize(file_path)\n    return size * 8\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```",
        "current_file_path": "src/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nFunction Complement\n---\ndef binary_to_text(binary: str) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef binary_to_text(binary: str) -> str:\n    text = \"\".join([chr(int(binary[i : i + 8], 2)) for i in range(0, len(binary), 8)])\n    return text\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```",
        "current_file_path": "src/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    \"\"\"TODO\"\"\"\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nFunction Complement\n---\ndef text_to_binary(text: str) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef text_to_binary(text: str) -> str:\n    binary = \"\".join([format(ord(char), \"08b\") for char in text])\n    return binary\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    \"\"\"TODO\"\"\"\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```",
        "current_file_path": "src/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    \"\"\"TODO\"\"\"\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```\n\n---\nFunction Complement\n---\ndef binary_to_file(binary_string, filename):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef binary_to_file(binary_string, filename):\n    byte_array = bytearray(\n        int(binary_string[i : i + 8], 2) for i in range(0, len(binary_string), 8)\n    )\n    with open(filename, \"wb\") as f:\n        f.write(byte_array)\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/utils.py`.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef is_image_file(filename):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef is_image_file(filename):\n    try:\n        with Image.open(filename):\n            return True\n    except:\n        return False\n```"
    }
]