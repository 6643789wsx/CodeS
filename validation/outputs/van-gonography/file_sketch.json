[
    {
        "readme": "#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "src/VanGonography.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/VanGonography.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport argparse\nimport io\nimport json\nimport logging\nimport os\nimport sys\nimport zlib\nfrom tkinter import Tk, filedialog\nimport numpy as np\nfrom __version__ import __version__\nfrom colorama import Fore, init\nfrom cryptography.fernet import Fernet\nfrom PIL import Image\nfrom utils import *\n\nSINGLE_RGB_BIT_SIZE = 8\nSINGLE_RGB_PIXEL_BIT_SIZE = SINGLE_RGB_BIT_SIZE * 3\n\n\ndef add_header(\n    image: str, extension: str, data_length: int, output_directory: str = \"\"\n) -> None:\n    \"\"\"\n    Adds a header to the cover image before hiding data.\n\n    Parameters:\n    - image (str): Path to the cover image.\n    - extension (str): File extension to be hidden.\n    - data_length (int): Length of the data to be hidden.\n\n    Returns:\n    None\n    \"\"\"\n    pass\n\n\ndef get_header(image: str) -> dict:\n    pass\n\n\ndef encode_image(\n    file: str,\n    image: str,\n    output_directory: str = \"\",\n    encrypt: bool = False,\n    compress=False,\n) -> None:\n    pass\n\n\ndef decode_image(\n    image,\n    output_directory: str = \"\",\n    open_on_success: bool = False,\n    decrypt: bool = False,\n    key: str = \"\",\n    compressed=False,\n) -> None:\n    pass\n\n\ndef differentiate_image(source, cover, output_directory: str = \"\") -> None:\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "src/__main__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/__main__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport sys\n\nif __name__ == \"__main__\":\n    if sys.version_info < (3, 6):\n        sys.exit(\"vangonography requires Python 3.6 or higher\")\n    try:\n        import vangonography\n\n        vangonography.main()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "src/__version__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/__version__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n__version__ = \"1.0.1\"\n```"
    },
    {
        "readme": "#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "src/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n#### Hide any type of files inside a image of your choice\n\n# Features\n\n- **File Hiding:** Hide any type of file within an image of your choice, without altering the image's visual appearance.\n- **Decoding Capability:** Decode hidden files from images.\n- **Image Comparison:** Visualize the difference between two images.\n- **Detailed Logging:** Create a log file that records comprehensive information about the program's execution.\n- **Command-Line Interface (CLI):** Offers a developer-friendly mode with command-line options for more advanced usage.\n- **User Interface (UI):** Provides an intuitive and easy-to-use mode for non-developers.\n- **Open After Decoding:** Automatically open the decoded file after extracting it from the image.\n- **Cross-Platform:** Works on Windows, Linux, and macOS.\n- **Free and Open-Source:** Van Gonography is completely free and open-source, and will always be.\n- **Encryption:** Encrypt the hidden file with a password of your choice *(coming soon)*.\n- **Compression:** Compress the hidden file to reduce its size *(coming soon)*.\n- **Multiple Files:** Hide multiple files inside an image *(coming soon)*.\n- **Stealth Mode:** Hide the fact that the image contains a hidden file *(coming soon)*.\n- **User settings:** Save your preferences for future use.\n\n# How it works\n\n**The Basics of Digital Storage**\n\nEverything on your computer, from `.exe` files to `.jpg` images, is stored as bits. Bits are just 1s and 0s. For instance:\n- The letter `A` = `01000001`\n- The letter `B` = `01000010`\n\nSo, a 1-gigabyte file is really 8,5 billion 1s and 0s all lined up in a row. This is called [binary](https://en.wikipedia.org/wiki/Binary_code) and is the basis of all digital storage.\n\n**Pixels and Colors**\n\nImages consist of pixels. Each pixel's color comes from the [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (Red, Green, Blue) format. Each RGB channel ranges from 0 to 255, allowing for 256 values. This range is equivalent to 8 bits (2^8 = 256), so each channel can be represented by 1 byte.\n\nExample: A red pixel is `(0xFF, 0x00, 0x00)` or in bits `11111111 00000000 00000000`.\n\n**Hiding a File in an Image**\n\nHiding file inside a image is actually simpler than it sounds. All we need to do is:\n1. Convert the file (in our case what we want to hide) to bits.\n2. Replace _some_ bits in the image's pixels with the file's bits.\n\nFor example, if we take the first 2 bits from a file and replace them in a pixel's channel, a red pixel `(11111111 00000000 00000000)` can change to `(11111111 00000000 00000011)` without a visible difference.\n\nRepeat this process for each pixel and every bit in the file, and voil\u00e0, the file is hidden in the image!\n\n**Try it Yourself**\n\nCheck out the provided Python repository for an easy-to-understand implementation of this process.\n\n# Usage\n\nFor running the program in the UI mode (simpler and easier to use but also less useful for developers) just run the following command:\n\n```bash\npython vangonography.py\n```\n\nFor running the program in the CLI mode (more complicated but with a bit more functionalities) just run the following command:\n```bash\npython vangonography.py -cli\n```\nYou can then use the following arguments along with it:\n```console\nusage: vangonography.py [-h] [-ood] [-l] [-cli] [-o OUTPUT_DIR] [-v] [--encrypt] [--decrypt] [--key KEY] [--json JSON_FILE] [--stealth] [-s] [-e] [-d] [-c COVER_IMAGE]\n                        [-f HIDDEN_FILE]\n\nVan Gonography is a steganography tool that hides files in images.\n\noptions:\n  -h, --help            show this help message and exit\n\nOptional arguments:\n  -ood                  Open file after decoding from image (default: False)\n  -l, --log             Log file for the program (default: False)\n  -cli                  Run the program in CLI mode, this means there's not gonna be any menu (default: False)\n  -o OUTPUT_DIR, --output OUTPUT_DIR\n                        Output directory for the modified image or revealed file\n  -v, --version         Show the version number and exit\n  --encrypt             Encrypt the data before hiding it (default: False)\n  --decrypt             Decrypt the data after revealing it (default: False)\n  --key KEY             Key to decrypt the data (default: None)\n  --json JSON_FILE      JSON file containing the arguments (default: None)\n  --stealth             Hides the file in stealth mode (default: False)\n\nPositional arguments (only used in CLI mode):\n  -s, --show            Show the difference between two images (default: False)\n  -e, --encode          Encode the file in the image (default: False)\n  -d, --decode          Decode the file hidden in the image (default: False)\n  -c COVER_IMAGE, --cover COVER_IMAGE\n                        Image to be used for hiding or revealing, positional only when using decoding, encoding or differentiate\n  -f HIDDEN_FILE, --file HIDDEN_FILE\n                        File to be hidden\n```\nFor example, if you want to hide a file called `secret.txt` inside an image called `image.png` and you want to save the modified image in a folder called `output` you would run the following command:\n```bash\npython vangonography.py -cli -e -c [Absolute path to your `image.png` cover image] -f [Absolute path to your `secret.txt` file] -o Output\n```\nThis will create a directory called `Output` in the same directory as the program and inside it will be a file called `Cover_txt.png` which will be the modified image with the hidden file inside it. If you want to decode the file from the image you would run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output\n```\nIf you also want to create a log.log file with all the information about the program you can run the following command:\n```bash\npython vangonography.py -cli -d -c [Absolute path (or not) to your `Cover_txt.png` cover image] -o Output -l\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 VanGonography.py # from __version__ import __version__; from utils import *;\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 __version__.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsrc/utils.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport os\nfrom PIL import Image\n\n\ndef get_file_size(file_path: str) -> int:\n    pass\n\n\ndef binary_to_text(binary: str) -> str:\n    pass\n\n\ndef text_to_binary(text: str) -> str:\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef binary_to_file(binary_string, filename):\n    pass\n\n\ndef binary_to_int(binary: str) -> int:\n    pass\n\n\ndef is_image_file(filename):\n    pass\n```"
    }
]