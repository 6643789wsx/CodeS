[
    {
        "readme": "# EVM Inscription\n\n## Overview\n`EVM_inscription` is a Python script tailored for the efficient batch creation of inscriptions on Ethereum Virtual Machine (EVM)-compatible blockchains. It streamlines the process of connecting to various blockchain networks and automates the submission of multiple transactions.\n\n## Features\n- **Multiple Blockchain Support**: Compatible with several EVM blockchains like Ethereum, Binance Smart Chain, and Polygon.\n- **Dynamic Configuration**: Customize the number of inscriptions, transaction data, and gas pricing.\n- **Secure Private Key Handling**: Ensures the safe usage of your private key without hardcoding it in the script.\n- **User-Friendly**: Simple setup and execution process.\n\n## Prerequisites\nBefore using this script, make sure you have Python installed on your system. You can download it from [here](https://www.python.org/downloads/).\n\n## Setup\n1. **Private Key**: For security reasons, do not hardcode your private key in the script. Instead, use an environment variable or a secure key management system.\n2. **RPC URL**: Choose the appropriate RPC URL for the blockchain you intend to interact with.\n3. **Configuration**:\n   - `no_to_mint`: Set the number of inscriptions you wish to create.\n   - `hex_data`: Provide the hexadecimal data for the inscription.\n   - `price_factor`: Adjust the gas price factor according to network conditions.\n\n## Usage\n1. Open the script and enter the required configuration parameters.\n2. Run the script from your terminal:\n   ```\n   python evm_inscription.py\n   ```",
        "repo_sketch": ".\n\u251c\u2500\u2500 EVM_inscription.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 batch_inscription.py\n\u2514\u2500\u2500 wallet_generator.py",
        "file_path": "EVM_inscription.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EVM Inscription\n\n## Overview\n`EVM_inscription` is a Python script tailored for the efficient batch creation of inscriptions on Ethereum Virtual Machine (EVM)-compatible blockchains. It streamlines the process of connecting to various blockchain networks and automates the submission of multiple transactions.\n\n## Features\n- **Multiple Blockchain Support**: Compatible with several EVM blockchains like Ethereum, Binance Smart Chain, and Polygon.\n- **Dynamic Configuration**: Customize the number of inscriptions, transaction data, and gas pricing.\n- **Secure Private Key Handling**: Ensures the safe usage of your private key without hardcoding it in the script.\n- **User-Friendly**: Simple setup and execution process.\n\n## Prerequisites\nBefore using this script, make sure you have Python installed on your system. You can download it from [here](https://www.python.org/downloads/).\n\n## Setup\n1. **Private Key**: For security reasons, do not hardcode your private key in the script. Instead, use an environment variable or a secure key management system.\n2. **RPC URL**: Choose the appropriate RPC URL for the blockchain you intend to interact with.\n3. **Configuration**:\n   - `no_to_mint`: Set the number of inscriptions you wish to create.\n   - `hex_data`: Provide the hexadecimal data for the inscription.\n   - `price_factor`: Adjust the gas price factor according to network conditions.\n\n## Usage\n1. Open the script and enter the required configuration parameters.\n2. Run the script from your terminal:\n   ```\n   python evm_inscription.py\n   ```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 EVM_inscription.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 batch_inscription.py\n\u2514\u2500\u2500 wallet_generator.py\n```\n\n---\nFile Path\n---\nEVM_inscription.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom hexbytes import HexBytes\nfrom web3 import Web3\n\nprivate_key = \"\"\nrpc_link = \"https://polygon-mainnet.g.alchemy.com/v2/hrLvjZ3LRWuPItG9LuYsZQcRU_XtvRmX\"\nno_to_mint = 3\nhex_data = \"93c8ac01bae28307f2c017c134998e92951a66c80c1ad30f8125390c46476eaa\"\nprice_factor = 1\nw3 = Web3(Web3.HTTPProvider(rpc_link))\nif not w3.is_connected():\n    raise ConnectionError(\"Failed to connect to node\")\nfor i in range(no_to_mint):\n    print(f\"The inscription being engraved is: {i + 1}\")\n    sender_account = w3.eth.account.from_key(private_key)\n    sender_address = sender_account.address\n    chain_id = w3.eth.chain_id\n    gas_price = w3.eth.gas_price\n    transaction = {\n        \"to\": sender_address,\n        \"value\": 0,\n        \"gas\": 100000,\n        \"gasPrice\": int(gas_price * price_factor),\n        \"nonce\": w3.eth.get_transaction_count(sender_address),\n        \"data\": hex_data,\n        \"chainId\": chain_id,\n    }\n    signed_txn = w3.eth.account.sign_transaction(transaction, private_key)\n    txn_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)\n    txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash)\n    tx_hash = txn_receipt.transactionHash.hex()\n    print(f\"The inscription {i + 1} is completed, transaction hash is {tx_hash}.\")\n```"
    },
    {
        "readme": "# EVM Inscription\n\n## Overview\n`EVM_inscription` is a Python script tailored for the efficient batch creation of inscriptions on Ethereum Virtual Machine (EVM)-compatible blockchains. It streamlines the process of connecting to various blockchain networks and automates the submission of multiple transactions.\n\n## Features\n- **Multiple Blockchain Support**: Compatible with several EVM blockchains like Ethereum, Binance Smart Chain, and Polygon.\n- **Dynamic Configuration**: Customize the number of inscriptions, transaction data, and gas pricing.\n- **Secure Private Key Handling**: Ensures the safe usage of your private key without hardcoding it in the script.\n- **User-Friendly**: Simple setup and execution process.\n\n## Prerequisites\nBefore using this script, make sure you have Python installed on your system. You can download it from [here](https://www.python.org/downloads/).\n\n## Setup\n1. **Private Key**: For security reasons, do not hardcode your private key in the script. Instead, use an environment variable or a secure key management system.\n2. **RPC URL**: Choose the appropriate RPC URL for the blockchain you intend to interact with.\n3. **Configuration**:\n   - `no_to_mint`: Set the number of inscriptions you wish to create.\n   - `hex_data`: Provide the hexadecimal data for the inscription.\n   - `price_factor`: Adjust the gas price factor according to network conditions.\n\n## Usage\n1. Open the script and enter the required configuration parameters.\n2. Run the script from your terminal:\n   ```\n   python evm_inscription.py\n   ```",
        "repo_sketch": ".\n\u251c\u2500\u2500 EVM_inscription.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 batch_inscription.py\n\u2514\u2500\u2500 wallet_generator.py",
        "file_path": "batch_inscription.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EVM Inscription\n\n## Overview\n`EVM_inscription` is a Python script tailored for the efficient batch creation of inscriptions on Ethereum Virtual Machine (EVM)-compatible blockchains. It streamlines the process of connecting to various blockchain networks and automates the submission of multiple transactions.\n\n## Features\n- **Multiple Blockchain Support**: Compatible with several EVM blockchains like Ethereum, Binance Smart Chain, and Polygon.\n- **Dynamic Configuration**: Customize the number of inscriptions, transaction data, and gas pricing.\n- **Secure Private Key Handling**: Ensures the safe usage of your private key without hardcoding it in the script.\n- **User-Friendly**: Simple setup and execution process.\n\n## Prerequisites\nBefore using this script, make sure you have Python installed on your system. You can download it from [here](https://www.python.org/downloads/).\n\n## Setup\n1. **Private Key**: For security reasons, do not hardcode your private key in the script. Instead, use an environment variable or a secure key management system.\n2. **RPC URL**: Choose the appropriate RPC URL for the blockchain you intend to interact with.\n3. **Configuration**:\n   - `no_to_mint`: Set the number of inscriptions you wish to create.\n   - `hex_data`: Provide the hexadecimal data for the inscription.\n   - `price_factor`: Adjust the gas price factor according to network conditions.\n\n## Usage\n1. Open the script and enter the required configuration parameters.\n2. Run the script from your terminal:\n   ```\n   python evm_inscription.py\n   ```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 EVM_inscription.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 batch_inscription.py\n\u2514\u2500\u2500 wallet_generator.py\n```\n\n---\nFile Path\n---\nbatch_inscription.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport time\nfrom hexbytes import HexBytes\nfrom web3 import Web3\n\nprivate_key = \"\"\nrpc_link = \"https://rpc-1.bevm.io\"\nno_to_mint = 10\nrepeat_times = 5\nhex_data = \"\"\nprice_factor = 1.1\nw3 = Web3(Web3.HTTPProvider(rpc_link))\nif not w3.is_connected():\n    raise ConnectionError(\"Failed to connect to node\")\nsender_account = w3.eth.account.from_key(private_key)\nsender_address = sender_account.address\nchain_id = w3.eth.chain_id\ninitial_nonce = w3.eth.get_transaction_count(sender_address)\nprint(f\"starting nonce is {initial_nonce}\")\nfor i in range(repeat_times):\n    try:\n        print(f\"Repeating time: {i + 1}\")\n        gas_price = w3.eth.gas_price\n        start_nonce = w3.eth.get_transaction_count(sender_address)\n        if i != 0 and start_nonce != last_nonce:\n            gas_price = max(\n                int(gas_price * price_factor), int(last_gas_price * price_factor)\n            )\n        print(f\"{start_nonce - initial_nonce} inscriptions have been inscribed.\")\n        for j in range(no_to_mint):\n            nonce = start_nonce + j\n            transaction = {\n                \"to\": sender_address,\n                \"value\": 0,\n                \"gas\": 23000,\n                \"gasPrice\": gas_price,\n                \"nonce\": nonce,\n                \"data\": hex_data,\n                \"chainId\": chain_id,\n            }\n            signed_txn = w3.eth.account.sign_transaction(transaction, private_key)\n            txn_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)\n            print(f\"txn_hash: {txn_hash.hex()}, nonce: {nonce}\")\n    except Exception as e:\n        print(e)\n    last_nonce = start_nonce + no_to_mint\n    last_block = w3.eth.get_block_number()\n    last_gas_price = gas_price\n    while last_block == w3.eth.get_block_number():\n        time.sleep(3)\n```"
    },
    {
        "readme": "# EVM Inscription\n\n## Overview\n`EVM_inscription` is a Python script tailored for the efficient batch creation of inscriptions on Ethereum Virtual Machine (EVM)-compatible blockchains. It streamlines the process of connecting to various blockchain networks and automates the submission of multiple transactions.\n\n## Features\n- **Multiple Blockchain Support**: Compatible with several EVM blockchains like Ethereum, Binance Smart Chain, and Polygon.\n- **Dynamic Configuration**: Customize the number of inscriptions, transaction data, and gas pricing.\n- **Secure Private Key Handling**: Ensures the safe usage of your private key without hardcoding it in the script.\n- **User-Friendly**: Simple setup and execution process.\n\n## Prerequisites\nBefore using this script, make sure you have Python installed on your system. You can download it from [here](https://www.python.org/downloads/).\n\n## Setup\n1. **Private Key**: For security reasons, do not hardcode your private key in the script. Instead, use an environment variable or a secure key management system.\n2. **RPC URL**: Choose the appropriate RPC URL for the blockchain you intend to interact with.\n3. **Configuration**:\n   - `no_to_mint`: Set the number of inscriptions you wish to create.\n   - `hex_data`: Provide the hexadecimal data for the inscription.\n   - `price_factor`: Adjust the gas price factor according to network conditions.\n\n## Usage\n1. Open the script and enter the required configuration parameters.\n2. Run the script from your terminal:\n   ```\n   python evm_inscription.py\n   ```",
        "repo_sketch": ".\n\u251c\u2500\u2500 EVM_inscription.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 batch_inscription.py\n\u2514\u2500\u2500 wallet_generator.py",
        "file_path": "wallet_generator.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EVM Inscription\n\n## Overview\n`EVM_inscription` is a Python script tailored for the efficient batch creation of inscriptions on Ethereum Virtual Machine (EVM)-compatible blockchains. It streamlines the process of connecting to various blockchain networks and automates the submission of multiple transactions.\n\n## Features\n- **Multiple Blockchain Support**: Compatible with several EVM blockchains like Ethereum, Binance Smart Chain, and Polygon.\n- **Dynamic Configuration**: Customize the number of inscriptions, transaction data, and gas pricing.\n- **Secure Private Key Handling**: Ensures the safe usage of your private key without hardcoding it in the script.\n- **User-Friendly**: Simple setup and execution process.\n\n## Prerequisites\nBefore using this script, make sure you have Python installed on your system. You can download it from [here](https://www.python.org/downloads/).\n\n## Setup\n1. **Private Key**: For security reasons, do not hardcode your private key in the script. Instead, use an environment variable or a secure key management system.\n2. **RPC URL**: Choose the appropriate RPC URL for the blockchain you intend to interact with.\n3. **Configuration**:\n   - `no_to_mint`: Set the number of inscriptions you wish to create.\n   - `hex_data`: Provide the hexadecimal data for the inscription.\n   - `price_factor`: Adjust the gas price factor according to network conditions.\n\n## Usage\n1. Open the script and enter the required configuration parameters.\n2. Run the script from your terminal:\n   ```\n   python evm_inscription.py\n   ```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 EVM_inscription.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 batch_inscription.py\n\u2514\u2500\u2500 wallet_generator.py\n```\n\n---\nFile Path\n---\nwallet_generator.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport os\nfrom web3 import Web3\n\n\ndef generate_wallets(num_wallets, file_path):\n    pass\n\n\nif __name__ == \"__main__\":\n    num_wallets_to_generate = 10\n    output_file_path = \"wallets.txt\"\n    generate_wallets(num_wallets_to_generate, output_file_path)\n```"
    }
]