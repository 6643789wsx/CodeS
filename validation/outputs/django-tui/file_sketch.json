[
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n## Features\n\n- Run Django commands in a text-based user interface (TUI)\n- Inspect Django configs, models, and more\n\n## Installation\n\n```console\npip install django-tui\n```\n\nAdd `\"django_tui\"` to your `INSTALLED_APPS` setting in `settings.py` like this:\n\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_tui\",\n]\n```\n\nNow you can run the TUI with:\n\n```console\npython manage.py tui\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "file_path": "src/django_tui/__about__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n## Features\n\n- Run Django commands in a text-based user interface (TUI)\n- Inspect Django configs, models, and more\n\n## Installation\n\n```console\npip install django-tui\n```\n\nAdd `\"django_tui\"` to your `INSTALLED_APPS` setting in `settings.py` like this:\n\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_tui\",\n]\n```\n\nNow you can run the TUI with:\n\n```console\npython manage.py tui\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nFile Path\n---\nsrc/django_tui/__about__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n__version__ = \"23.9\"\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n## Features\n\n- Run Django commands in a text-based user interface (TUI)\n- Inspect Django configs, models, and more\n\n## Installation\n\n```console\npip install django-tui\n```\n\nAdd `\"django_tui\"` to your `INSTALLED_APPS` setting in `settings.py` like this:\n\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_tui\",\n]\n```\n\nNow you can run the TUI with:\n\n```console\npython manage.py tui\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n## Features\n\n- Run Django commands in a text-based user interface (TUI)\n- Inspect Django configs, models, and more\n\n## Installation\n\n```console\npip install django-tui\n```\n\nAdd `\"django_tui\"` to your `INSTALLED_APPS` setting in `settings.py` like this:\n\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_tui\",\n]\n```\n\nNow you can run the TUI with:\n\n```console\npython manage.py tui\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nFile Path\n---\nsrc/django_tui/management/commands/ish.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n## Features\n\n- Run Django commands in a text-based user interface (TUI)\n- Inspect Django configs, models, and more\n\n## Installation\n\n```console\npip install django-tui\n```\n\nAdd `\"django_tui\"` to your `INSTALLED_APPS` setting in `settings.py` like this:\n\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_tui\",\n]\n```\n\nNow you can run the TUI with:\n\n```console\npython manage.py tui\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n## Features\n\n- Run Django commands in a text-based user interface (TUI)\n- Inspect Django configs, models, and more\n\n## Installation\n\n```console\npip install django-tui\n```\n\nAdd `\"django_tui\"` to your `INSTALLED_APPS` setting in `settings.py` like this:\n\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_tui\",\n]\n```\n\nNow you can run the TUI with:\n\n```console\npython manage.py tui\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nFile Path\n---\nsrc/django_tui/management/commands/tui.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```"
    }
]