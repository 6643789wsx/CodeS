[
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef get_modules():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    mods = {}\n    for module_name, symbols in DEFAULT_IMPORT.items():\n        try:\n            module = importlib.import_module(module_name)\n        except ImportError as e:\n            warnings.warn(\n                \"django_admin_shell - autoimport warning :: {msg}\".format(msg=str(e)),\n                ImportWarning,\n            )\n            continue\n        mods[module_name] = []\n        for symbol_name in symbols:\n            if hasattr(module, symbol_name):\n                mods[module_name].append(symbol_name)\n            else:\n                warnings.warn(\n                    \"django_admin_shell - autoimport warning :: AttributeError module '{mod}' has no attribute '{attr}'\".format(\n                        mod=module_name, attr=symbol_name\n                    ),\n                    ImportWarning,\n                )\n    for model_class in apps.get_models():\n        _mod = model_class.__module__\n        classes = mods.get(_mod, [])\n        classes.append(model_class.__name__)\n        mods[_mod] = classes\n    return mods\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef get_scope():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    scope = {}\n    for module_name, symbols in get_modules().items():\n        module = importlib.import_module(module_name)\n        for symbol_name in symbols:\n            scope[symbol_name] = getattr(module, symbol_name)\n    return scope\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    \"\"\"TODO\"\"\"\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    \"\"\"TODO\"\"\"\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef import_str():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef import_str():\n    buf = []\n    for module, symbols in get_modules().items():\n        if symbols:\n            buf.append(f\"from {module} import {', '.join(symbols)}\")\n    return \"\\n\".join(buf)\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    \"\"\"TODO\"\"\"\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef run_code(code):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    status = \"success\"\n    out = \"\"\n    tmp_stdout = sys.stdout\n    buf = StringIO()\n    try:\n        sys.stdout = buf\n        exec(code, None, get_scope())\n    except Exception:\n        out = traceback.format_exc()\n        status = \"error\"\n    else:\n        out = buf.getvalue()\n    finally:\n        sys.stdout = tmp_stdout\n    result = {\"code\": code, \"out\": out, \"status\": status}\n    return result\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        \"\"\"TODO\"\"\"\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        \"\"\"TODO\"\"\"\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _on_key(self, event: events.Key) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _on_key(self, event: events.Key) -> None:\n    if event.character == \"(\":\n        self.insert(\"()\")\n        self.move_cursor_relative(columns=-1)\n        event.prevent_default()\n    if event.character == \"[\":\n        self.insert(\"[]\")\n        self.move_cursor_relative(columns=-1)\n        event.prevent_default()\n    if event.character == \"{\":\n        self.insert(\"{}\")\n        self.move_cursor_relative(columns=-1)\n        event.prevent_default()\n    if event.character == '\"':\n        self.insert('\"\"')\n        self.move_cursor_relative(columns=-1)\n        event.prevent_default()\n    if event.character == \"'\":\n        self.insert(\"''\")\n        self.move_cursor_relative(columns=-1)\n        event.prevent_default()\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_default_imports(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_default_imports(self) -> None:\n    self.app.push_screen(DefaultImportsInfo(import_str()))\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_run_code(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_run_code(self) -> None:\n    self.input_tarea.selection = Selection(\n        start=(0, 0), end=self.input_tarea.cursor_location\n    )\n    self.input_tarea.action_cursor_line_end()\n    code = self.input_tarea.get_text_range(\n        start=(0, 0), end=self.input_tarea.cursor_location\n    )\n    if len(code) > 0:\n        os.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\n        django.setup()\n        result = run_code(code)\n        self.output_tarea.load_text(result[\"out\"])\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_copy_command(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_copy_command(self) -> None:\n    if sys.platform == \"win32\":\n        copy_command = [\"clip\"]\n    elif sys.platform == \"darwin\":\n        copy_command = [\"pbcopy\"]\n    else:\n        copy_command = [\"xclip\", \"-selection\", \"clipboard\"]\n    try:\n        text_to_copy = self.input_tarea.selected_text\n        run(copy_command, input=text_to_copy, text=True, check=False)\n        self.notify(\"Selction copied to clipboard.\")\n    except FileNotFoundError:\n        self.notify(\n            f\"Could not copy to clipboard. `{copy_command[0]}` not found.\",\n            severity=\"error\",\n        )\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        \"\"\"TODO\"\"\"\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        \"\"\"TODO\"\"\"\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n    [first, last] = sorted(\n        [self.input_tarea.selection.start, self.input_tarea.selection.end]\n    )\n    lines = [\n        self.input_tarea.document.get_line(i) for i in range(first[0], last[0] + 1)\n    ]\n    return lines, first, last\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_editor_keys(self) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_editor_keys(self) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_toggle_comment(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_toggle_comment(self) -> None:\n    inline_comment_marker = \"#\"\n    if inline_comment_marker:\n        lines, first, last = self._get_selected_lines()\n        stripped_lines = [line.lstrip() for line in lines]\n        indents = [(len(line) - len(line.lstrip())) for line in lines]\n        if lines and all(\n            not line or line.startswith(inline_comment_marker)\n            for line in stripped_lines\n        ):\n            offsets = [\n                (\n                    0\n                    if not line\n                    else 2\n                    if line[len(inline_comment_marker)].isspace()\n                    else 1\n                )\n                for line in stripped_lines\n            ]\n            for lno, indent, offset in zip(\n                range(first[0], last[0] + 1), indents, offsets\n            ):\n                self.input_tarea.delete(\n                    start=(lno, indent),\n                    end=(lno, indent + offset),\n                    maintain_selection_offset=True,\n                )\n        else:\n            indent = min(\n                [indent for indent, line in zip(indents, stripped_lines) if line]\n            )\n            for lno, stripped_line in enumerate(stripped_lines, start=first[0]):\n                if stripped_line:\n                    self.input_tarea.insert(\n                        f\"{inline_comment_marker} \",\n                        location=(lno, indent),\n                        maintain_selection_offset=True,\n                    )\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/django_tui/management/commands/ish.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/ish.py`.\n\n```python\nfrom __future__ import annotations\nimport importlib\nimport os\nimport platform\nimport sys\nimport traceback\nimport warnings\nfrom functools import lru_cache\nfrom io import StringIO\nfrom subprocess import run\nfrom typing import List, Tuple\nimport django\nfrom django.apps import apps\nfrom rich.syntax import Syntax\nfrom textual import events\nfrom textual.app import ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import HorizontalScroll, Vertical, VerticalScroll\nfrom textual.screen import ModalScreen, Screen\nfrom textual.widgets import Footer, Label, MarkdownViewer, TextArea\nfrom textual.widgets.text_area import Location, Selection\n\nDEFAULT_IMPORT = {\n    \"rich\": [\"print_json\", \"print\"],\n    \"django.db.models\": [\n        \"Avg\",\n        \"Case\",\n        \"Count\",\n        \"F\",\n        \"Max\",\n        \"Min\",\n        \"Prefetch\",\n        \"Q\",\n        \"Sum\",\n        \"When\",\n    ],\n    \"django.conf\": [\"settings\"],\n    \"django.core.cache\": [\"cache\"],\n    \"django.contrib.auth\": [\"get_user_model\"],\n    \"django.utils\": [\"timezone\"],\n    \"django.urls\": [\"reverse\"],\n}\n\n\n@lru_cache\ndef get_modules():\n    \"\"\"\n    Return list of modules and symbols to import\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef get_scope():\n    \"\"\"\n    Return map with symbols to module/object\n    Like:\n    \"reverse\" -> \"django.urls.reverse\"\n    \"\"\"\n    pass\n\n\n@lru_cache\ndef import_str():\n    pass\n\n\ndef run_code(code):\n    \"\"\"\n    Execute code and return result with status = success|error\n    Function manipulate stdout to grab output from exec\n    \"\"\"\n    pass\n\n\nclass ExtendedTextArea(TextArea):\n    \"\"\"A subclass of TextArea with parenthesis-closing functionality.\"\"\"\n\n    def _on_key(self, event: events.Key) -> None:\n        pass\n\n\nclass TextEditorBindingsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"\", show=False)]\n    DEFAULT_CSS = \"\"\"\n    TextEditorBindingsInfo {\n        align: center middle;\n    }\n\"\"\"\n    key_bindings = \"\"\"\nText Editor Key Bindings List\n| Key(s)           | Description                                          |\n|------------------|------------------------------------------------------|\n| escape           | Focus on the next item.                              |\n| up               | Move the cursor up.                                  |\n| down             | Move the cursor down.                                |\n| left             | Move the cursor left.                                |\n| ctrl+left        | Move the cursor to the start of the word.            |\n| ctrl+shift+left  | Move the cursor to the start of the word and select. |\n| right            | Move the cursor right.                               |\n| ctrl+right       | Move the cursor to the end of the word.              |\n| ctrl+shift+right | Move the cursor to the end of the word and select.   |\n| home,ctrl+a      | Move the cursor to the start of the line.            |\n| end,ctrl+e       | Move the cursor to the end of the line.              |\n| shift+home       | Move the cursor to the start of the line and select. |\n| shift+end        | Move the cursor to the end of the line and select.   |\n| pageup           | Move the cursor one page up.                         |\n| pagedown         | Move the cursor one page down.                       |\n| shift+up         | Select while moving the cursor up.                   |\n| shift+down       | Select while moving the cursor down.                 |\n| shift+left       | Select while moving the cursor left.                 |\n| shift+right      | Select while moving the cursor right.                |\n| backspace        | Delete character to the left of cursor.              |\n| ctrl+w           | Delete from cursor to start of the word.             |\n| delete,ctrl+d    | Delete character to the right of cursor.             |\n| ctrl+f           | Delete from cursor to end of the word.               |\n| ctrl+x           | Delete the current line.                             |\n| ctrl+u           | Delete from cursor to the start of the line.         |\n| ctrl+k           | Delete from cursor to the end of the line.           |\n| f6               | Select the current line.                             |\n| f7               | Select all text in the document.                     |\n\"\"\"\n    _title = \"Editor Keys Bindings\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass DefaultImportsInfo(ModalScreen[None]):\n    BINDINGS = [Binding(\"escape\", \"dismiss(None)\", \"Close\")]\n    DEFAULT_CSS = \"\"\"\n    DefaultImportsInfo {\n        align: center middle;\n    }\n\"\"\"\n    _title = \"Default Imported Modules\"\n\n    def __init__(\n        self,\n        imported_modules: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the content of the modal dialog.\"\"\"\n        pass\n\n\nclass InteractiveShellScreen(Screen):\n    def __init__(\n        self,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"run_code\", description=\"Run the query\"),\n        Binding(key=\"ctrl+z\", action=\"copy_command\", description=\"Copy to Clipboard\"),\n        Binding(key=\"f1\", action=\"editor_keys\", description=\"Key Bindings\"),\n        Binding(key=\"f2\", action=\"default_imports\", description=\"Default imports\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('commands')\", description=\"Commands\"),\n        Binding(\n            key=\"ctrl+underscore\",\n            action=\"toggle_comment\",\n            description=\"Toggle Comment\",\n            show=False,\n        ),\n    ]\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_default_imports(self) -> None:\n        pass\n\n    def action_run_code(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def _get_selected_lines(self) -> Tuple[List[str], Location, Location]:\n        pass\n\n    def action_toggle_comment(self) -> None:\n        pass\n\n    def action_editor_keys(self) -> None:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef action_editor_keys(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_editor_keys(self) -> None:\n    self.app.push_screen(TextEditorBindingsInfo())\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    \"\"\"TODO\"\"\"\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    \"\"\"TODO\"\"\"\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    groups = {}\n    for name, app_name in get_commands().items():\n        try:\n            kls = load_command_class(app_name, name)\n        except AttributeError:\n            continue\n        if app_name == \"django.core\":\n            group_name = \"django\"\n        else:\n            group_name = app_name.rpartition(\".\")[-1]\n        parser = kls.create_parser(f\"django {name}\", name)\n        options = []\n        args = []\n        root = []\n        for action in parser._actions:\n            if action.nargs == \"?\":\n                nargs = 1\n            elif action.nargs in (\"*\", \"+\"):\n                nargs = -1\n            elif not action.nargs:\n                nargs = 1\n            else:\n                nargs = action.nargs\n            if hasattr(action, \"type\"):\n                if action.type is bool:\n                    type_ = click.BOOL\n                elif action.type is int:\n                    type_ = click.INT\n                elif action.type is str:\n                    type_ = click.STRING\n                else:\n                    type_ = click.STRING if action.nargs != 0 else click.BOOL\n            else:\n                type_ = click.STRING if action.nargs != 0 else click.BOOL\n            default = action.default\n            if default is None:\n                default = MultiValueParamData([])\n            elif type_ is click.BOOL:\n                default = MultiValueParamData([])\n            else:\n                default = MultiValueParamData(values=[(default,)])\n            if not action.option_strings:\n                args.append(\n                    ArgumentSchema(\n                        name=action.metavar or action.dest,\n                        type=type_,\n                        required=action.required if action.nargs != \"*\" else False,\n                        default=default,\n                        choices=action.choices,\n                        multiple=action.nargs in (\"+\", \"*\"),\n                        nargs=nargs,\n                    )\n                )\n                continue\n            option_name = action.option_strings[0]\n            schema = OptionSchema(\n                name=option_name,\n                type=type_,\n                help=action.help,\n                default=default,\n                required=action.required,\n                multiple=action.nargs in (\"+\", \"*\"),\n                choices=action.choices,\n                is_flag=action.nargs == 0,\n                is_boolean_flag=action.nargs == 0,\n                nargs=nargs,\n            )\n            if option_name in (\n                \"-h\",\n                \"--version\",\n                \"-v\",\n                \"--settings\",\n                \"--pythonpath\",\n                \"--traceback\",\n                \"--no-color\",\n                \"--force-color\",\n                \"--skip-checks\",\n            ):\n                root.append(schema)\n            else:\n                options.append(schema)\n        if group_name not in groups:\n            groups[group_name] = CommandSchema(\n                name=group_name, function=None, is_group=True, options=root\n            )\n        command = CommandSchema(\n            name=name,\n            function=None,\n            is_group=False,\n            docstring=None,\n            options=options,\n            arguments=args,\n            parent=groups[group_name],\n        )\n        groups[group_name].subcommands[name] = command\n    return groups\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"TODO\"\"\"\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"TODO\"\"\"\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef compose(self) -> ComposeResult:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef compose(self) -> ComposeResult:\n    tree = CommandTree(\"Commands\", self.command_schemas, self.command_name)\n    title_parts = [Text(self.click_app_name, style=\"b\")]\n    if self.version:\n        version_style = self.get_component_rich_style(\"version-string\")\n        title_parts.extend([\"\\n\", (f\"v{self.version}\", version_style)])\n    title = Text.assemble(*title_parts)\n    sidebar = Vertical(Label(title, id=\"home-commands-label\"), tree, id=\"home-sidebar\")\n    if self.is_grouped_cli:\n        tree.focus()\n    else:\n        sidebar.display = False\n    yield sidebar\n    with Vertical(id=\"home-body\"):\n        with Horizontal(id=\"home-command-description-container\") as vs:\n            vs.can_focus = False\n            yield Static(self.click_app_name or \"\", id=\"home-command-description\")\n        scrollable_body = VerticalScroll(Static(\"\"), id=\"home-body-scroll\")\n        scrollable_body.can_focus = False\n        yield scrollable_body\n        yield Horizontal(\n            NonFocusableVerticalScroll(\n                Static(\"\", id=\"home-exec-preview-static\"),\n                id=\"home-exec-preview-container\",\n            ),\n            id=\"home-exec-preview\",\n        )\n    yield Footer()\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_close_and_run(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_close_and_run(self) -> None:\n    self.app.execute_on_exit = True\n    self.app.exit()\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_copy_command(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_copy_command(self) -> None:\n    if self.command_data is None:\n        return\n    if sys.platform == \"win32\":\n        copy_command = [\"clip\"]\n    elif sys.platform == \"darwin\":\n        copy_command = [\"pbcopy\"]\n    else:\n        copy_command = [\"xclip\", \"-selection\", \"clipboard\"]\n    try:\n        command = (\n            self.click_app_name\n            + \" \"\n            + \" \".join(shlex.quote(str(x)) for x in self.command_data.to_cli_args())\n        )\n        run(copy_command, input=command, text=True, check=False)\n        self.notify(f\"`{command}` copied to clipboard.\")\n    except FileNotFoundError:\n        self.notify(\n            f\"Could not copy to clipboard. `{copy_command[0]}` not found.\",\n            severity=\"error\",\n        )\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_about(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_about(self) -> None:\n    self.app.push_screen(AboutDialog())\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        \"\"\"TODO\"\"\"\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        \"\"\"TODO\"\"\"\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef update_command_data(self, event: CommandForm.Changed) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef update_command_data(self, event: CommandForm.Changed) -> None:\n    self.command_data = event.command_data\n    self._update_execution_string_preview(\n        self.selected_command_schema, self.command_data\n    )\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        \"\"\"TODO\"\"\"\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        \"\"\"TODO\"\"\"\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n    \"\"\"Update the description of the command at the bottom of the sidebar\n    based on the currently selected node in the command tree.\"\"\"\n    description_box = self.query_one(\"#home-command-description\", Static)\n    description_text = node.data.docstring or \"\"\n    description_text = description_text.lstrip()\n    description_text = f\"\"\"[b]{node.label if self.is_grouped_cli else self.click_app_name}[/]\n    {description_text}\"\"\"\n    description_box.update(description_text)\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        \"\"\"TODO\"\"\"\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        \"\"\"TODO\"\"\"\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    \"\"\"Update the preview box showing the command string to be executed\"\"\"\n    if self.command_data is not None:\n        command_name_syntax_style = self.get_component_rich_style(\"command-name-syntax\")\n        prefix = Text(f\"{self.click_app_name} \", command_name_syntax_style)\n        new_value = command_data.to_cli_string(include_root_command=False)\n        highlighted_new_value = Text.assemble(prefix, self.highlighter(new_value))\n        prompt_style = self.get_component_rich_style(\"prompt\")\n        preview_string = Text.assemble((\"$ \", prompt_style), highlighted_new_value)\n        self.query_one(\"#home-exec-preview-static\", Static).update(preview_string)\n    \n\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        \"\"\"TODO\"\"\"\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        \"\"\"TODO\"\"\"\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\nasync def on_mount(self, event: events.Mount) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\nasync def on_mount(self, event: events.Mount) -> None:\n    if self.open_shell:\n        self.push_screen(InteractiveShellScreen(\"Interactive Shell\"))\n    else:\n        self.push_screen(DjangoCommandBuilder(self.app_name, self.command_name))\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        \"\"\"TODO\"\"\"\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        \"\"\"TODO\"\"\"\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef on_button_pressed(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef on_button_pressed(self):\n    self.execute_on_exit = True\n    self.exit()\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        \"\"\"TODO\"\"\"\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        \"\"\"TODO\"\"\"\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_close_and_run(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_close_and_run(self) -> None:\n    try:\n        super().run(headless=headless, size=size, auto_pilot=auto_pilot)\n    finally:\n        if self.post_run_command:\n            console = Console()\n            if self.post_run_command and self.execute_on_exit:\n                console.print(\n                    f\"Running [b cyan]{self.app_name} {' '.join(shlex.quote(s) for s in self.post_run_command)}[/]\"\n                )\n                split_app_name = shlex.split(self.app_name)\n                program_name = shlex.split(self.app_name)[0]\n                arguments = [*split_app_name, *self.post_run_command]\n                os.execvp(program_name, arguments)\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        \"\"\"TODO\"\"\"\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        \"\"\"TODO\"\"\"\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef update_command_to_run(self, event: CommandForm.Changed):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef update_command_to_run(self, event: CommandForm.Changed):\n    include_root_command = not self.is_grouped_cli\n    self.post_run_command = event.command_data.to_cli_args(include_root_command)\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_focus_command_tree(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_focus_command_tree(self) -> None:\n    try:\n        command_tree = self.query_one(CommandTree)\n    except NoMatches:\n        return\n    command_tree.focus()\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_show_command_info(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_show_command_info(self) -> None:\n    command_builder = self.query_one(DjangoCommandBuilder)\n    self.push_screen(CommandInfo(command_builder.selected_command_schema))\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_visit(self, url: str) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_visit(self, url: str) -> None:\n    \"\"\"Visit the given URL, via the operating system.\n\n    Args:\n        url: The URL to visit.\n    \"\"\"\n    open_url(url)\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        \"\"\"TODO\"\"\"\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        \"\"\"TODO\"\"\"\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n    if mode_id == \"commands\":\n        self.app.push_screen(\n            DjangoCommandBuilder(\"pyhton manage.py\", \"Test command name\")\n        )\n    elif mode_id == \"shell\":\n        self.app.push_screen(InteractiveShellScreen(\"Interactive Shell\"))\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        \"\"\"TODO\"\"\"\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        \"\"\"TODO\"\"\"\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        pass\n```\n\n---\nFunction Complement\n---\ndef add_arguments(self, parser):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef add_arguments(self, parser):\n    parser.add_argument(\"--shell\", action=\"store_true\", help=\"Open django shell\")\n```"
    },
    {
        "readme": "# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "src/django_tui/management/commands/tui.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# django-tui\n\nInspect and run Django Commands in a text-based user interface (TUI), built with [Textual](https://github.com/Textualize/textual) & [Trogon](https://github.com/Textualize/trogon).\n\n------\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 django_tui\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 management\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 commands\n                \u251c\u2500\u2500 __init__.py\n                \u251c\u2500\u2500 ish.py # import django;\n                \u2514\u2500\u2500 tui.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `src/django_tui/management/commands/tui.py`.\n\n```python\nfrom __future__ import annotations\nimport os\nimport shlex\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Any, Literal\nfrom webbrowser import open as open_url\nimport click\nfrom django.core.management import BaseCommand, get_commands, load_command_class\nfrom django_tui.management.commands.ish import InteractiveShellScreen\nfrom rich.console import Console\nfrom rich.highlighter import ReprHighlighter\nfrom rich.text import Text\nfrom textual import events, on\nfrom textual.app import App, AutopilotCallbackType, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal, Vertical, VerticalScroll\nfrom textual.css.query import NoMatches\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Footer, Label, Static, Tree\nfrom textual.widgets.tree import TreeNode\nfrom trogon.introspect import (\n    ArgumentSchema,\n    CommandSchema,\n    MultiValueParamData,\n    OptionSchema,\n)\nfrom trogon.run_command import UserCommandData\nfrom trogon.widgets.about import TextDialog\nfrom trogon.widgets.command_info import CommandInfo\nfrom trogon.widgets.command_tree import CommandTree\nfrom trogon.widgets.form import CommandForm\nfrom trogon.widgets.multiple_choice import NonFocusableVerticalScroll\n\n\ndef introspect_django_commands() -> dict[str, CommandSchema]:\n    pass\n\n\nclass AboutDialog(TextDialog):\n    DEFAULT_CSS = \"\"\"\n    TextDialog > Vertical {\n        border: thick $primary 50%;\n    }\n    \"\"\"\n\n    def __init__(self) -> None:\n        pass\n\n\nclass DjangoCommandBuilder(Screen):\n    COMPONENT_CLASSES = {\"version-string\", \"prompt\", \"command-name-syntax\"}\n    BINDINGS = [\n        Binding(key=\"ctrl+r\", action=\"close_and_run\", description=\"Close & Run\"),\n        Binding(\n            key=\"ctrl+z\", action=\"copy_command\", description=\"Copy Command to Clipboard\"\n        ),\n        Binding(\n            key=\"ctrl+t\", action=\"focus_command_tree\", description=\"Focus Command Tree\"\n        ),\n        Binding(key=\"ctrl+s\", action=\"focus('search')\", description=\"Search\"),\n        Binding(key=\"ctrl+j\", action=\"select_mode('shell')\", description=\"Shell\"),\n        (\"escape\", \"app.back\", \"Back\"),\n        Binding(key=\"f1\", action=\"about\", description=\"About\"),\n    ]\n\n    def __init__(\n        self,\n        click_app_name: str,\n        command_name: str,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def action_close_and_run(self) -> None:\n        pass\n\n    def action_copy_command(self) -> None:\n        pass\n\n    def action_about(self) -> None:\n        pass\n\n    async def on_mount(self, event: events.Mount) -> None:\n        await self._refresh_command_form()\n\n    async def _refresh_command_form(\n        self, node: (TreeNode[CommandSchema] | None) = None\n    ):\n        if node is None:\n            try:\n                command_tree = self.query_one(CommandTree)\n                node = command_tree.cursor_node\n            except NoMatches:\n                return\n        self.selected_command_schema = node.data\n        self._update_command_description(node)\n        self._update_execution_string_preview(\n            self.selected_command_schema, self.command_data\n        )\n        await self._update_form_body(node)\n\n    @on(Tree.NodeHighlighted)\n    async def selected_command_changed(\n        self, event: Tree.NodeHighlighted[CommandSchema]\n    ) -> None:\n        \"\"\"When we highlight a node in the CommandTree, the main body of the home page updates\n        to display a form specific to the highlighted command.\"\"\"\n        await self._refresh_command_form(event.node)\n\n    @on(CommandForm.Changed)\n    def update_command_data(self, event: CommandForm.Changed) -> None:\n        pass\n\n    def _update_command_description(self, node: TreeNode[CommandSchema]) -> None:\n        \"\"\"Update the description of the command at the bottom of the sidebar\n        based on the currently selected node in the command tree.\"\"\"\n        pass\n\n    def _update_execution_string_preview(\n        self, command_schema: CommandSchema, command_data: UserCommandData\n    ) -> None:\n        \"\"\"Update the preview box showing the command string to be executed\"\"\"\n        pass\n\n    async def _update_form_body(self, node: TreeNode[CommandSchema]) -> None:\n        parent = self.query_one(\"#home-body-scroll\", VerticalScroll)\n        for child in parent.children:\n            await child.remove()\n        command_schema = node.data\n        command_form = CommandForm(\n            command_schema=command_schema, command_schemas=self.command_schemas\n        )\n        await parent.mount(command_form)\n        if not self.is_grouped_cli:\n            command_form.focus()\n\n\nclass DjangoTui(App):\n    CSS_PATH = Path(__file__).parent / \"trogon.scss\"\n\n    def __init__(self, *, open_shell: bool = False) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    @on(Button.Pressed, \"#home-exec-button\")\n    def on_button_pressed(self):\n        pass\n\n    def run(\n        self,\n        *,\n        headless: bool = False,\n        size: (tuple[int, int] | None) = None,\n        auto_pilot: (AutopilotCallbackType | None) = None,\n    ) -> None:\n        pass\n\n    @on(CommandForm.Changed)\n    def update_command_to_run(self, event: CommandForm.Changed):\n        pass\n\n    def action_focus_command_tree(self) -> None:\n        pass\n\n    def action_show_command_info(self) -> None:\n        pass\n\n    def action_visit(self, url: str) -> None:\n        \"\"\"Visit the given URL, via the operating system.\n\n        Args:\n            url: The URL to visit.\n        \"\"\"\n        pass\n\n    def action_select_mode(self, mode_id: Literal[\"commands\", \"shell\"]) -> None:\n        pass\n\n\nclass Command(BaseCommand):\n    help = \"Run and inspect Django commands in a text-based user interface (TUI).\"\n\n    def add_arguments(self, parser):\n        pass\n\n    def handle(self, *args: Any, shell=False, **options: Any) -> None:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef handle(self, *args: Any, shell=False, **options: Any) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef handle(self, *args: Any, shell=False, **options: Any) -> None:\n    app = DjangoTui(open_shell=shell)\n    app.run()\n```"
    }
]