[
    {
        "readme": "# Pitch Visualizer\n\nThis is a small Python script that visualizes the pitch of a pure vocal audio, merges it with the original video, and ultimately generates a video with dynamic pitch annotations.\n\n## Usage\n\nYou need to prepare two files:\n\n* Original video file (.mp4)\n* Isolated vocal audio file extracted from the original video (.mp3)\n\nTo accurately draw pitch comparisons, you need to know the key of the song (e.g., C or F#). In this software, we do not specifically distinguish between major and minor keys; the key is only for annotating the scale. If the song is in a minor key, use the key of the corresponding major scale. For example, A minor corresponds to C.\n\n```bash\npython gen_pitch.py --audio <voice.mp3> -t <tone> <video.mp3> -o <output.mp4>\n\n# Example\npython gen_pitch.py --audio wjk_raw.mp3 -t E wjk.mp4 -o wjk_with_pitch.mp4\n```\n\nThe `-o` option can be omitted, and it defaults to creating another video in the input video's folder.\n\n### Other Options\n\n* `--ffmpeg` allows you to specify the ffmpeg executable, necessary when ffmpeg is not in your PATH.\n* `--pitch_width` sets the width of the pitch graph, defaulting to half the width of the original video.\n* `--pitch_position` sets the position of the pitch graph, defaulting to `top_right`.\n* `--min_pitch` sets the minimum recognized pitch, defaulting to `D2`.\n* `--max_pitch` sets the maximum recognized pitch, defaulting to `G5`.\n\nIf you are familiar with the song's vocal range, adjusting `--min_pitch` and `--max_pitch` can enhance pitch recognition accuracy and speed up rendering.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 gen_pitch.py # import magic;\n\u251c\u2500\u2500 magic.py",
        "file_path": "gen_pitch.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Pitch Visualizer\n\nThis is a small Python script that visualizes the pitch of a pure vocal audio, merges it with the original video, and ultimately generates a video with dynamic pitch annotations.\n\n## Usage\n\nYou need to prepare two files:\n\n* Original video file (.mp4)\n* Isolated vocal audio file extracted from the original video (.mp3)\n\nTo accurately draw pitch comparisons, you need to know the key of the song (e.g., C or F#). In this software, we do not specifically distinguish between major and minor keys; the key is only for annotating the scale. If the song is in a minor key, use the key of the corresponding major scale. For example, A minor corresponds to C.\n\n```bash\npython gen_pitch.py --audio <voice.mp3> -t <tone> <video.mp3> -o <output.mp4>\n\n# Example\npython gen_pitch.py --audio wjk_raw.mp3 -t E wjk.mp4 -o wjk_with_pitch.mp4\n```\n\nThe `-o` option can be omitted, and it defaults to creating another video in the input video's folder.\n\n### Other Options\n\n* `--ffmpeg` allows you to specify the ffmpeg executable, necessary when ffmpeg is not in your PATH.\n* `--pitch_width` sets the width of the pitch graph, defaulting to half the width of the original video.\n* `--pitch_position` sets the position of the pitch graph, defaulting to `top_right`.\n* `--min_pitch` sets the minimum recognized pitch, defaulting to `D2`.\n* `--max_pitch` sets the maximum recognized pitch, defaulting to `G5`.\n\nIf you are familiar with the song's vocal range, adjusting `--min_pitch` and `--max_pitch` can enhance pitch recognition accuracy and speed up rendering.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 gen_pitch.py # import magic;\n\u251c\u2500\u2500 magic.py\n```\n\n---\nFile Path\n---\ngen_pitch.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport argparse\nimport os\nimport shutil\nimport subprocess\nimport tempfile\nimport warnings\nfrom functools import partial\nimport magic\nimport matplotlib.animation as animation\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport parselmouth\nimport tqdm\n\nFRAME_PER_SEC = 15\nTONES = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\n\nclass Tonality:\n    base_diff = [0, 2, 4, 5, 7, 9, 11]\n    tone_freq_map = {\n        f\"{t}{i}\": (2 ** (TONES.index(t) / 12 + i) * 16.3516)\n        for t in TONES\n        for i in range(0, 8)\n    }\n\n    def __init__(self, tone):\n        pass\n\n    @classmethod\n    def normalize_to_freq(cls, tone_or_freq):\n        pass\n\n    def get_tone_and_freq(self, min_freq=0, max_freq=4186):\n        pass\n\n\ndef draw_standard(tone, min_freq, max_freq):\n    pass\n\n\ndef animate(frame, pitch, ln, mid_ln, progress_bar, labels):\n    pass\n\n\ndef generate_pitch_video(path, output, tone, min_freq, max_freq):\n    pass\n\n\ndef combine_video(\n    ffmpeg, video_path, pitch_video_path, output_path, pitch_width, pitch_position\n):\n    pass\n\n\nif __name__ == \"__main__\":\n    magic.magic()\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--audio\", type=str, help=\"path to the input audio file\", required=True\n    )\n    parser.add_argument(\"video\", type=str, help=\"path to the input video file\")\n    parser.add_argument(\"--output\", \"-o\", type=str, required=False)\n    parser.add_argument(\"--tone\", \"-t\", type=str, required=True)\n    parser.add_argument(\"--ffmpeg\", type=str)\n    parser.add_argument(\"--pitch_width\", type=int, default=None)\n    parser.add_argument(\n        \"--pitch_position\",\n        type=str,\n        default=\"top_right\",\n        choices=[\"top_right\", \"top_left\", \"bottom_right\", \"bottom_left\"],\n    )\n    parser.add_argument(\"--min_pitch\", type=str, default=\"D2\")\n    parser.add_argument(\"--max_pitch\", type=str, default=\"G5\")\n    options = parser.parse_args()\n    if not os.path.exists(options.audio):\n        print(f\"Audio file {options.audio} does not exist\")\n        exit(1)\n    if not os.path.exists(options.video):\n        print(f\"Video file {options.video} does not exist\")\n        exit(1)\n    if options.ffmpeg is None:\n        options.ffmpeg = shutil.which(\"ffmpeg\")\n    if options.ffmpeg is None or not os.path.exists(options.ffmpeg):\n        print(\"Unable to locate ffmpeg, use --ffmpeg to specify the path to ffmpeg\")\n        exit(1)\n    if options.tone not in TONES:\n        print(f\"Invalid tone {options.tone}\")\n        exit(1)\n    if options.output is None:\n        options.output = \".\".join(options.video.split(\".\")[:-1]) + \"_with_pitch.mp4\"\n    try:\n        min_freq = Tonality.normalize_to_freq(options.min_pitch)\n        max_freq = Tonality.normalize_to_freq(options.max_pitch)\n    except Exception:\n        print(f\"Invalid min/max pitch {options.min_pitch}/{options.max_pitch}\")\n        exit(1)\n    plt.rcParams[\"animation.ffmpeg_path\"] = options.ffmpeg\n    with tempfile.TemporaryDirectory() as tmpdir:\n        pitch_video_path = os.path.join(tmpdir, \"pitch.mp4\")\n        generate_pitch_video(\n            options.audio, pitch_video_path, options.tone, min_freq, max_freq\n        )\n        combine_video(\n            options.ffmpeg,\n            options.video,\n            pitch_video_path,\n            options.output,\n            options.pitch_width,\n            options.pitch_position,\n        )\n```"
    },
    {
        "readme": "# Pitch Visualizer\n\nThis is a small Python script that visualizes the pitch of a pure vocal audio, merges it with the original video, and ultimately generates a video with dynamic pitch annotations.\n\n## Usage\n\nYou need to prepare two files:\n\n* Original video file (.mp4)\n* Isolated vocal audio file extracted from the original video (.mp3)\n\nTo accurately draw pitch comparisons, you need to know the key of the song (e.g., C or F#). In this software, we do not specifically distinguish between major and minor keys; the key is only for annotating the scale. If the song is in a minor key, use the key of the corresponding major scale. For example, A minor corresponds to C.\n\n```bash\npython gen_pitch.py --audio <voice.mp3> -t <tone> <video.mp3> -o <output.mp4>\n\n# Example\npython gen_pitch.py --audio wjk_raw.mp3 -t E wjk.mp4 -o wjk_with_pitch.mp4\n```\n\nThe `-o` option can be omitted, and it defaults to creating another video in the input video's folder.\n\n### Other Options\n\n* `--ffmpeg` allows you to specify the ffmpeg executable, necessary when ffmpeg is not in your PATH.\n* `--pitch_width` sets the width of the pitch graph, defaulting to half the width of the original video.\n* `--pitch_position` sets the position of the pitch graph, defaulting to `top_right`.\n* `--min_pitch` sets the minimum recognized pitch, defaulting to `D2`.\n* `--max_pitch` sets the maximum recognized pitch, defaulting to `G5`.\n\nIf you are familiar with the song's vocal range, adjusting `--min_pitch` and `--max_pitch` can enhance pitch recognition accuracy and speed up rendering.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 gen_pitch.py # import magic;\n\u251c\u2500\u2500 magic.py",
        "file_path": "magic.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# Pitch Visualizer\n\nThis is a small Python script that visualizes the pitch of a pure vocal audio, merges it with the original video, and ultimately generates a video with dynamic pitch annotations.\n\n## Usage\n\nYou need to prepare two files:\n\n* Original video file (.mp4)\n* Isolated vocal audio file extracted from the original video (.mp3)\n\nTo accurately draw pitch comparisons, you need to know the key of the song (e.g., C or F#). In this software, we do not specifically distinguish between major and minor keys; the key is only for annotating the scale. If the song is in a minor key, use the key of the corresponding major scale. For example, A minor corresponds to C.\n\n```bash\npython gen_pitch.py --audio <voice.mp3> -t <tone> <video.mp3> -o <output.mp4>\n\n# Example\npython gen_pitch.py --audio wjk_raw.mp3 -t E wjk.mp4 -o wjk_with_pitch.mp4\n```\n\nThe `-o` option can be omitted, and it defaults to creating another video in the input video's folder.\n\n### Other Options\n\n* `--ffmpeg` allows you to specify the ffmpeg executable, necessary when ffmpeg is not in your PATH.\n* `--pitch_width` sets the width of the pitch graph, defaulting to half the width of the original video.\n* `--pitch_position` sets the position of the pitch graph, defaulting to `top_right`.\n* `--min_pitch` sets the minimum recognized pitch, defaulting to `D2`.\n* `--max_pitch` sets the maximum recognized pitch, defaulting to `G5`.\n\nIf you are familiar with the song's vocal range, adjusting `--min_pitch` and `--max_pitch` can enhance pitch recognition accuracy and speed up rendering.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 gen_pitch.py # import magic;\n\u251c\u2500\u2500 magic.py\n```\n\n---\nFile Path\n---\nmagic.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport contextlib as c\nimport hashlib as h\nimport os as o\nimport tempfile as t\n\n_m = None\n\n\ndef magic():\n    pass\n\n\n@c.contextmanager\ndef magic3():\n    pass\n```"
    }
]