[
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "setup.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\nsetup.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom setuptools import find_packages, setup\n\nwith open(\"README.md\", \"r\", encoding=\"UTF-8\") as f:\n    README_MD = f.read()\nsetup(\n    name=\"easyliter\",\n    version=\"1.0.5\",\n    description=\"EasyLiterature is a opensourced, Python-based command line tool for automatic literature management. Simply list the paper titles (or ids) you want to read in a markdown file and it will automatically collect and refine its information in the markdown file, download the pdf to your local machine, and link the pdf to your paper in the markdown file. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\",\n    long_description=README_MD,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/Psycoy/EasyLiterature\",\n    classifiers=[\n        \"License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)\",\n        \"Intended Audience :: Science/Research\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Text Processing :: Markup\",\n    ],\n    install_requires=[\n        \"beautifulsoup4>=4.11.1\",\n        \"feedparser>=6.0.10\",\n        \"urllib3>=1.26.11\",\n        \"requests>=2.28.1\",\n        \"tqdm>=4.64.0\",\n        \"Unidecode>=1.3.4\",\n        \"bibtexparser==1.4.0\",\n        \"pandas\",\n        \"scholarly\",\n    ],\n    entry_points={\"console_scripts\": [\"easyliter = easy_literature.easyliter:main\"]},\n    packages=find_packages(),\n    license=\"AGPLv3\",\n    author=\"Oliver\",\n    author_email=\"olivernova1998@gmail.com\",\n    keywords=[\"title\", \"bibtex\", \"arxiv\", \"doi\", \"science\", \"scientific-journals\"],\n)\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/DBLP.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/DBLP.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom urllib.request import ProxyHandler\nimport pandas as pd\nfrom . import dblp_source as dblp\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"DBLP\")\nlogger.setLevel(logging.DEBUG)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\nclass DBLPInfo(object):\n    def set_proxy(self, proxy_address=None):\n        \"\"\"set proxy handler\n\n        Aargs:\n            proxy (str): proxy (str): The proxy adress. e.g 127.0.1:1123\n\n        Returns:\n            A proxy handler object.\n        \"\"\"\n        pass\n\n    def extract_json_info(self, item):\n        \"\"\"Extract bib json information from requests.get().json()\n\n        Args:\n            item (json object): obtained by requests.get().json()\n\n        Returns:\n            A dict containing the paper information.\n        \"\"\"\n        pass\n\n    def get_info_by_title(self, title):\n        \"\"\"Get the meta information by the given paper title.\n\n        Args:\n            doi (str): The paper title\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n            OR\n            A list [{}, {}, {}]\n        \"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    results = dblp.search([\"Finetunedlanguage models are zero-shot learners\"])\n    print(results)\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/GoogleScholar.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/GoogleScholar.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom scholarly import ProxyGenerator, scholarly\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"GoogleScholar\")\nlogger.setLevel(logging.DEBUG)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\nclass GscholarInfo(object):\n    def set_proxy(self, proxy_name=\"free\", proxy_address=None):\n        \"\"\"set proxy handler\n\n        Aargs:\n            proxy (str): proxy (str): The proxy adress. e.g 127.0.1:1123\n\n        Returns:\n            A proxy handler object.\n        \"\"\"\n        pass\n\n    def extract_json_info(self, item):\n        \"\"\"Extract bib json information from requests.get().json()\n\n        Args:\n            item (json object): obtained by requests.get().json()\n\n        Returns:\n            A dict containing the paper information.\n        \"\"\"\n        pass\n\n    def get_info_by_title(self, title):\n        \"\"\"Get the meta information by the given paper title.\n\n        Args:\n            doi (str): The paper title\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n            OR\n            A list [{}, {}, {}]\n        \"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    arxivId = \"2208.05623\"\n    title = \"Heterogeneous Graph Attention Network\"\n    gscholar_info = GscholarInfo()\n    gscholar_info.set_proxy(proxy_name=\"free\")\n    bib_arxiv = gscholar_info.get_info_by_title(title)\n    print(bib_arxiv)\n    print(\"\\n\")\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/Scholarly.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/Scholarly.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport json\nfrom scholarly import ProxyGenerator, scholarly\n\npg = ProxyGenerator()\nsucess = pg.FreeProxies()\nscholarly.use_proxy(pg)\npubs_iter = scholarly.search_pubs(\"1810.04805\")\nprint(json.dumps(next(pubs_iter), indent=2))\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/arxiv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/arxiv.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom urllib.request import ProxyHandler\nimport feedparser\n\ntry:\n    from urllib import quote\nexcept ImportError:\n    from urllib.parse import quote\nfrom unidecode import unidecode\nfrom .crossref import crossrefInfo\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"arxiv\")\nlogger.setLevel(logging.DEBUG)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\nclass arxivInfo(object):\n    def __init__(self):\n        pass\n\n    def set_proxy_handler(self, proxy):\n        \"\"\"set proxy handler\n\n        Aargs:\n            proxy (str): proxy (str): The proxy adress. e.g 127.0.1:1123\n\n        Returns:\n            A proxy handler object.\n        \"\"\"\n        pass\n\n    def extract_json_info(self, item):\n        \"\"\"Extract bib json information from requests.get().json()\n\n        Args:\n            item (json object): obtained by requests.get().json()\n\n        Returns:\n            A dict containing the paper information.\n        \"\"\"\n        pass\n\n    def get_info_by_arxivid(self, arxivId, handler=False):\n        \"\"\"Get the meta information by the given paper arxiv_id.\n\n        Args:\n            doi (str): The arxiv Id\n            handler (handler object): use proxy\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n        \"\"\"\n        pass\n\n    def get_info_by_title(self, title, field=\"ti\"):\n        \"\"\"Get the meta information by the given paper title.\n\n        Args:\n            doi (str): The paper title\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n            OR\n            A list [{}, {}, {}]\n        \"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    arxivId = \"2208.05623\"\n    title = \"Heterogeneous Graph Attention Network\"\n    arxiv_info = arxivInfo()\n    arxiv_info.set_proxy_handler(proxy=\"127.0.1:1123\")\n    bib_arxiv = arxiv_info.get_info_by_arxivid(arxivId)\n    print(bib_arxiv)\n    print(\"\\n\")\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/crossref.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/crossref.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport requests\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"crossref\")\nlogger.setLevel(logging.DEBUG)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\nclass crossrefInfo(object):\n    def __init__(self):\n        pass\n\n    def set_proxy(self, proxy=None):\n        \"\"\"set proxy for session\n\n        Args:\n            proxy (str): The proxy adress. e.g 127.0.1:1123\n        Returns:\n            None\n        \"\"\"\n        pass\n\n    def extract_json_info(self, bib):\n        \"\"\"Extract bib json information from requests.get().json()\n\n        Args:\n            bib (json object): obtained by requests.get().json()\n\n        Returns:\n            A dict containing the paper information.\n        \"\"\"\n        pass\n\n    def get_info_by_doi(self, doi):\n        \"\"\"Get the meta information by the given paper DOI number.\n\n        Args:\n            doi (str): The paper DOI number\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n        \"\"\"\n        pass\n\n    def get_info_by_title(self, title):\n        \"\"\"Get the meta information by the given paper title.\n\n        Args:\n            doi (str): The paper title\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n            OR\n            A list [{}, {}, {}]\n        \"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    doi = \"10.1038/s41467-022-29269-6\"\n    crossref_info = crossrefInfo()\n    crossref_info.set_proxy(proxy=\"127.0.1:1123\")\n    bib_doi = crossref_info.get_info_by_doi(doi)\n    print(bib_doi)\n    print(\"\\n\")\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/dblp_source.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/dblp_source.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\n\nSTRINGS_FOR_TEST = [\"Collaborative Writing\"]\nDBLP_BASE_URL = \"http://dblp.uni-trier.de/\"\nPUB_SEARCH_URL = DBLP_BASE_URL + \"search/publ/\"\n\n\ndef query_db(pub_string=STRINGS_FOR_TEST):\n    \"\"\"\n    returns the BeautifulSoup object of a query to DBLP\n\n    :param pub_string: A list of strings of keywords\n    :return: BeautifulSoup: A BeautifulSoup Object\n    \"\"\"\n    pass\n\n\ndef get_pub_data(pub):\n    \"\"\"\n    Extracts the information about a publication from a BeautifulSoup object\n\n    :param pub: A BeautifulSoup Object with Publication Information\n    :return: dict: All Information of this Publication\n    \"\"\"\n    pass\n\n\ndef search(search_string=STRINGS_FOR_TEST):\n    \"\"\"\n    returns the information found in a search query to dblp as a pandas dataframe.\n    Shows the following information:\n        - Authors\n        - Link to Publication\n        - Title\n        - Type (Article, Proceedings etc.)\n        - Where it was published\n        - Year of publication\n    :param search_string: A List of Strings of Keywords, that should be searched for\n    :return: pd.DataFrame: A Dataframe with all data\n    \"\"\"\n    pass\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/downloads.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/downloads.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport os\nimport platform\nimport re\nfrom .arxiv import arxivInfo\nfrom .crossref import crossrefInfo\nfrom .DBLP import DBLPInfo\nfrom .GoogleScholar import GscholarInfo\nfrom .medbiorxiv import BMxivInfo\nfrom .pdfs import pdfDownload\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"Downloads\")\nlogger.setLevel(logging.INFO)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\ndef check_string(re_exp, str):\n    pass\n\n\ndef classify(identifier):\n    \"\"\"\n    Classify the type of paper_id:\n    arxivId - arxivId\n    doi - digital object identifier\n    medbiorxivId - medrxiv or biorxiv id\n    title - title\n    \"\"\"\n    pass\n\n\ndef get_paper_info_from_paperid(paper_id, proxy=None, gproxy_mode=\"free\"):\n    pass\n\n\ndef get_paper_pdf_from_paperid(paper_id, path, proxy=None, direct_url=None):\n    pass\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/easyliter.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/easyliter.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport argparse\nimport logging\nimport os\nfrom .utils import (\n    get_pdf_paths,\n    get_pdf_paths_from_notes,\n    get_pdf_paths_from_notes_dict,\n    get_update_content,\n    note_modified,\n    patternRecognizer,\n)\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"easyliter\")\nlogger.setLevel(logging.INFO)\n\n\ndef set_args():\n    pass\n\n\ndef check_args():\n    pass\n\n\ndef get_bib_and_pdf(note_file, output_path, proxy, paper_recognizer, gproxy_mode):\n    pass\n\n\ndef file_update(input_path, output_path, proxy, paper_recognizer, gproxy_mode):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/medbiorxiv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/medbiorxiv.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport requests\nfrom bs4 import BeautifulSoup\nfrom .crossref import crossrefInfo\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"biorxiv\")\nlogger.setLevel(logging.DEBUG)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\nclass BMxivInfo(object):\n    def __init__(self):\n        pass\n\n    def set_proxy(self, proxy=False):\n        \"\"\"set proxy for session\n\n        Args:\n            proxy (str): The proxy adress. e.g 127.0.1:1123\n        Returns:\n            None\n        \"\"\"\n        pass\n\n    def extract_json_info(self, item):\n        \"\"\"Extract bib json information from requests.get().json()\n\n        Args:\n            item (json object): obtained by requests.get().json()\n\n        Returns:\n            A dict containing the paper information.\n        \"\"\"\n        pass\n\n    def get_info_by_bmrxivid(self, bmrxivid):\n        \"\"\"Get the meta information by the given paper biorxiv_id or medrxiv_id.\n\n        Args:\n            doi (str): The biorxiv or medrxiv Id\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n        \"\"\"\n        pass\n\n    def get_info_by_title(self, title):\n        \"\"\"Get the meta information by the given paper title.\n\n        Args:\n            doi (str): The paper title\n\n        Returns:\n            A dict containing the paper information.\n            {\n                \"title\": xxx,\n                \"author\": xxx,\n                \"journal\": xxx,\n                etc\n            }\n            OR\n            None\n            OR\n            A list [{}, {}, {}]\n        \"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    arxivId = \"10.1101/2022.07.28.22277637\"\n    arxiv_info = BMxivInfo()\n    arxiv_info.set_proxy(proxy=\"127.0.1:1123\")\n    bib_arxiv = arxiv_info.get_info_by_bmrxivid(arxivId)\n    print(bib_arxiv)\n    print(\"\\n\")\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/pdfs.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/pdfs.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom urllib.parse import urlsplit, urlunsplit\nimport requests\nfrom bs4 import BeautifulSoup\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"PDFs\")\nlogger.setLevel(logging.DEBUG)\nHEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0\"\n}\n\n\nclass pdfDownload(object):\n    def __init__(self):\n        pass\n\n    def set_proxy(self, proxy=None):\n        \"\"\"set proxy for session\n\n        Args:\n            proxy (str): The proxy adress. e.g 127.0.1:1123\n        Returns:\n            None\n        \"\"\"\n        pass\n\n    def _get_available_scihub_urls(self):\n        \"\"\"\n        Finds available scihub urls via https://lovescihub.wordpress.com/ or\n        https://sci-hub.now.sh/\n        \"\"\"\n        pass\n\n    def fetch(self, url, auth=None):\n        \"\"\"Fetch pdf\n\n        Args:\n            url (str):\n\n        Returns:\n            A dict OR None\n        \"\"\"\n        pass\n\n    def get_pdf_from_direct_url(self, url, auth=None):\n        pass\n\n    def get_pdf_from_sci_hub(self, identifier, auth=None):\n        \"\"\"Fetch pdf from sci-hub based on doi or url\n\n        Args:\n            identifier (str): DOI or url\n            auth (tuple): (\"user\", \"passwd\")\n\n        Returns:\n            A dict OR None\n        \"\"\"\n        pass\n\n    def _save(self, content, path):\n        pass\n\n\nif __name__ == \"__main__\":\n    doi = \"10.1145/3308558.3313562\"\n    pdf_download = pdfDownload()\n    pdf_download.set_proxy(\"127.0.1:1123\")\n    pdf_dict = pdf_download.get_pdf_from_sci_hub(doi)\n    if pdf_dict:\n        print(pdf_dict[\"url\"])\n        pdf_download.download(pdf_dict[\"pdf\"], \"/home/admin/tmp.pdf\")\n```"
    },
    {
        "readme": "# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py",
        "file_path": "easy_literature/utils.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# EasyLiterature\n**EasyLiterature** is a Python-based command line tool for automatic literature management. Welcome star or contribute!\n\nSimply list the paper titles (or ids) you want to read in a markdown file and it will automatically `collect and refine its information in the markdown file`, `download the pdf to your local machine`, and `link the pdf to your paper in the markdown file`. You can forever keep your notes within the pdfs and mds on your local machine or cloud driver.\n\nInspired by [Mu Li](https://www.bilibili.com/video/BV1nA41157y4), adapted from [autoLiterature](https://github.com/wilmerwang/autoLiterature). \nCompared to autoLiterature, **EasyLiterature** is much easier to use and supports a wider range of features, such as `title-based paper match`, `paper search and download on Google Scholar and DBLP` (the two main sites for scholars), `citation statistics`, `mannual information update assitant`, etc. **EasyLiterature covers almost all papers thanks to the support of Google Scholar and DBLP!**\n\n## A simple example\n1. Have the python installed on your local machine (preferably >= 3.7).\n2. Run `pip install easyliter` in your command line to install.\n3. Prepare your markdown note file (e.g., `Note.md`). <br>**Attention:** You may need to download a markdown editor to create/edit this file. I am using [Typora](https://typora.io/), which is not totally free. You can also choose other alternatives.\n4. List the formated papers titles in your markdown note file according to the Section 4 below (Recognition Rules). e.g.,<br>\n  \\- {{BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.}}<br>\n  \\- {{Xlnet: Generalized autoregressive pretraining for language understanding.}}<br>\n  **(pay attention to the space after \u2018\\-\u2019)** \n5. Create a folder to store the downloaded pdfs (e.g., `PDFs/`).\n6. Run `easyliter -i <path to your md file> -o <path to your pdf folder>`. \n<br> (Replace `<path to your md file>` with the actual path to your markdown note file, `<path to your pdf folder>` with the actual path to your pdf folder)\n<br>e.g., `easyliter -i \"/home/Note.md\" -o \"/home/PDFs\"`\n7. Your should able to see that the updated information and downloaded pdf files if no error is reported.\n8. This is a simple and common use case. For other features, please read the below sections carefully and follow the instructions.\n\n## Arguments\n```bash\neasyliter\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  \n  -i INPUT, --input INPUT\n  The path to the note file or note file folder.\n\n  -o OUTPUT, --output OUTPUT\n  Folder path to save paper pdfs and images. NOTE: MUST BE FOLDER.\n\n  -p PROXY, --proxy PROXY\n  The proxy. e.g. 127.0.0.1:1080. If this argument is specified, the google scholar will automatically use a free proxy (not necessarily using the specified proxy address). To use other proxies for google scholar, specify the -gp option. If you want to set up the proxies mannually, change the behaviour in GoogleScholar.set_proxy(). See more at https://scholarly.readthedocs.io/en/stable/ProxyGenerator.html.\n\n  -gp GPROXY_MODE, --gproxy_mode GPROXY_MODE\n  The proxy type used for scholarly. e.g., free, single, Scraper. (Note: 1. <free> will automatically choose a free proxy address to use, which is free, but may not be fast. 2. <single> will use the proxy address you specify. 3. <Scraper> is not free to use and need to buy the api key.).\n\n  -d, --delete\n  Delete unreferenced attachments in notes. Use with caution, when used, -i must be a folder path including all notes.\n\n  -m MIGRATION, --migration MIGRATION\n  The pdf folder path you want to reconnect to.\n```\n\n## Recognition Rules\n- If the notes file contains `- {paper_id}`, it will download the information of that literature, but not the PDF.\n- If the notes file contains `- {{paper_id}}`, it will download both the information of that literature and the PDF.\n\n- Note: `paper_id` supports `article title`, published articles' `doi`, and pre-published articles' `arvix_id`, `biorvix_id`, and `medrvix_id`. It will try all the possible sources online.\n\n## Usage\n### Basic Usage\nAssuming `input` is the folder path of the literature notes (.md files) and `output` is the folder path where you want to save the PDFs.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -o output \n\n# Only update the input/example.md file\neasyliter -i input/example.md -o output  \n\n# -d is an optional flag, when -i is a folder path, using -d will delete unrelated pdf files in the PDF folder from the literature notes content\neasyliter -i input -o output -d\n```\n\n### Migrating Notes and PDF Files\nWhen you need to move the literature notes or the PDF folder, the links to the PDFs in the literature notes might become unusable. You can use `-m` to re-link the PDF files with the literature notes.\n\n```bash\n# Update all md files in the input folder\neasyliter -i input -m movedPDFs/\n\n# Only update the input/example.md file\neasyliter -i input/example.md -m movedPDFs/  \n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 easy_literature\n    \u251c\u2500\u2500 DBLP.py # from . import dblp_source as dblp;\n    \u251c\u2500\u2500 GoogleScholar.py\n    \u251c\u2500\u2500 Scholarly.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 arxiv.py\n    \u251c\u2500\u2500 crossref.py\n    \u251c\u2500\u2500 dblp_source.py\n    \u251c\u2500\u2500 downloads.py\n    \u251c\u2500\u2500 easyliter.py\n    \u251c\u2500\u2500 medbiorxiv.py\n    \u251c\u2500\u2500 pdfs.py\n    \u2514\u2500\u2500 utils.py\n```\n\n---\nFile Path\n---\neasy_literature/utils.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport os\nimport re\nfrom tqdm import tqdm\nfrom .downloads import classify, get_paper_info_from_paperid, get_paper_pdf_from_paperid\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"utils\")\nlogger.setLevel(logging.INFO)\n\n\nclass patternRecognizer(object):\n    def __init__(self, regular_rule):\n        pass\n\n    def match(self, string):\n        pass\n\n    def findall(self, string):\n        pass\n\n    def multiple_replace(self, content, **replace_dict):\n        pass\n\n\ndef note_modified(pattern_recog, md_file, **replace_dict):\n    pass\n\n\ndef get_pdf_paths(pdf_root):\n    pass\n\n\ndef get_pdf_paths_from_notes(md_root, reg):\n    pass\n\n\ndef get_pdf_paths_from_notes_dict(md_root, reg):\n    pass\n\n\ndef classify_identifier(identifier):\n    \"\"\"Not need to download PDF file\"\"\"\n    pass\n\n\ndef get_update_content(m, note_file, pdfs_path, proxy, gproxy_mode):\n    pass\n```"
    }
]