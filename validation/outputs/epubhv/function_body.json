[
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [
            "web.py",
            "epubhv/__init__.py",
            "epubhv/__main__.py",
            "epubhv/cli.py",
            "epubhv/epubhv.py",
            "epubhv/punctuation.py",
            "epubhv/yomituki.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    pass\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    pass\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `epubhv/__init__.py`.\n\n```python\nfrom .epubhv import EPUBHV as EPUBHV\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `epubhv/__main__.py`.\n\n```python\nfrom .cli import main\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `epubhv/cli.py`.\n\n```python\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nfrom pathlib import Path\nfrom typing import cast\nfrom epubhv.epubhv import EPUBHV, list_all_epub_in_dir\n\n\nclass Options:\n    epub: str\n    method: str\n    convert: str\n    punctuation: str\n    ruby: bool\n    cantonese: bool\n    dest: Path\n\n\ndef main() -> None:\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nCurrent File Sketch/8\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    \"\"\"TODO\"\"\"\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    pass\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```",
        "current_file_path": "web.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    pass\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    pass\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `epubhv/__init__.py`.\n\n```python\nfrom .epubhv import EPUBHV as EPUBHV\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `epubhv/__main__.py`.\n\n```python\nfrom .cli import main\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `epubhv/cli.py`.\n\n```python\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nfrom pathlib import Path\nfrom typing import cast\nfrom epubhv.epubhv import EPUBHV, list_all_epub_in_dir\n\n\nclass Options:\n    epub: str\n    method: str\n    convert: str\n    punctuation: str\n    ruby: bool\n    cantonese: bool\n    dest: Path\n\n\ndef main() -> None:\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nCurrent File Sketch/8\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    \"\"\"TODO\"\"\"\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    pass\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```\n\n---\nFunction Complement\n---\ndef download_button(data: bytes, download_filename: str) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef download_button(data: bytes, download_filename: str) -> None:\n    b64 = base64.b64encode(data).decode()\n    dl_link = f\"\"\"\n        <html>\n        <head>\n        <title>Start Auto Download file</title>\n        <script>\n            const a = document.createElement('a')\n            a.setAttribute('href', \"data:text/csv;base64,{b64}\")\n            a.setAttribute('download', \"{download_filename}\")\n            a.click()\n        </script>\n        </head>\n        </html>\n        \"\"\"\n    components.html(dl_link, height=0)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [
            "web.py",
            "epubhv/__init__.py",
            "epubhv/__main__.py",
            "epubhv/cli.py",
            "epubhv/epubhv.py",
            "epubhv/punctuation.py",
            "epubhv/yomituki.py"
        ],
        "relevant_file_sketches": "---\nRelevant File Sketch/1\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    pass\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    pass\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `epubhv/__init__.py`.\n\n```python\nfrom .epubhv import EPUBHV as EPUBHV\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `epubhv/__main__.py`.\n\n```python\nfrom .cli import main\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `epubhv/cli.py`.\n\n```python\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nfrom pathlib import Path\nfrom typing import cast\nfrom epubhv.epubhv import EPUBHV, list_all_epub_in_dir\n\n\nclass Options:\n    epub: str\n    method: str\n    convert: str\n    punctuation: str\n    ruby: bool\n    cantonese: bool\n    dest: Path\n\n\ndef main() -> None:\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nCurrent File Sketch/8\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    pass\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    \"\"\"TODO\"\"\"\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```",
        "current_file_path": "web.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nRelevant File Sketch/1\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    pass\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    pass\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```\n\n---\nRelevant File Sketch/2\n---\nHere is the file sketch of `epubhv/__init__.py`.\n\n```python\nfrom .epubhv import EPUBHV as EPUBHV\n```\n\n---\nRelevant File Sketch/3\n---\nHere is the file sketch of `epubhv/__main__.py`.\n\n```python\nfrom .cli import main\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/4\n---\nHere is the file sketch of `epubhv/cli.py`.\n\n```python\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nfrom pathlib import Path\nfrom typing import cast\nfrom epubhv.epubhv import EPUBHV, list_all_epub_in_dir\n\n\nclass Options:\n    epub: str\n    method: str\n    convert: str\n    punctuation: str\n    ruby: bool\n    cantonese: bool\n    dest: Path\n\n\ndef main() -> None:\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nRelevant File Sketch/5\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nRelevant File Sketch/6\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```\n\n---\nRelevant File Sketch/7\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nCurrent File Sketch/8\n---\nHere is the file sketch of `web.py`.\n\n```python\nimport base64\nimport tempfile\nfrom pathlib import Path\nimport streamlit as st\nimport streamlit.components.v1 as components\nfrom epubhv import EPUBHV\n\nLABELS = {\n    \"none\": \"None\",\n    \"auto\": \"Auto\",\n    \"s2t\": \"Simplified Chinese to Traditional Chinese\",\n    \"t2s\": \"Traditional Chinese to Simplified Chinese\",\n    \"s2tw\": \"Simplified Chinese to Traditional Chinese (Taiwan Standard)\",\n    \"tw2s\": \"Traditional Chinese (Taiwan Standard) to Simplified Chinese\",\n    \"s2hk\": \"Simplified Chinese to Traditional Chinese (Hong Kong variant)\",\n    \"hk2s\": \"Traditional Chinese (Hong Kong variant) to Simplified Chinese\",\n    \"s2twp\": \"Simplified Chinese to Traditional Chinese (Taiwan variant)\",\n    \"tw2sp\": \"Traditional Chinese (Taiwan variant) to Simplified Chinese\",\n    \"t2tw\": \"Traditional Chinese (OpenCC Standard) to Taiwan Standard\",\n    \"hk2t\": \"Traditional Chinese (Hong Kong variant) to Traditional Chinese\",\n    \"t2hk\": \"Traditional Chinese (OpenCC Standard) to Hong Kong variant\",\n    \"t2jp\": \"Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\",\n    \"jp2t\": \"New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\",\n    \"tw2t\": \"Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\",\n}\n\n\ndef download_button(data: bytes, download_filename: str) -> None:\n    pass\n\n\nst.set_page_config(\n    page_title=\"EPUBHV, a toolset to convert your EPUB\",\n    page_icon=\"\ud83d\udcd6\",\n    layout=\"centered\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None,\n)\nst.header(\"\ud83d\udcd6 EPUBHV, a toolset to convert your EPUB\", divider=\"rainbow\")\nst.caption(\n    \"Author: [@yihong0618](https://github.com/yihong0618) | [GitHub](https://github.com/yihong0618/epubhv) | [PyPI](https://pypi.org/project/epubhv/)\"\n)\n\n\ndef run():\n    \"\"\"TODO\"\"\"\n\n\nwith st.form(key=\"my_form\"):\n    epubfile = st.file_uploader(\"Upload an epub file\", type=\"epub\", key=\"epubfile\")\n    method = st.radio(\n        \"Choose a method\",\n        (\"to_vertical\", \"to_horizontal\"),\n        format_func=lambda x: x.replace(\"_\", \" \").title(),\n        horizontal=True,\n        key=\"method\",\n    )\n    need_ruby = st.checkbox(\"Need ruby\", key=\"need_ruby\")\n    need_cantonese = st.checkbox(\"Need cantonese\", key=\"need_cantonese\")\n    convert = st.selectbox(\n        \"Transform text\",\n        options=[\n            \"none\",\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        format_func=LABELS.__getitem__,\n        key=\"convert\",\n    )\n    punctuation = st.selectbox(\n        \"Transform punctuation\",\n        options=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        format_func=LABELS.__getitem__,\n        key=\"punctuation\",\n    )\n    st.form_submit_button(label=\"Transform\", on_click=run)\n```\n\n---\nFunction Complement\n---\ndef run():\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef run():\n    if st.session_state[\"epubfile\"] is None:\n        st.error(\"Please upload an epub file\")\n        return\n    epubfile = st.session_state[\"epubfile\"]\n    with tempfile.TemporaryDirectory() as tmpdir, st.spinner(\"Processing...\"):\n        with open(Path(tmpdir) / epubfile.name, \"wb\") as f:\n            f.write(epubfile.read())\n        convert = st.session_state[\"convert\"]\n        epubhv = EPUBHV(\n            file_path=Path(tmpdir) / epubfile.name,\n            need_ruby=st.session_state[\"need_ruby\"],\n            need_cantonese=st.session_state[\"need_cantonese\"],\n            convert_to=None if convert == \"none\" else convert,\n            convert_punctuation=st.session_state[\"punctuation\"],\n        )\n        result = epubhv.run(method=st.session_state[\"method\"], dest=Path(tmpdir))\n        download_button(result.read_bytes(), result.name)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/cli.py`.\n\n```python\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nfrom pathlib import Path\nfrom typing import cast\nfrom epubhv.epubhv import EPUBHV, list_all_epub_in_dir\n\n\nclass Options:\n    epub: str\n    method: str\n    convert: str\n    punctuation: str\n    ruby: bool\n    cantonese: bool\n    dest: Path\n\n\ndef main() -> None:\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "current_file_path": "epubhv/cli.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/cli.py`.\n\n```python\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nfrom pathlib import Path\nfrom typing import cast\nfrom epubhv.epubhv import EPUBHV, list_all_epub_in_dir\n\n\nclass Options:\n    epub: str\n    method: str\n    convert: str\n    punctuation: str\n    ruby: bool\n    cantonese: bool\n    dest: Path\n\n\ndef main() -> None:\n    \"\"\"TODO\"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\nFunction Complement\n---\ndef main() -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef main() -> None:\n    parser = ArgumentParser(formatter_class=RawTextHelpFormatter)\n    parser.add_argument(\"epub\", help=\"file or dir that contains epub files to change\")\n    parser.add_argument(\n        \"--v\",\n        dest=\"method\",\n        action=\"store_const\",\n        const=\"to_vertical\",\n        default=\"to_vertical\",\n        help=\"change all the epub files to vertical.\",\n    )\n    parser.add_argument(\n        \"--h\",\n        dest=\"method\",\n        action=\"store_const\",\n        const=\"to_horizontal\",\n        help=\"change all the epub files to hortical.\",\n    )\n    parser.add_argument(\n        \"--ruby\",\n        dest=\"ruby\",\n        action=\"store_true\",\n        help=\"Ruby it for Chinese and Japanese.\",\n    )\n    parser.add_argument(\n        \"--cantonese\",\n        dest=\"cantonese\",\n        action=\"store_true\",\n        help=\"Ruby it for cantonese.\",\n    )\n    parser.add_argument(\n        \"-d\",\n        \"--dest\",\n        help=\"destination dir to save the epub files, default to current directory\",\n        default=\".\",\n        type=Path,\n    )\n    parser.add_argument(\n        \"--punctuation\",\n        dest=\"punctuation\",\n        choices=[\"auto\", \"t2s\", \"s2t\", \"none\"],\n        default=\"auto\",\n        help=\"\"\"convert punctuation to specific locale and direction (default: auto)\n    \n            none: do not convert based on the direction\n            other options convert between vertical and horizontal punctuation\n            \"\"\",\n    )\n    parser.add_argument(\n        \"--convert\",\n        dest=\"convert\",\n        choices=[\n            \"s2t\",\n            \"t2s\",\n            \"s2tw\",\n            \"tw2s\",\n            \"s2hk\",\n            \"hk2s\",\n            \"s2twp\",\n            \"tw2sp\",\n            \"t2tw\",\n            \"hk2t\",\n            \"t2hk\",\n            \"t2jp\",\n            \"jp2t\",\n            \"tw2t\",\n        ],\n        help=\"\"\"\n    change all the epub files to specific language\n    \n    \n    s2t: Simplified Chinese to Traditional Chinese\n    t2s: Traditional Chinese to Simplified Chinese\n    s2tw: Simplified Chinese to Traditional Chinese (Taiwan Standard)\n    tw2s: Traditional Chinese (Taiwan Standard) to Simplified Chinese\n    s2hk: Simplified Chinese to Traditional Chinese (Hong Kong variant)\n    hk2s: Traditional Chinese (Hong Kong variant) to Simplified Chinese\n    s2twp: Simplified Chinese to Traditional Chinese (Taiwan variant)\n    tw2sp: Traditional Chinese (Taiwan variant) to Simplified Chinese\n    t2tw: Traditional Chinese (OpenCC Standard) to Taiwan Standard\n    hk2t: Traditional Chinese (Hong Kong variant) to Traditional Chinese\n    t2hk: Traditional Chinese (OpenCC Standard) to Hong Kong variant\n    t2jp: Traditional Chinese Characters (Ky\u016bjitai) to New Japanese Kanji\n    jp2t: New Japanese Kanji to Traditional Chinese Characters (Ky\u016bjitai)\n    tw2t: Traditional Chinese (OpenCC Standard) to Traditional Chinese (Taiwan standard)\n            \"\"\",\n    )\n    options = cast(Options, parser.parse_args())\n    epub_files = Path(options.epub)\n    if epub_files.exists():\n        if epub_files.is_dir():\n            files: set[Path] = list_all_epub_in_dir(path=epub_files)\n            f: Path\n            for f in files:\n                print(f\"{str(f)} is {options.method}\")\n                try:\n                    epubhv: EPUBHV = EPUBHV(\n                        file_path=f,\n                        convert_to=options.convert,\n                        convert_punctuation=options.punctuation,\n                        need_ruby=options.ruby,\n                        need_cantonese=options.cantonese,\n                    )\n                    epubhv.run(method=options.method, dest=options.dest)\n                except Exception as e:\n                    print(f\"{str(f)} {options.method} is failed by {str(e)}\")\n        else:\n            print(f\"{str(epub_files)} is {options.method}\")\n            epubhv: EPUBHV = EPUBHV(\n                file_path=epub_files,\n                convert_to=options.convert,\n                need_ruby=options.ruby,\n                need_cantonese=options.cantonese,\n            )\n            epubhv.run(method=options.method, dest=options.dest)\n    else:\n        raise Exception(\"Please make sure it is a dir contains epub or is a epub file.\")\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    \"\"\"TODO\"\"\"\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    \"\"\"TODO\"\"\"\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    return set(path.rglob(\"*.epub\"))\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    \"\"\"TODO\"\"\"\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    \"\"\"TODO\"\"\"\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    files_dict: Dict[str, List[Path]] = defaultdict(list)\n    for root, _, filenames in os.walk(dir_path):\n        for filename in filenames:\n            files_dict[Path(filename).suffix].append(Path(root) / Path(filename))\n    return files_dict\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    \"\"\"TODO\"\"\"\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    \"\"\"TODO\"\"\"\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef load_opf_meta_data(opf_file: Path) -> bs:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    with open(opf_file, encoding=\"utf-8\", errors=\"ignore\") as f:\n        content: str = f.read()\n        soup: bs = bs(content, \"xml\")\n    return soup\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        \"\"\"TODO\"\"\"\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        \"\"\"TODO\"\"\"\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __init__(\n        self,\n        file_path: Path,\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __init__(\n        self,\n        file_path: Path,\n    self.epub_file = file_path\n    self.has_css_file: bool = False\n    self.need_ruby: bool = need_ruby\n    self.ruby_language = None\n    self.cantonese = need_cantonese\n    self.files_dict: Dict[str, List[Path]] = {}\n    self.content_files_list: List[Path] = []\n    self.convert_punctuation = convert_punctuation\n    self.convert_to = convert_to\n    self.converter = opencc.OpenCC(convert_to) if convert_to is not None else None\n    \n\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        \"\"\"TODO\"\"\"\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef extract_one_epub_to_dir(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef extract_one_epub_to_dir(self) -> None:\n    assert self.epub_file.suffix == \".epub\", f\"{self.epub_file} Must be epub file\"\n    book_name: str = self.epub_file.name.split(\".\")[0]\n    self.book_name = book_name\n    book_path = Path(\".epub_temp_dir\") / Path(book_name)\n    Path(\".epub_temp_dir\").mkdir(parents=True, exist_ok=True)\n    with zipfile.ZipFile(self.epub_file) as f:\n        f.extractall(book_path)\n    self.book_path = book_path\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        \"\"\"TODO\"\"\"\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        \"\"\"TODO\"\"\"\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n    with open(html_file_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as file:\n        content: str = file.read()\n    soup: bs = bs(content, \"html.parser\")\n    head: Optional[Tag | NavigableString] = soup.find(\"head\")\n    if not head or type(head) is NavigableString:\n        head = soup.new_tag(\"head\")\n        soup.html.insert(0, head)\n    head.append(bs(stylesheet_line, \"html.parser\").contents[0])\n    with open(html_file_path, \"w\", encoding=\"utf-8\", errors=\"ignore\") as file:\n        file.write(str(soup))\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef make_epub_values(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef make_epub_values(self) -> None:\n    \"\"\"\n    setups:\n      1. extract the epub files\n      2. make the file dict\n      3. find the key file -> opf file\n      4. find if has css file and make all css files to list\n    \"\"\"\n    self.extract_one_epub_to_dir()\n    self.files_dict = make_epub_files_dict(self.book_path)\n    self.content_files_list = (\n        self.files_dict.get(\".html\", [])\n        + self.files_dict.get(\".xhtml\", [])\n        + self.files_dict.get(\".htm\", [])\n    )\n    opf_files = self.files_dict.get(\".opf\", [])\n    assert len(opf_files) == 1, \"Epub must have only one opf file\"\n    self.opf_file = opf_files[0]\n    self.opf_dir = self.opf_file.parent.absolute()\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        \"\"\"TODO\"\"\"\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        \"\"\"TODO\"\"\"\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef __detect_language(self):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __detect_language(self):\n    c = Counter()\n    for f in self.content_files_list:\n        with open(f, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            content: str = f.read()\n        sp: bs = bs(content, \"html.parser\")\n        if sp.body:\n            body_text: str = sp.body.get_text()\n            try:\n                language = detect(body_text)\n                c[language] += 1\n            except LangDetectException:\n                pass\n    if c:\n        language = c.most_common()[0][0]\n        if language in [\"ko\", \"zh-tw\"]:\n            self.ruby_language = \"cantonese\" if self.cantonese else language\n            self.need_ruby = True\n        elif language in [\"ja\"]:\n            self.ruby_language = \"ja\"\n            self.need_ruby = True\n        elif language in [\"zh\", \"zh-cn\"]:\n            self.ruby_language = \"zh\"\n            self.need_ruby = True\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        \"\"\"TODO\"\"\"\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        \"\"\"TODO\"\"\"\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef _make_ruby_language(self, soup):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef _make_ruby_language(self, soup):\n    if self.need_ruby:\n        languages = soup.find(\"dc:language\")\n        if languages and 0:\n            language = languages.contents[0]\n            if language in [\"ja\", \"zh\", \"zh-cn\"]:\n                self.ruby_language = language\n                self.need_ruby = True\n            else:\n                print(\n                    f\"\"\"Ruby feature do not support this language -> {language}, \n     for book: {self.book_name} we will ignore it.\"\"\"\n                )\n                self.need_ruby = False\n        else:\n            self.__detect_language()\n            if not self.ruby_language:\n                print(\n                    \"There's no language meta data in meta file and can not detect the language, we use Japanese as default. we can not ruby it\"\n                )\n                self.need_ruby = False\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef change_epub_to_vertical(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef change_epub_to_vertical(self) -> None:\n    \"\"\"\n    steps:\n      1. check if have CSS files\n      2. check the epub spine `page-progression-direction` add to it\n      3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n      4. if we have added CSS files we need to check if have `html` attribute\n      5. if have `html` attribute add vertical-rl to it\n      6. if have not `html` we add it\n      7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n    \"\"\"\n    soup: bs = load_opf_meta_data(self.opf_file)\n    self._make_ruby_language(soup)\n    spine: Optional[Tag | NavigableString] = soup.find(\"spine\")\n    assert spine is not None\n    if spine.attrs.get(\"page-progression-direction\", \"\") != \"rtl\":\n        spine.attrs[\"page-progression-direction\"] = \"rtl\"\n    meta_list: ResultSet[Tag] = soup.find_all(\"meta\")\n    for m in meta_list:\n        if m.attrs.get(\"name\", \"\") == \"primary-writing-mode\":\n            m.attrs[\"content\"] = \"vertical-rl\"\n    else:\n        meta_list.append(bs(V_STYLE_LINE_IN_OPF, \"xml\").contents[0])\n    manifest: Tag = soup.find_all(\"manifest\")[0]\n    items = [i for i in manifest.find_all(\"item\")]\n    self.css_files = [\n        (self.opf_dir / Path(i.attrs.get(\"href\", \"\")))\n        for i in items\n        if i.attrs.get(\"media-type\", \"\") == \"text/css\"\n    ]\n    self.has_css_file = len(self.css_files) > 0\n    if self.has_css_file:\n        css: Path\n        for css in self.css_files:\n            c: CSSParser = CSSParser()\n            p: CSSStyleSheet = c.parseFile(css)\n            has_html_or_body: bool = False\n            for s in p.cssRules.rulesOfType(1):\n                if s.selectorText == \"html\":\n                    has_html_or_body = True\n                    for w in WRITING_KEY_LIST:\n                        if w not in s.style.keys():\n                            s.style[w] = \"vertical-rl\"\n            if not has_html_or_body:\n                p.add(\n                    \"\"\"\n                            html {\n                                -epub-writing-mode: vertical-rl;\n                                writing-mode: vertical-rl;\n                                -webkit-writing-mode: vertical-rl;\n                            }\n                            \"\"\"\n                )\n            css_style = p.cssText\n            with open(css, \"wb\") as file:\n                file.write(css_style)\n    else:\n        style_path: Path = Path(self.opf_dir) / Path(\"Style\")\n        if not style_path.exists():\n            os.mkdir(style_path)\n        new_css_file: Path = style_path / Path(\"style.css\")\n        with open(new_css_file, \"w\", encoding=\"utf-8\", errors=\"ignore\") as file:\n            file.write(\n                \"\"\"\n    @charset \"utf-8\";\n    html {\n      -epub-writing-mode: vertical-rl;\n      writing-mode: vertical-rl;\n      -webkit-writing-mode: vertical-rl;\n    }\n                            \"\"\"\n            )\n        soup.find_all(\"manifest\")[0].append(\n            bs(V_ITEM_TO_ADD_IN_MANIFEST, \"xml\").contents[0]\n        )\n        f: Path\n        for f in self.content_files_list:\n            self._add_stylesheet_to_html(html_file_path=f, stylesheet_line=V_STYLE_LINE)\n    with open(self.opf_file, \"w\", encoding=\"utf-8\", errors=\"ignore\") as file:\n        file.write(str(soup))\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        \"\"\"TODO\"\"\"\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef change_epub_to_horizontal(self) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef change_epub_to_horizontal(self) -> None:\n    \"\"\"\n    steps:\n      1. check if have CSS files\n      2. check the epub spine `page-progression-direction` add to it\n      3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n      4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n    \"\"\"\n    soup: bs = load_opf_meta_data(self.opf_file)\n    self._make_ruby_language(soup)\n    spine: Optional[Tag | NavigableString] = soup.find(\"spine\")\n    assert spine is not None\n    if spine.attrs.get(\"page-progression-direction\", \"\") != \"ltr\":\n        spine.attrs[\"page-progression-direction\"] = \"ltr\"\n    meta_list: ResultSet[Tag] = soup.find_all(\"meta\")\n    for m in meta_list:\n        if m.attrs.get(\"name\", \"\") == \"primary-writing-mode\":\n            m.attrs[\"content\"] = \"horizontal-lr\"\n    else:\n        meta_list.append(bs(H_STYLE_LINE_IN_OPF, \"xml\").contents[0])\n    with open(self.opf_file, \"w\", encoding=\"utf-8\", errors=\"ignore\") as file:\n        file.write(str(soup))\n    manifest: Tag = soup.find_all(\"manifest\")[0]\n    items = [i for i in manifest.find_all(\"item\")]\n    self.css_files = [\n        (self.opf_dir / Path(i.attrs.get(\"href\", \"\")))\n        for i in items\n        if i.attrs.get(\"media-type\", \"\") == \"text/css\"\n    ]\n    self.has_css_file = len(self.css_files) > 0\n    if self.has_css_file:\n        for css in self.css_files:\n            c: CSSParser = CSSParser()\n            p: CSSStyleSheet = c.parseFile(css)\n            for s in p.cssRules.rulesOfType(1):\n                for k in s.style.keys():\n                    if k in WRITING_KEY_LIST:\n                        del s.style[k]\n            css_style = p.cssText\n            with open(css, \"wb\") as file:\n                file.write(css_style)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        \"\"\"TODO\"\"\"\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        \"\"\"TODO\"\"\"\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef convert(self, method: str = \"to_vertical\") -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef convert(self, method: str = \"to_vertical\") -> None:\n    if self.converter is None and not self.need_ruby:\n        return\n    html_file: Path\n    for html_file in self.content_files_list:\n        with open(html_file, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            content: str = f.read()\n        soup: bs = bs(content, \"html.parser\")\n        if self.converter:\n            html_element = soup.find(\"html\")\n            assert isinstance(html_element, Tag)\n            text_elements: ResultSet[PageElement] = html_element.find_all(string=True)\n            element: Tag\n            for element in text_elements:\n                old_text = element.string\n                if old_text is not None:\n                    new_text = self.converter.convert(old_text)\n                    punc = self.convert_punctuation\n                    if punc != \"none\":\n                        if punc == \"auto\":\n                            if self.convert_to is None:\n                                punc = \"s2t\" if method == \"to_vertical\" else \"t2t\"\n                            else:\n                                punc = self.convert_to\n                        source, target = punc.split(\"2\")\n                        punc_converter = Punctuation()\n                        new_text = punc_converter.convert(\n                            new_text,\n                            horizontal=method == \"to_horizontal\",\n                            source_locale=punc_converter.map_locale(source),\n                            target_locale=punc_converter.map_locale(target),\n                        )\n                element.string.replace_with(new_text)\n                html_element.replace_with(html_element)\n            with open(html_file, \"w\", encoding=\"utf-8\") as file:\n                html_element.replace_with(html_element)\n            with open(html_file, \"w\", encoding=\"utf-8\", errors=\"ignore\") as file:\n                file.write(soup.prettify())\n        if self.need_ruby:\n            ruby_soup = bs(content, \"html.parser\", string_containers=string_containers)\n            r = RubySoup(self.ruby_language, True)\n            r.ruby_soup(ruby_soup.body)\n            with open(html_file, \"w\", encoding=\"utf-8\") as file:\n                file.write(ruby_soup.prettify())\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        \"\"\"TODO\"\"\"\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        \"\"\"TODO\"\"\"\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n```\n\n---\nFunction Complement\n---\ndef pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n    lang = \"original\"\n    if self.convert_to is not None:\n        lang = self.convert_to\n    if self.need_ruby:\n        lang = f\"{lang}-ruby\"\n    if method == \"to_vertical\":\n        book_name = f\"{self.book_name}-v-{lang}.epub\"\n    else:\n        book_name = f\"{self.book_name}-h-{lang}.epub\"\n    pack_to = dest / book_name\n    shutil.make_archive(base_name=str(pack_to), format=\"zip\", root_dir=self.book_path)\n    os.rename(src=f\"{pack_to}.zip\", dst=pack_to)\n    shutil.rmtree(self.book_path)\n    return pack_to\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "epubhv/epubhv.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/epubhv.py`.\n\n```python\n\"\"\"\nFollow these steps to change epub books to vertical or horizontal.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport zipfile\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\nimport cssutils\nimport opencc\nfrom bs4 import BeautifulSoup as bs\nfrom bs4 import NavigableString, PageElement, ResultSet, Tag\nfrom cssutils import CSSParser\nfrom cssutils.css import CSSStyleSheet\nfrom epubhv.punctuation import Punctuation\nfrom epubhv.yomituki import RubySoup, string_containers\nfrom langdetect import LangDetectException, detect\n\ncssutils.log.setLevel(logging.CRITICAL)\nWRITING_KEY_LIST: List[str] = [\n    \"writing-mode\",\n    \"-webkit-writing-mode\",\n    \"-epub-writing-mode\",\n]\nV_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nH_STYLE_LINE: str = (\n    '<link rel=\"stylesheet\" href=\"../Style/style.css\" type=\"text/css\" />'\n)\nV_STYLE_LINE_IN_OPF: str = '<meta content=\"vertical-rl\" name=\"primary-writing-mode\"/>'\nH_STYLE_LINE_IN_OPF: str = '<meta content=\"horizontal-lr\" name=\"primary-writing-mode\"/>'\nV_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\nH_ITEM_TO_ADD_IN_MANIFEST: str = (\n    '<item id=\"stylesheet\" href=\"Style/style.css\" media-type=\"text/css\" />'\n)\n\n\ndef list_all_epub_in_dir(path: Path) -> set[Path]:\n    pass\n\n\ndef make_epub_files_dict(dir_path: Path) -> Dict[str, List[Path]]:\n    pass\n\n\ndef load_opf_meta_data(opf_file: Path) -> bs:\n    pass\n\n\nclass EPUBHV:\n    book_path: Path\n    book_name: str\n    opf_file: Path\n\n    def __init__(\n        self,\n        file_path: Path,\n        convert_to: Optional[str] = None,\n        convert_punctuation: str = \"auto\",\n        need_ruby: bool = False,\n        need_cantonese: bool = False,\n    ) -> None:\n        pass\n\n    def extract_one_epub_to_dir(self) -> None:\n        pass\n\n    @staticmethod\n    def _add_stylesheet_to_html(html_file_path: Path, stylesheet_line: str):\n        pass\n\n    def make_epub_values(self) -> None:\n        \"\"\"\n        setups:\n          1. extract the epub files\n          2. make the file dict\n          3. find the key file -> opf file\n          4. find if has css file and make all css files to list\n        \"\"\"\n        pass\n\n    def __detect_language(self):\n        pass\n\n    def _make_ruby_language(self, soup):\n        pass\n\n    def change_epub_to_vertical(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have changed it to vertical-rl, if not add it.\n          4. if we have added CSS files we need to check if have `html` attribute\n          5. if have `html` attribute add vertical-rl to it\n          6. if have not `html` we add it\n          7. if we do not have css file, we add one with html `vertical-rl` and change all the html to add the css files\n        \"\"\"\n        pass\n\n    def change_epub_to_horizontal(self) -> None:\n        \"\"\"\n        steps:\n          1. check if have CSS files\n          2. check the epub spine `page-progression-direction` add to it\n          3. check `primary-writing-mode` in opf file's meta, if have change it to horizontal-rl, if not add it.\n          4. check all css files and remove all \"writing-mode\", \"-webkit-writing-mode\", \"-epub-writing-mode\" to make it default that is horizontal\n        \"\"\"\n        pass\n\n    def convert(self, method: str = \"to_vertical\") -> None:\n        pass\n\n    def pack(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        pass\n\n    def run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef run(self, method: str = \"to_vertical\", dest: Path = Path.cwd()) -> Path:\n    assert method in [\n        \"to_horizontal\",\n        \"to_vertical\",\n    ], \"must be to_horizontal or to_vertical.\"\n    self.make_epub_values()\n    if method == \"to_vertical\":\n        self.change_epub_to_vertical()\n    elif method == \"to_horizontal\":\n        self.change_epub_to_horizontal()\n    else:\n        raise Exception(\"Only support epub to vertical or horizontal for now\")\n    self.convert(method=method)\n    return self.pack(method=method, dest=dest)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        \"\"\"TODO\"\"\"\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```",
        "current_file_path": "epubhv/punctuation.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        \"\"\"TODO\"\"\"\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```\n\n---\nFunction Complement\n---\ndef convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    if horizontal:\n        text = self.batch_replace(\n            text=text, replacement_dict={\"\ufe41\": \"\u300c\", \"\ufe42\": \"\u300d\", \"\ufe43\": \"\u300e\", \"\ufe44\": \"\u300f\"}\n        )\n    if source_locale != target_locale:\n        if source_locale == \"hans\":\n            text = self.batch_replace(\n                text=text, replacement_dict={\"\u2018\": \"\u300c\", \"\u2019\": \"\u300d\", \"\u201c\": \"\u300e\", \"\u201d\": \"\u300f\"}\n            )\n        text = self.batch_replace(\n            text=text, replacement_dict={\"\u300e\": \"\u300c\", \"\u300f\": \"\u300d\", \"\u300c\": \"\u300e\", \"\u300d\": \"\u300f\"}\n        )\n        if target_locale == \"hans\" and horizontal:\n            text = self.batch_replace(\n                text=text, replacement_dict={\"\u300c\": \"\u2018\", \"\u300d\": \"\u2019\", \"\u300e\": \"\u201c\", \"\u300f\": \"\u201d\"}\n            )\n    return text\n    \n\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        \"\"\"TODO\"\"\"\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```",
        "current_file_path": "epubhv/punctuation.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        \"\"\"TODO\"\"\"\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        pass\n```\n\n---\nFunction Complement\n---\ndef map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n    if x in [\"s\", \"sp\"]:\n        return \"hans\"\n    return \"hant\"\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "epubhv/punctuation.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/punctuation.py`.\n\n```python\nimport re\nfrom typing import Dict, Literal\n\n\nclass Punctuation:\n    def convert(\n        self, text: str, horizontal: bool, source_locale: str, target_locale: str\n    ) -> str:\n        pass\n\n    def map_locale(self, x: str) -> Literal[\"hans\", \"hant\"]:\n        pass\n\n    def batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef batch_replace(self, text: str, replacement_dict: Dict[str, str]) -> str:\n    if len(replacement_dict) == 0:\n        return text\n    return re.sub(\n        \"|\".join(re.escape(key) for key in replacement_dict.keys()),\n        lambda k: replacement_dict[k.group(0)],\n        text,\n    )\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    \"\"\"TODO\"\"\"\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    \"\"\"TODO\"\"\"\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef point_ruby_to_blod(soup):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef point_ruby_to_blod(soup):\n    for ruby in soup.find_all(\"ruby\"):\n        rt = ruby.rt.string.strip()\n        if rt in \"\u30fb\" * 100:\n            rep = basesoup.new_tag(\"b\")\n            rep.string = ruby.text\n            ruby.replace_with(rep)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    \"\"\"TODO\"\"\"\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    \"\"\"TODO\"\"\"\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef kata2hira(str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef kata2hira(str):\n    return str.translate(k2h)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    \"\"\"TODO\"\"\"\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    \"\"\"TODO\"\"\"\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef hantei_japanese(word):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef hantei_japanese(word):\n    text = word.surface\n    kana = word.feature.kana\n    lemma = word.feature.lemma or \"\"\n    if \"-\" in lemma:\n        english_text = re.sub(\"[^a-zA-Z\\\\s]\", \"\", lemma.split(\"-\")[1])\n        if english_text:\n            return text, True, english_text\n    if text == kana or kana in (None, \"\", \"*\") or text in (None, \"\", \"*\"):\n        return text, False, None\n    hira = kata2hira(str(kana))\n    if text == hira:\n        return text, False, None\n    else:\n        return text, True, hira\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    \"\"\"TODO\"\"\"\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    \"\"\"TODO\"\"\"\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef hantei_chinese(word):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef hantei_chinese(word):\n    pin = \" \"\n    for wordt in pinyin(word):\n        pin = \" \" + pin + \" \" + wordt[0]\n    pin += \" \"\n    return word, True, pin\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    \"\"\"TODO\"\"\"\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    \"\"\"TODO\"\"\"\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef hantei_cantonese(word):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef hantei_cantonese(word):\n    if word[1] is not None:\n        return word[0], True, word[1] + \", \"\n    else:\n        return word[0], False, None\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    \"\"\"TODO\"\"\"\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    \"\"\"TODO\"\"\"\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef cut_end(text, hira):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef cut_end(text, hira):\n    if text[-1] == hira[-1]:\n        for i in range(1, min(len(hira), len(text))):\n            if text[-i - 1] != hira[-i - 1]:\n                yield text[:-i], hira[:-i]\n                yield hira[-i:]\n                break\n    else:\n        yield text, hira\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    \"\"\"TODO\"\"\"\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    \"\"\"TODO\"\"\"\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef yomituki(sentence, lang=\"zh\"):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef yomituki(sentence, lang=\"zh\"):\n    assert lang in [\"zh\", \"zh-cn\", \"zh-tw\", \"ja\", \"cantonese\"], \"Language must zh or ja\"\n    if lang in [\"zh\", \"zh-cn\"]:\n        words_list = jieba.cut(sentence)\n        hantei = hantei_chinese\n    elif lang == \"ja\":\n        words_list = tagger(sentence)\n        hantei = hantei_japanese\n    elif lang in [\"cantonese\"]:\n        words_list = get_jyutping_list(sentence)\n        hantei = hantei_cantonese\n    for text, ruby, yomi in map(hantei, words_list):\n        if ruby:\n            yield from cut_end(text, yomi)\n        else:\n            yield text\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    \"\"\"TODO\"\"\"\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    \"\"\"TODO\"\"\"\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef ruby_wrap(text, yomi):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ruby_wrap(text, yomi):\n    return f\"<ruby>{text}<rp>\uff08</rp><rt>{yomi}</rt><rp>\uff09</rp></ruby>\"\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    \"\"\"TODO\"\"\"\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    \"\"\"TODO\"\"\"\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef tag_wrap(name, str):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef tag_wrap(name, str):\n    new_tag = basesoup.new_tag(name)\n    new_tag.append(str)\n    return new_tag\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    \"\"\"TODO\"\"\"\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    \"\"\"TODO\"\"\"\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef ruby_text(text, lang=\"zh\"):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ruby_text(text, lang=\"zh\"):\n    plain = \"\"\n    if len(text) < 1:\n        return plain\n    yomi = yomituki(text, lang=lang)\n    for i in yomi:\n        if i in (None, \"\"):\n            continue\n        if isinstance(i, str):\n            plain += i\n        else:\n            plain += ruby_wrap(*i)\n    return plain\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        \"\"\"TODO\"\"\"\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        \"\"\"TODO\"\"\"\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef __init__(self, ruby_language, is_ruby_rp=True) -> None:\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef __init__(self, ruby_language, is_ruby_rp=True) -> None:\n    self.is_ruby_rp = is_ruby_rp\n    self.ruby_language = ruby_language\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        \"\"\"TODO\"\"\"\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        \"\"\"TODO\"\"\"\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef ruby_soup(self, soup):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ruby_soup(self, soup):\n    for i in soup.children:\n        if i is not None and type(i) is NavigableString and i.strip():\n            new_i = basesoup.new_tag(\"temptag\")\n            for ele in white_space_re.split(i):\n                if ele.strip():\n                    for ele2 in self.ruby_navigablestring(ele):\n                        new_i.append(ele2)\n            i.replace_with(new_i)\n            new_i.unwrap()\n        elif isinstance(i, Tag) and i.name not in (\"ruby\", \"rt\", \"rp\"):\n            self.ruby_soup(i)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        \"\"\"TODO\"\"\"\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        \"\"\"TODO\"\"\"\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef ruby_navigablestring(self, navigablestring):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ruby_navigablestring(self, navigablestring):\n    yomi = yomituki(str(navigablestring), lang=self.ruby_language)\n    for k, g in groupby(yomi, lambda x: type(x)):\n        if k is None:\n            continue\n        elif k == str:\n            yield \"\".join(g)\n        else:\n            yield self.ruby_wraps_bs4(g)\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        \"\"\"TODO\"\"\"\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        \"\"\"TODO\"\"\"\n\n    def ruby_wraps_bs4(self, yomis):\n        pass\n```\n\n---\nFunction Complement\n---\ndef ruby_wrap_bs4(self, text, yomi):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ruby_wrap_bs4(self, text, yomi):\n    ruby_tag = basesoup.new_tag(\"ruby\")\n    ruby_tag.append(text)\n    rt_tag = tag_wrap(\"rt\", yomi)\n    if self.is_ruby_rp:\n        ruby_tag.append(tag_wrap(\"rp\", \"(\"))\n    ruby_tag.append(rt_tag)\n    if self.is_ruby_rp:\n        ruby_tag.append(tag_wrap(\"rp\", \")\"))\n    return ruby_tag\n```"
    },
    {
        "readme": "# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py",
        "relevant_file_paths": [],
        "relevant_file_sketches": "---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        \"\"\"TODO\"\"\"\n```",
        "current_file_path": "epubhv/yomituki.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as some relevant file sketches. Please fill the function body for the given function header.\n\n---\nREADME.md\n---\n# epubhv\n\nepubhv is a tool to make your epub books vertical or horizontal or make them readable for language learners.\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.sh\n\u251c\u2500\u2500 web.py # from epubhv import EPUBHV;\n\u2514\u2500\u2500 epubhv\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 cli.py\n    \u251c\u2500\u2500 epubhv.py\n    \u251c\u2500\u2500 punctuation.py\n    \u2514\u2500\u2500 yomituki.py\n```\n\n---\nCurrent File Sketch/1\n---\nHere is the file sketch of `epubhv/yomituki.py`.\n\n```python\n\"\"\"\nThis file is copy from https://github.com/Mumumu4/furigana4epub great thanks\nThe pinyin is from https://github.com/shotazc/pinyin2epub/blob/master/pinyin2epub.py \nI made some change\n\n\"\"\"\nimport re\nfrom itertools import groupby\nimport jieba\nfrom bs4 import BeautifulSoup\nfrom bs4.element import NavigableString, Script, Stylesheet, Tag, TemplateString\nfrom fugashi import Tagger\nfrom pypinyin import pinyin\nfrom ToJyutping import get_jyutping_list\n\ntagger = Tagger()\nkatakana_chart = \"\u30a1\u30a2\u30a3\u30a4\u30a5\u30a6\u30a7\u30a8\u30a9\u30aa\u30ab\u30ac\u30ad\u30ae\u30af\u30b0\u30b1\u30b2\u30b3\u30b4\u30b5\u30b6\u30b7\u30b8\u30b9\u30ba\u30bb\u30bc\u30bd\u30be\u30bf\u30c0\u30c1\u30c2\u30c3\u30c4\u30c5\u30c6\u30c7\u30c8\u30c9\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d0\u30d1\u30d2\u30d3\u30d4\u30d5\u30d6\u30d7\u30d8\u30d9\u30da\u30db\u30dc\u30dd\u30de\u30df\u30e0\u30e1\u30e2\u30e3\u30e4\u30e5\u30e6\u30e7\u30e8\u30e9\u30ea\u30eb\u30ec\u30ed\u30ee\u30ef\u30f0\u30f1\u30f2\u30f3\u30f4\u30f5\u30f6\u30fd\u30fe\"\nhiragana_chart = \"\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304a\u304b\u304c\u304d\u304e\u304f\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305a\u305b\u305c\u305d\u305e\u305f\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306a\u306b\u306c\u306d\u306e\u306f\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307a\u307b\u307c\u307d\u307e\u307f\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308a\u308b\u308c\u308d\u308e\u308f\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309d\u309e\"\nh2k = str.maketrans(hiragana_chart, katakana_chart)\nk2h = str.maketrans(katakana_chart, hiragana_chart)\nwhite_space_re = re.compile(\"(\\\\s+)\")\n\n\nclass RBString(NavigableString):\n    \"\"\"class for <ruby> tag\"\"\"\n\n    pass\n\n\nclass RTString(NavigableString):\n    \"\"\"class for <rt> tag\"\"\"\n\n    pass\n\n\nclass RPString(NavigableString):\n    \"\"\"class for <rp> tag\"\"\"\n\n    pass\n\n\nstring_containers = {\n    \"rp\": RPString,\n    \"rt\": RTString,\n    \"style\": Stylesheet,\n    \"script\": Script,\n    \"template\": TemplateString,\n}\nbasesoup = BeautifulSoup(\"<b></b>\", \"lxml\", string_containers=string_containers)\n\n\ndef point_ruby_to_blod(soup):\n    pass\n\n\ndef kata2hira(str):\n    pass\n\n\ndef hantei_japanese(word):\n    pass\n\n\ndef hantei_chinese(word):\n    pass\n\n\ndef hantei_cantonese(word):\n    pass\n\n\ndef cut_end(text, hira):\n    pass\n\n\ndef yomituki(sentence, lang=\"zh\"):\n    pass\n\n\ndef ruby_wrap(text, yomi):\n    pass\n\n\ndef tag_wrap(name, str):\n    pass\n\n\ndef ruby_text(text, lang=\"zh\"):\n    pass\n\n\nclass RubySoup:\n    def __init__(self, ruby_language, is_ruby_rp=True) -> None:\n        pass\n\n    def ruby_soup(self, soup):\n        pass\n\n    def ruby_navigablestring(self, navigablestring):\n        pass\n\n    def ruby_wrap_bs4(self, text, yomi):\n        pass\n\n    def ruby_wraps_bs4(self, yomis):\n        \"\"\"TODO\"\"\"\n```\n\n---\nFunction Complement\n---\ndef ruby_wraps_bs4(self, yomis):\n",
        "input": "",
        "output": "Here is a complete function body.\n\n```python\ndef ruby_wraps_bs4(self, yomis):\n    ruby_tag = basesoup.new_tag(\"ruby\")\n    for text, yomi in yomis:\n        ruby_tag.append(text)\n        rt_tag = tag_wrap(\"rt\", yomi)\n        if self.is_ruby_rp:\n            ruby_tag.append(tag_wrap(\"rp\", \"(\"))\n        ruby_tag.append(rt_tag)\n        if self.is_ruby_rp:\n            ruby_tag.append(tag_wrap(\"rp\", \")\"))\n    return ruby_tag\n```"
    }
]