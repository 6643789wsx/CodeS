[
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n__version__ = \"0.1.10\"\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/const.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/const.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nCOLOR_USER = \"green\"\nCOLOR_NICE = \"blue\"\nCOLOR_SYSTEM = \"#006400\"\nCOLOR_IDLE = \"#2F4F4F\"\nCOLOR_C_STATE = \"#008000\"\nCOLOR_P_STATE = \"#FF8C00\"\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/layout_loader.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/layout_loader.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport xml.etree.ElementTree as ET\nfrom pathlib import Path\nfrom mactop.layouts import LAYOUTS\nfrom mactop.panels import PANELS\n\nlogger = logging.getLogger(__name__)\nCACHE_LOCATION = Path(\"~/.config/mactop/cache\").expanduser()\n\n\nclass XmlLayoutLoader:\n    COMMON_ATTRS = \"id\", \"class\", \"name\"\n\n    def __init__(self, location, refresh_interval) -> None:\n        pass\n\n    def load(self):\n        pass\n\n    def compose_body(self, layout):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/main.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/main.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport os\nimport threading\nimport time\nfrom pathlib import Path\nimport click\nfrom mactop.layout_loader import XmlLayoutLoader\nfrom mactop.metrics_source import IORegManager, PowerMetricsManager, PsutilManager\nfrom mactop.widgets.header import MactopHeader\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding\nfrom textual.widgets import Footer\nfrom . import __version__\n\nLOG_LOCATION = \"/tmp/mactop.log\"\nlogger = logging.getLogger(__name__)\nuser_exited_event = threading.Event()\n\n\ndef setup_log(enabled, level, loglocation):\n    pass\n\n\nclass MactopApp(App):\n    BINDINGS = [\n        Binding(\"ctrl+c,q\", \"exit\", \"Exit\", show=True, priority=True, key_display=\"Q\")\n    ]\n\n    def __init__(self, app_body_items, user_exited_event, *args, **kwargs):\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        pass\n\n    def action_toggle_dark(self) -> None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        pass\n\n    def action_exit(self) -> None:\n        pass\n\n\nLOG_LEVEL = {\n    (0): logging.CRITICAL,\n    (1): logging.WARNING,\n    (2): logging.INFO,\n    (3): logging.DEBUG,\n}\n\n\ndef print_version(ctx, param, value):\n    pass\n\n\n@click.command()\n@click.option(\n    \"--theme\",\n    \"-t\",\n    default=Path(__file__).parent / \"themes/mactop.xml\",\n    help=\"Mactop theme file location.\",\n)\n@click.option(\n    \"--auto-reload\",\n    \"-a\",\n    default=False,\n    help=\"Debug mode for designing new theme, when theme changed, app will auto reload\",\n    is_flag=True,\n    show_default=True,\n)\n@click.option(\"--refresh-interval\", \"-r\", default=1.0, help=\"Refresh interval seconds\")\n@click.option(\"-v\", \"--verbose\", count=True, default=2)\n@click.option(\"-l\", \"--log-to\", type=click.Path(), default=None)\n@click.option(\"--powermetrics-fake\", type=click.Path(), default=None)\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True\n)\n@click.option(\"--debug/--no-debug\", default=False)\ndef main(\n    theme, auto_reload, refresh_interval, verbose, log_to, powermetrics_fake, debug\n):\n    pass\n\n\ndef watch_theme_file_with_app(theme_file, app):\n    pass\n\n\ndef try_path(theme):\n    pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/metrics_store.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/metrics_store.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport enum\nfrom dataclasses import dataclass, field\nfrom typing import List, Tuple\nimport psutil\nfrom mactop.utils import RWLock\n\n\nclass ProcessorType(enum.Enum):\n    INTEL = \"intel\"\n    M1 = \"M1\"\n\n\n@dataclass\nclass Smc:\n    cpu_die: int | None = None\n    gpu_die: int | None = None\n    fan: float | None = None\n\n\n@dataclass\nclass PowerMetricsBattery:\n    plugged_in: bool | None = None\n    discharge_rate: float | None = None\n\n\n@dataclass\nclass Netowrk:\n    ipacket_rate: float | None = None\n    opacket_rate: float | None = None\n    ibyte_rate: float | None = None\n    obyte_rate: float | None = None\n    ipacket_rate_history: List[float] | None = None\n    opacket_rate_history: List[float] | None = None\n    ibyte_rate_history: List[float] | None = None\n    obyte_rate_history: List[float] | None = None\n\n\n@dataclass\nclass CPU:\n    cpu_number: int | None = None\n    freq_hz: float | None = None\n    freq_ratio: float | None = None\n\n\n@dataclass\nclass M1GPU:\n    gpu_energy_ma: int | None = None\n    gpu_energy_ma_history: List[float] | None = None\n    idle_ratio: float | None = None\n    freq_hz: float | None = None\n\n\n@dataclass\nclass CPUCore:\n    cpu_core_index: int | None = None\n    c_state_ratio: float | None = None\n    cpus: List[CPU] | None = None\n\n\n@dataclass\nclass ProcessorPackage:\n    cores: List[CPUCore] | None = None\n    c_state_ratio: float | None = None\n\n\n@dataclass\nclass M1CPUCluster:\n    name: str | None = None\n    idle_ratio: float | None = None\n    cpus: List[CPU] | None = None\n\n\n@dataclass\nclass M1ProcessorPackage:\n    cpu_energy: float | None = None\n    cpu_energy_history: List[float] | None = None\n    gpu_energy: float | None = None\n    clusters: List[M1CPUCluster] | None = None\n\n\n@dataclass\nclass ProcessorIntel:\n    package_watts_history: List[float] | None = None\n    packages: List[ProcessorPackage] | None = None\n\n    def get_core(self, core_index):\n        pass\n\n\n@dataclass\nclass Disk:\n    rops_per_s: float | None = None\n    wops_per_s: float | None = None\n    rbytes_per_s: float | None = None\n    wbytes_per_s: float | None = None\n    rops_per_s_history: List[float] | None = None\n    wops_per_s_history: List[float] | None = None\n    rbytes_per_s_history: List[float] | None = None\n    wbytes_per_s_history: List[float] | None = None\n\n\n@dataclass\nclass PowerMetrics:\n    backlight: int | None = None\n    battery: PowerMetricsBattery = field(default_factory=PowerMetricsBattery)\n    smc: Smc = field(default_factory=Smc)\n    tasks: List[dict] | None = None\n    processor_intel: ProcessorIntel = field(default_factory=ProcessorIntel)\n    processor_type: ProcessorType | None = None\n    network: Netowrk = field(default_factory=Netowrk)\n    disk: Disk = field(default_factory=Disk)\n    m1_gpu: M1GPU = field(default_factory=M1GPU)\n    processor_m1: M1ProcessorPackage = field(default_factory=M1ProcessorPackage)\n\n\n@dataclass\nclass AdapterDetails:\n    adapter_voltage: int | None = None\n    current: int | None = None\n    watts: int | None = None\n    description: str | None = None\n    manufacturer: str | None = None\n    name: str | None = None\n\n\n@dataclass\nclass AppleSmartBattery:\n    apple_raw_current_capacity: int | None = None\n    apple_raw_max_capacity: int | None = None\n    design_capacity: int | None = None\n    temperature: int | None = None\n    cycle_count: int | None = None\n    external_charge_cable: bool | None = None\n    external_connected: bool | None = None\n    is_charging: bool | None = None\n    adapter_details: AdapterDetails = field(default_factory=AdapterDetails)\n    battery_capacity_history: List[Tuple[float, int]] | None = None\n\n\n@dataclass\nclass IORegMetrics:\n    apple_smart_battery: AppleSmartBattery = field(default_factory=AppleSmartBattery)\n\n\n@dataclass\nclass CPUTimesPercent:\n    user: float = 0\n    nice: float = 0\n    system: float = 0\n    idle: float = 0\n\n\n@dataclass\nclass SwapMemory:\n    total_bytes: int | None = 0\n    used_bytes: int | None = 0\n    free_bytes: int | None = 0\n    percent: float | None = 0\n    sin_bytes: int | None = 0\n    sout_bytes: int | None = 0\n\n\n@dataclass\nclass VirtualMemory:\n    total: int | None = 0\n    available: int | None = 0\n    percent: float | None = 0\n    used: int | None = 0\n    free: int | None = 0\n    active: int | None = 0\n    inactive: int | None = 0\n    wired: int | None = 0\n\n\n@dataclass\nclass LoadAvg:\n    load1: float | None = 0\n    load5: float | None = 0\n    load15: float | None = 0\n\n\n@dataclass\nclass PsutilMetrics:\n    cpu_percent_percpu: List[CPUTimesPercent] | None = None\n    cpu_percent: CPUTimesPercent = field(default_factory=CPUTimesPercent)\n    cpu_count: int = psutil.cpu_count()\n    cpu_physical_count: int = psutil.cpu_count(logical=False)\n    swap_memory: SwapMemory = field(default_factory=SwapMemory)\n    virtual_memory: VirtualMemory = field(default_factory=VirtualMemory)\n    loadavg: LoadAvg = field(default_factory=LoadAvg)\n    boot_time: float | None = None\n\n\n@dataclass\nclass Metrics:\n    powermetrics = PowerMetrics()\n    ioregmetrics = IORegMetrics()\n    psutilmetrics = PsutilMetrics()\n    _powermetrics_rwlock = RWLock()\n    _ioreg_rwlock = RWLock()\n\n    def get_psutilmetrics(self):\n        pass\n\n    def set_psutilmetrics(self, p: PsutilMetrics):\n        pass\n\n    def get_powermetrics(self):\n        pass\n\n    def set_powermetrics(self, metrics):\n        pass\n\n    def get_ioregmetrics(self):\n        pass\n\n    def set_ioregmetrics(self, metrics):\n        pass\n\n\nmetrics = Metrics()\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/layouts/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/layouts/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom textual.containers import Horizontal, Vertical\n\nLAYOUTS = {\"Vertical\": Vertical, \"Horizontal\": Horizontal}\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/metrics_source/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/metrics_source/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom .ioreg import IORegManager\nfrom .powermetrics import PowerMetricsManager\nfrom .psutil_manager import PsutilManager\n\n__all__ = [\"PowerMetricsManager\", \"IORegManager\", \"PsutilManager\"]\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/metrics_source/ioreg.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/metrics_source/ioreg.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport plistlib\nimport subprocess\nimport threading\nimport time\nfrom mactop.metrics_store import (\n    AdapterDetails,\n    AppleSmartBattery,\n    IORegMetrics,\n    metrics,\n)\n\nlogger = logging.getLogger(__name__)\n\n\nclass IORegParser:\n    def __init__(self, raw, old_ioreg) -> None:\n        pass\n\n    def parse(self):\n        pass\n\n    def parse_apple_smart_battery_adapter_details(self, adapter_details):\n        pass\n\n    def parse_apple_smart_battery(self, battery_data):\n        pass\n\n\ndef run_ioreg_periodic(stop_event, command, interval):\n    pass\n\n\nclass IORegManager:\n    COMMAND = [\"ioreg\", \"-w\", \"0\", \"-r\", \"-a\", \"-c\", \"AppleSmartBattery\"]\n\n    def __init__(self, interval) -> None:\n        pass\n\n    def start_loop_thread(self):\n        pass\n\n    def start(self):\n        pass\n\n    def stop(self):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/metrics_source/powermetrics.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/metrics_source/powermetrics.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\"\nManaging the backgroud process and parse the metrics\n\"\"\"\nimport json\nimport logging\nimport pathlib\nimport plistlib\nimport subprocess\nimport threading\nimport time\nfrom datetime import datetime\nfrom mactop.metrics_store import (\n    CPU,\n    M1GPU,\n    CPUCore,\n    Disk,\n    M1CPUCluster,\n    M1ProcessorPackage,\n    Netowrk,\n    PowerMetrics,\n    PowerMetricsBattery,\n    ProcessorIntel,\n    ProcessorPackage,\n    ProcessorType,\n    Smc,\n    metrics,\n)\n\nDEBUG_DUMP_LOCATION = \"./debug_json\"\nlogger = logging.getLogger(__name__)\n\n\nclass PowerMetricsParser:\n    def __init__(self, raw, old_powermetrics, interval):\n        pass\n\n    def parse(self):\n        pass\n\n    def parse_processor_m1(self, processor):\n        pass\n\n    def parse_processor_m1_cluster(self, cluster):\n        pass\n\n    def parse_m1_gpu(self, gpu):\n        pass\n\n    def parse_disk(self, disk):\n        pass\n\n    def parse_network(self, network):\n        pass\n\n    def parse_processor_intel(self, processor):\n        pass\n\n    def parse_processor_packages(self, packages):\n        pass\n\n    def parse_processor_packages_cores(self, cores):\n        pass\n\n    def parse_processor_packages_cores_cpus(self, cpus):\n        pass\n\n    def parse_battery_data(self):\n        pass\n\n    def parse_powermetrics_backlight(self):\n        pass\n\n    def parse_smc(self, data):\n        pass\n\n\ndef streaming_powermetrics(stdout_fd, interval, sleep=0, debug=False):\n    \"\\n    The delimiter is \\x00\\n    but I haven't figure out how to read effciently mean while using this \\x00\\n\\n    ref:\\n    https://stackoverflow.com/questions/375427\\n\"\n    pass\n\n\nclass PowerMetricsManager:\n    def __init__(self, refresh_interval_seconds: float, debug: bool) -> None:\n        pass\n\n    def start_background_process(self):\n        pass\n\n    def start(self):\n        pass\n\n    def start_fake_data(self, filepath):\n        pass\n\n    def stop(self):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/metrics_source/psutil_manager.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/metrics_source/psutil_manager.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport threading\nimport time\nimport psutil\nfrom mactop.metrics_store import (\n    CPUTimesPercent,\n    LoadAvg,\n    SwapMemory,\n    VirtualMemory,\n    metrics,\n)\n\nlogger = logging.getLogger(__name__)\n\n\ndef perf_cpu(interval):\n    pass\n\n\ndef get_swap_memory():\n    pass\n\n\ndef get_virtual_memory():\n    pass\n\n\ndef get_loadavg():\n    pass\n\n\ndef get_boot_time():\n    pass\n\n\ndef run_psutil(stop_event, interval):\n    pass\n\n\nclass PsutilManager:\n    def __init__(self, interval: float) -> None:\n        pass\n\n    def start_cpu_prof(self, interval: float):\n        pass\n\n    def start(self):\n        pass\n\n    def stop(self):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.panels.battery import BacklightDisplayText, BatteryPanel\nfrom mactop.panels.cpu_freq import CPUFreqPanel\nfrom mactop.panels.cpu_percpu_usage import CPUUsageBarPanel\nfrom mactop.panels.cpu_total_usage_bar import CPUTotalUsageBarPanel\nfrom mactop.panels.cpu_total_usage_text import CPUTotalUsageTextPanel\nfrom mactop.panels.disk import (\n    DiskIOBytesPerSText,\n    DiskIOOpsPerSText,\n    DiskRBytesPerSSparkline,\n    DiskROpsPerSSparkline,\n    DiskWBytesPerSSparkline,\n    DiskWOpsPerSSparkline,\n)\nfrom mactop.panels.energy import IntelProcessorEnergyPanel\nfrom mactop.panels.loadavg import LoadAvgText\nfrom mactop.panels.m1_cpu import M1CPUEnergyPanel\nfrom mactop.panels.m1_gpu import GPUFreqText, GPUUsageBarPanel, M1GPUEnergyPanel\nfrom mactop.panels.m1cpu_freq import M1CPUFreqPanel\nfrom mactop.panels.network_iobyte_rate_text import NetworkIOByteRateText\nfrom mactop.panels.network_iopacket_rate_text import NetworkIOPacketRateText\nfrom mactop.panels.network_sparkline import (\n    NetworkIByteRateSparkline,\n    NetworkIPacketRateSparkline,\n    NetworkOByteRateSparkline,\n    NetworkOPacketRateSparkline,\n)\nfrom mactop.panels.sensors import SensorsPanel\nfrom mactop.panels.swap_memory import SwapMemoryInOutText, SwapMemoryUsageVBar\nfrom mactop.panels.tasks import TaskTable\nfrom mactop.panels.uptime import UptimeText\nfrom mactop.panels.virtual_memory import MemoryStatsText, MemoryUsageVBar\n\nPANELS = {\n    \"SensorsPanel\": SensorsPanel,\n    \"BatteryPanel\": BatteryPanel,\n    \"TaskTable\": TaskTable,\n    \"IntelProcessorEnergyPanel\": IntelProcessorEnergyPanel,\n    \"CPUTotalUsageBarPanel\": CPUTotalUsageBarPanel,\n    \"CPUTotalUsageTextPanel\": CPUTotalUsageTextPanel,\n    \"CPUUsageBarPanel\": CPUUsageBarPanel,\n    \"NetworkIOByteRateText\": NetworkIOByteRateText,\n    \"NetworkIByteRateSparkline\": NetworkIByteRateSparkline,\n    \"NetworkOByteRateSparkline\": NetworkOByteRateSparkline,\n    \"NetworkIPacketRateSparkline\": NetworkIPacketRateSparkline,\n    \"NetworkOPacketRateSparkline\": NetworkOPacketRateSparkline,\n    \"NetworkIOPacketRateText\": NetworkIOPacketRateText,\n    \"SwapMemoryInOutText\": SwapMemoryInOutText,\n    \"SwapMemoryUsageVBar\": SwapMemoryUsageVBar,\n    \"MemoryStatsText\": MemoryStatsText,\n    \"MemoryUsageVBar\": MemoryUsageVBar,\n    \"DiskIOOpsPerSText\": DiskIOOpsPerSText,\n    \"DiskIOBytesPerSText\": DiskIOBytesPerSText,\n    \"DiskROpsPerSSparkline\": DiskROpsPerSSparkline,\n    \"DiskWOpsPerSSparkline\": DiskWOpsPerSSparkline,\n    \"DiskRBytesPerSSparkline\": DiskRBytesPerSSparkline,\n    \"DiskWBytesPerSSparkline\": DiskWBytesPerSSparkline,\n    \"LoadAvgText\": LoadAvgText,\n    \"UptimeText\": UptimeText,\n    \"CPUFreqPanel\": CPUFreqPanel,\n    \"GPUFreqText\": GPUFreqText,\n    \"GPUUsageBarPanel\": GPUUsageBarPanel,\n    \"M1GPUEnergyPanel\": M1GPUEnergyPanel,\n    \"M1CPUEnergyPanel\": M1CPUEnergyPanel,\n    \"M1CPUFreqPanel\": M1CPUFreqPanel,\n    \"BacklightDisplayText\": BacklightDisplayText,\n}\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/_base.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/_base.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom mactop.widgets import LabeledSparkline\nfrom textual.app import ComposeResult\nfrom textual.widgets import Static\n\nlogger = logging.getLogger(__name__)\n\n\nclass BaseStatic(Static):\n    def __init__(self, refresh_interval, *args, **kwargs):\n        pass\n\n\nclass SparkLinePanelBase(BaseStatic):\n    DEFAULT_CSS = \"\"\"\n    SparkLinePanelBase {\n        height: 1;\n    }\n    \"\"\"\n\n    def __init__(\n        self, update_fn, label, reverse, show_value, value_format_fn, *args, **kwargs\n    ):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/battery.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/battery.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom dataclasses import dataclass\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets import DynamicText, LabelProgressWidget\nfrom textual.app import ComposeResult\nfrom textual.containers import Vertical\nfrom textual.reactive import reactive\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\nclass ChargerDispaly(BaseStatic):\n    adapter = reactive(None)\n    connected = reactive(None)\n    charging = reactive(None)\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_adapter(self) -> None:\n        pass\n\n    def watch_adapter(self, adapter) -> None:\n        pass\n\n\nclass BacklightDisplayText(BaseStatic):\n    backlight = reactive(\"loading\")\n\n    def on_mount(self) -> None:\n        \"\"\"Event handler called when widget is added to the app.\"\"\"\n        pass\n\n    def update_backlight(self) -> None:\n        pass\n\n    def watch_backlight(self, backlight: int) -> None:\n        pass\n\n\nclass BatteryHealthInfo(BaseStatic):\n    capacity = reactive(None)\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_capacity(self) -> None:\n        pass\n\n    def watch_capacity(self, capacity) -> None:\n        pass\n\n\n@dataclass\nclass BatteryState:\n    total_time: float = 0\n    history_accumulated: float = 0\n    minute_rate: float = 0\n    estimate_minutes: float = 0\n\n\nclass ChargingRateDisplay(BaseStatic):\n    battery_state = reactive(BatteryState())\n\n    def on_mount(self) -> None:\n        \"\"\"Event handler called when widget is added to the app.\"\"\"\n        pass\n\n    def _get_last_change(self, charging_history):\n        \"\"\"\n        Returns the last changed time range:\n        A 1, B 1, C 2, D 2, E 2, F 3, G 3\n        should return C 2 and F 3\n        \"\"\"\n        pass\n\n    def update_charing_history(self) -> None:\n        pass\n\n    def watch_battery_state(self, battery_state: BatteryState) -> None:\n        pass\n\n\nclass BatteryPanel(BaseStatic):\n    DEFAULT_CSS = \"\"\"\n    BatteryPanel {\n        border-title-align: left;\n    }\n    \"\"\"\n    BORDER_TITLE = \"Battery\"\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/cpu_freq.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/cpu_freq.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport math\nfrom functools import partial\nfrom typing import Callable\nfrom mactop import const\nfrom mactop.metrics_store import CPUCore, metrics\nfrom mactop.utils.formatting import hz_format\nfrom mactop.widgets import DynamicText, LabeledColorBar\nfrom rich.text import Text\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\ndef display_callback(core: CPUCore):\n    pass\n\n\nCSTATE_LABEL = \"[{0}]C [/{0}]\".format(const.COLOR_C_STATE)\nPSTATE_LABEL = Text.from_markup(\"[{0}] P[/{0}]\".format(const.COLOR_P_STATE))\nPSTATE_FN = lambda _: PSTATE_LABEL\nUNIT_WIDTH = 25\nUNIT_HEIGHT = 5\n\n\nclass CPUCoreBlock(BaseStatic):\n    DEFAULT_CSS = (\n        \"\"\"\n    CPUCoreBlock {\n      border: round $secondary;\n      border-title-style: bold;\n      border-title-align: center;\n      padding: 0 1;\n      width: %s;\n      height: 5;\n    }\n    \"\"\"\n        % UNIT_WIDTH\n    )\n\n    def __init__(self, index, update_fn: Callable[[], CPUCore], *args, **kwargs):\n        pass\n\n    def get_cp_state(self):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n    def render(self, *args, **kwargs):\n        pass\n\n\ndef get_package_info(core_index):\n    pass\n\n\nclass CPUFreqPanel(BaseStatic):\n    BORDER_TITLE = \"CPU Frequency\"\n    DEFAULT_CSS = \"\"\"\n    CPUFreqPanel {\n        layout: grid;\n        align: center middle;\n        min-height: 5;\n        grid-size-columns: 4;\n    }\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def on_resize(self, e):\n        pass\n\n    def compose(self):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/cpu_percpu_usage.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/cpu_percpu_usage.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom functools import partial\nfrom mactop import const\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import render_cpu_percentage_100\nfrom mactop.widgets import LabeledColorBar\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_percpu_percent(index):\n    pass\n\n\nclass CPUUsageBarPanel(BaseStatic):\n    BORDER_TITLE = \"CPU\"\n    DEFAULT_CSS = \"\"\"\n    CPUUsageBarPanel {\n        layout: grid;\n        grid-gutter: 0 1;\n    }\n    \"\"\"\n\n    def __init__(\n        self,\n        color_user=const.COLOR_USER,\n        color_nice=const.COLOR_NICE,\n        color_system=const.COLOR_SYSTEM,\n        color_idle=const.COLOR_IDLE,\n        columns=4,\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/cpu_total_usage_bar.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/cpu_total_usage_bar.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom mactop import const\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import render_cpu_percentage_1\nfrom mactop.widgets import LabeledColorBar\nfrom textual.app import ComposeResult\nfrom textual.containers import Vertical\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_cpu_percentage():\n    pass\n\n\nclass CPUTotalUsageBarPanel(BaseStatic):\n    BORDER_TITLE = \"CPU\"\n    DEFAULT_CSS = \"\"\"\n    CPUTotalUsageBarPanel {\n        height: 1;\n    }\n    \"\"\"\n\n    def __init__(\n        self,\n        color_user=const.COLOR_USER,\n        color_nice=const.COLOR_NICE,\n        color_system=const.COLOR_SYSTEM,\n        color_idle=const.COLOR_IDLE,\n        prefix=\"CPU: \",\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/cpu_total_usage_text.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/cpu_total_usage_text.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport textual\nfrom mactop import const\nfrom rich.console import RenderableType\nfrom rich.text import Text\nfrom textual.app import ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nfrom ._base import BaseStatic\nfrom .cpu_total_usage_bar import get_cpu_percentage\n\nlogger = logging.getLogger(__name__)\n\n\nclass Legend(Widget):\n    current_value = reactive(\"N/A\")\n\n    def __init__(self, legend_color, legend_text, *args, **kwargs) -> None:\n        pass\n\n    def render(self) -> RenderableType:\n        pass\n\n\nclass CPUTotalUsageTextPanel(BaseStatic):\n    BORDER_TITLE = \"CPU\"\n    DEFAULT_CSS = \"\"\"\n    CPUTotalUsageTextPanel {\n        layout: horizontal;\n        margin-top: 1;\n        border-title-align: left;\n        height: 1;\n    }\n\n    CPUTotalUsageTextPanel Legend {\n        content-align-horizontal: center;\n        width: 25%;\n    }\n    \"\"\"\n    percentages = reactive(None)\n\n    def __init__(\n        self,\n        color_user=const.COLOR_USER,\n        color_nice=const.COLOR_NICE,\n        color_system=const.COLOR_SYSTEM,\n        color_idle=const.COLOR_IDLE,\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def on_mount(self):\n        pass\n\n    def update_percentages(self):\n        pass\n\n    def _render_legend_value(self, percet):\n        pass\n\n    def watch_percentages(self, percentages):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/disk.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/disk.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import packet_speed_fmt, speed_sizeof_fmt\nfrom mactop.widgets import DynamicText\nfrom textual.app import ComposeResult\nfrom textual.widgets import Label\nfrom ._base import BaseStatic, SparkLinePanelBase\n\n\ndef format_ops(value):\n    pass\n\n\nclass DiskIOOpsPerSText(BaseStatic):\n    BORDER_TITLE = \"Disk IO\"\n    DEFAULT_CSS = \"\"\"\n    DiskIOOpsPerSText {\n        layout: horizontal;\n    }\n    DiskIOOpsPerSText .disk-io {\n        max-width: 19;\n    }\n    \"\"\"\n\n    def __init__(self, label=\"Disk: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\nclass DiskIOBytesPerSText(BaseStatic):\n    BORDER_TITLE = \"Disk IO\"\n    DEFAULT_CSS = \"\"\"\n    DiskIOBytesPerSText {\n        layout: horizontal;\n    }\n    DiskIOBytesPerSText .disk-io {\n        max-width: 19;\n    }\n    \"\"\"\n\n    def __init__(self, label=\"Disk: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\nclass DiskROpsPerSSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Disk Read Ops Per Second\"\n\n    def __init__(self, label=\"R: \", reverse=False, show_value=True, *args, **kwargs):\n        pass\n\n\nclass DiskWOpsPerSSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Disk Write Ops Per Second\"\n\n    def __init__(self, label=\"W: \", reverse=True, show_value=True, *args, **kwargs):\n        pass\n\n\nclass DiskRBytesPerSSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Disk Read Bytes Per Second\"\n\n    def __init__(self, label=\"R: \", reverse=False, show_value=True, *args, **kwargs):\n        pass\n\n\nclass DiskWBytesPerSSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Disk Write Bytes Per Second\"\n\n    def __init__(self, label=\"W: \", reverse=True, show_value=True, *args, **kwargs):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/energy.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/energy.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets import LabeledSparkline\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\nclass IntelProcessorEnergyPanel(BaseStatic):\n    BORDER_TITLE = \"Energy\"\n    DEFAULT_CSS = \"\"\"\n    IntelProcessorEnergyPanel {\n    }\n    \"\"\"\n\n    def __init__(self, label=\"CPU Power\", show_value=True, *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/loadavg.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/loadavg.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets import DynamicText\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\n\ndef refresh_callback(*_):\n    pass\n\n\nclass LoadAvgText(BaseStatic):\n    BORDER_TITLE = \"Load Average\"\n\n    def __init__(self, label=\"Load average: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/m1_cpu.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/m1_cpu.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets import LabeledSparkline\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\n\ndef get_cpu_energy():\n    pass\n\n\nclass M1CPUEnergyPanel(BaseStatic):\n    BORDER_TITLE = \"CPU Energy\"\n\n    def __init__(self, label=\"CPU Power\", show_value=True, *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/m1_gpu.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/m1_gpu.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop import const\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets import DynamicText, LabeledColorBar, LabeledSparkline\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\n\ndef refresh_callback(*_):\n    pass\n\n\nclass GPUFreqText(BaseStatic):\n    BORDER_TITLE = \"GPU Freq\"\n\n    def __init__(self, label=\"GPU Freq: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\ndef get_gpu_usage():\n    pass\n\n\ndef display_gpu_ration(x):\n    pass\n\n\nclass GPUUsageBarPanel(BaseStatic):\n    def __init__(\n        self,\n        color_busy=const.COLOR_USER,\n        color_idle=const.COLOR_IDLE,\n        label=\"GPU: \",\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\ndef get_gpu_energy():\n    pass\n\n\nclass M1GPUEnergyPanel(BaseStatic):\n    BORDER_TITLE = \"GPU Energy\"\n\n    def __init__(self, label=\"GPU Power\", show_value=True, *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/m1cpu_freq.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/m1cpu_freq.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom functools import partial\nfrom mactop import const\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import hz_format\nfrom mactop.widgets import DynamicText, LabeledColorBar\nfrom textual.app import ComposeResult\nfrom textual.containers import Grid\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_cluster(index):\n    pass\n\n\nclass M1CPUFreqPanel(BaseStatic):\n    BORDER_TITLE = \"CPU Frequency\"\n    DEFAULT_CSS = \"\"\"\n    M1CPUFreqPanel {\n        height: 7;\n    }\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def on_mount(self):\n        pass\n\n    def dynamic_mount_cpu_clusters(self):\n        pass\n\n    def compose(self):\n        pass\n\n\nclass M1CPUClusterBlock(BaseStatic):\n    DEFAULT_CSS = \"\"\"\n    M1CPUClusterBlock {\n      border: round $secondary;\n      border-title-style: bold;\n      border-title-align: center;\n      padding: 0 1;\n    }\n\n    M1CPUFreqPanel Static {\n      content-align-horizontal: center;\n    }\n\n    \"\"\"\n\n    def __init__(self, cluster_name, cluster_update_fn, *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/network_iobyte_rate_text.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/network_iobyte_rate_text.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import speed_sizeof_fmt\nfrom mactop.widgets import DynamicText\nfrom textual.app import ComposeResult\nfrom textual.widgets import Label\nfrom ._base import BaseStatic\n\n\nclass NetworkIOByteRateText(BaseStatic):\n    BORDER_TITLE = \"Network Byte Rate\"\n    DEFAULT_CSS = \"\"\"\n    NetworkIOByteRateText {\n        layout: horizontal;\n    }\n    NetworkIOByteRateText .network-speed {\n        max-width: 14;\n    }\n    \"\"\"\n\n    def __init__(self, label=\"Network: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/network_iopacket_rate_text.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/network_iopacket_rate_text.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import packet_speed_fmt\nfrom mactop.widgets import DynamicText\nfrom textual.app import ComposeResult\nfrom textual.widgets import Label\nfrom ._base import BaseStatic\n\n\nclass NetworkIOPacketRateText(BaseStatic):\n    BORDER_TITLE = \"Network Packet Rate\"\n    DEFAULT_CSS = \"\"\"\n    NetworkIOPacketRateText {\n        layout: horizontal;\n    }\n    NetworkIOPacketRateText .network-speed {\n        max-width: 19;\n    }\n    \"\"\"\n\n    def __init__(self, label=\"Network: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/network_sparkline.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/network_sparkline.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import packet_speed_fmt, speed_sizeof_fmt\nfrom ._base import SparkLinePanelBase\n\n\nclass NetworkIByteRateSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Network Input Byte Rate\"\n\n    def __init__(self, label=\" IN: \", reverse=False, show_value=True, *args, **kwargs):\n        pass\n\n\nclass NetworkOByteRateSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Network Output Byte Rate\"\n\n    def __init__(self, label=\"OUT: \", reverse=True, show_value=True, *args, **kwargs):\n        pass\n\n\nclass NetworkIPacketRateSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Network Input Packet Rate\"\n\n    def __init__(self, label=\" IN: \", reverse=False, show_value=True, *args, **kwargs):\n        pass\n\n\nclass NetworkOPacketRateSparkline(SparkLinePanelBase):\n    BORDER_TITLE = \"Network Output Packet Rate\"\n\n    def __init__(self, label=\"OUT: \", reverse=True, show_value=True, *args, **kwargs):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/sensors.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/sensors.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets.labeled_progress import LabelProgressWidget\nfrom textual.app import ComposeResult\nfrom textual.containers import Vertical\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\nclass SensorsPanel(BaseStatic):\n    BORDER_TITLE = \"Sensors\"\n    DEFAULT_CSS = \"\"\"\n    SensorsPanel {\n        border-title-align: left;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/swap_memory.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/swap_memory.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import sizeof_fmt, sizeof_fmt_plain\nfrom mactop.widgets import DynamicText, LabeledVStringBar\nfrom textual.app import ComposeResult\nfrom textual.widgets import Label\nfrom ._base import BaseStatic\n\n\nclass SwapMemoryInOutText(BaseStatic):\n    BORDER_TITLE = \"Swap memory\"\n    DEFAULT_CSS = \"\"\"\n    SwapMemoryInOutText {\n        layout: horizontal;\n    }\n    SwapMemoryInOutText .swap-memory-inout {\n        max-width: 20;\n    }\n    \"\"\"\n\n    def __init__(self, label=\"\", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\ndef get_swap_percentages():\n    pass\n\n\ndef get_swap_display(*_):\n    pass\n\n\nclass SwapMemoryUsageVBar(BaseStatic):\n    BORDER_TITLE = \"Swap memory\"\n\n    def __init__(self, label=\"Swp\", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/tasks.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/tasks.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom mactop.metrics_store import metrics\nfrom textual.reactive import reactive\nfrom textual.widgets import DataTable\nfrom textual.widgets.data_table import RowDoesNotExist\n\nlogger = logging.getLogger(__name__)\n\n\nclass TaskTable(DataTable):\n    tasks = reactive([])\n    show_columns = [\"pid\", \"name\", \"energy_impact\", \"cputime_ns\"]\n\n    def __init__(self, refresh_interval, *args, **kwargs):\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_tasks(self) -> None:\n        pass\n\n    def watch_tasks(self, tasks) -> None:\n        pass\n\n    def get_cursor_row_key(self):\n        pass\n\n    def reset_cursor(self, old_cursor_row_key):\n        pass\n\n    def _update_task(self, task, existing_keys):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/uptime.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/uptime.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport time\nfrom datetime import timedelta\nfrom mactop.metrics_store import metrics\nfrom mactop.widgets import DynamicText\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\n\ndef refresh_callback(*_):\n    pass\n\n\nclass UptimeText(BaseStatic):\n    BORDER_TITLE = \"Uptime\"\n\n    def __init__(self, label=\"Uptime: \", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/panels/virtual_memory.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/panels/virtual_memory.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom mactop.metrics_store import metrics\nfrom mactop.utils.formatting import sizeof_fmt_plain\nfrom mactop.widgets import DynamicText, LabeledVStringBar\nfrom textual.app import ComposeResult\nfrom ._base import BaseStatic\n\nlogger = logging.getLogger(__name__)\n\n\nclass MemoryStatsText(BaseStatic):\n    BORDER_TITLE = \"Memory\"\n    DEFAULT_CSS = \"\"\"\n    MemoryStatsText {\n      layout: grid;\n    }\n    \"\"\"\n\n    def __init__(self, label=\"\", columns=4, *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\ndef get_available_vm_percentages():\n    pass\n\n\ndef get_vm_display(*_):\n    pass\n\n\nclass MemoryUsageVBar(BaseStatic):\n    BORDER_TITLE = \"Memory\"\n\n    def __init__(self, label=\"Mem\", *args, **kwargs):\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/utils/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/utils/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom .rwlock import RWLock\n\n__all__ = [\"RWLock\"]\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/utils/formatting.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/utils/formatting.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom rich.text import Text\n\n\ndef sizeof_fmt_plain(num, suffix=\"B\"):\n    \"\"\"\n    credit: Fred Cirera\n      - https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size\n      - https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\n    \"\"\"\n    pass\n\n\ndef sizeof_fmt(num, suffix=\"B\"):\n    \"\"\"\n    return Text\n    \"\"\"\n    pass\n\n\ndef speed_sizeof_fmt(num, suffix=\"B\"):\n    \"\"\"\n    Return 11 chars constant\n    \"\"\"\n    pass\n\n\ndef packet_speed_fmt(num, suffix=\"packets/s\", align=\">\"):\n    \"\"\"\n    always return 16 chars\n    \"\"\"\n    pass\n\n\ndef render_cpu_percentage_1(percentages):\n    pass\n\n\ndef render_cpu_percentage_100(percentages):\n    pass\n\n\ndef hz_format(num, suffix=\"hz\"):\n    pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/utils/rwlock.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/utils/rwlock.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\n\"\"\" rwlock.py\n    A class to implement read-write locks on top of the standard threading\n    library.\n    This is implemented with two mutexes (threading.Lock instances) as per this\n    wikipedia pseudocode:\n    https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock#Using_two_mutexes\n    Code written by Tyler Neylon at Unbox Research.\n    This file is public domain.\n\ncredit: https://gist.github.com/tylerneylon/a7ff6017b7a1f9a506cf75aa23eacfd6\n\"\"\"\nfrom contextlib import contextmanager\nfrom threading import Lock\n\n\nclass RWLock(object):\n    \"\"\"RWLock class; this is meant to allow an object to be read from by\n    multiple threads, but only written to by a single thread at a time. See:\n    https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock\n    Usage:\n        from rwlock import RWLock\n        my_obj_rwlock = RWLock()\n        # When reading from my_obj:\n        with my_obj_rwlock.r_locked():\n            do_read_only_things_with(my_obj)\n        # When writing to my_obj:\n        with my_obj_rwlock.w_locked():\n            mutate(my_obj)\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def r_acquire(self):\n        pass\n\n    def r_release(self):\n        pass\n\n    @contextmanager\n    def r_locked(self):\n        \"\"\"This method is designed to be used via the `with` statement.\"\"\"\n        pass\n\n    def w_acquire(self):\n        pass\n\n    def w_release(self):\n        pass\n\n    @contextmanager\n    def w_locked(self):\n        \"\"\"This method is designed to be used via the `with` statement.\"\"\"\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/__init__.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/__init__.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom .colorbar import ColorBar\nfrom .dynamic_text import DynamicText\nfrom .labeled_colorbar import LabeledColorBar\nfrom .labeled_progress import LabelProgressWidget\nfrom .labeled_sparkline import LabeledSparkline\nfrom .labeled_vstringbar import LabeledVStringBar\nfrom .vstringbar import VStringBar\n\n__all__ = [\n    \"DynamicText\",\n    \"LabelProgressWidget\",\n    \"LabeledSparkline\",\n    \"ColorBar\",\n    \"LabeledColorBar\",\n    \"VStringBar\",\n    \"LabeledVStringBar\",\n]\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/colorbar.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/colorbar.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom rich.console import RenderableType\nfrom rich.style import Style\nfrom rich.text import Text\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\n\n\nclass ColorBar(Widget):\n    BARS = [\"\u258f\", \"\u258e\", \"\u258d\", \"\u258c\", \"\u258b\", \"\u258a\", \"\u2589\", \"\u2588\"]\n    percentages = reactive(None)\n\n    def __init__(\n        self,\n        color_choices,\n        percentages=None,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n        disabled: bool = False,\n    ) -> None:\n        pass\n\n    def render(self) -> RenderableType:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/dynamic_text.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/dynamic_text.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nimport textual\nfrom textual.app import ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widgets import Label, Static\n\nlogger = logging.getLogger(__name__)\n\n\nclass DynamicText(Static):\n    value = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    DynamicText {\n        layout: horizontal;\n    }\n    \n    \"\"\"\n\n    def __init__(\n        self,\n        prefix_label,\n        update_fn,\n        value_render_fn,\n        update_interval,\n        warning_threshold=None,\n        error_threshold=None,\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_value(self) -> None:\n        pass\n\n    def watch_value(self, value) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/header.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/header.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nfrom textual.app import RenderResult\nfrom textual.reactive import Reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Header\nfrom textual.widgets._header import HeaderClock, HeaderClockSpace, HeaderTitle\n\n\nclass HeaderIcon(Widget):\n    \"\"\"Display an 'icon' on the left of the header.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    HeaderIcon {\n        dock: left;\n        padding: 0 1;\n        width: 8;\n        content-align: left middle;\n    }\n    \"\"\"\n    icon = Reactive(\"\\uf8ff\")\n    \"\"\"The character to use as the icon within the header.\"\"\"\n\n    def render(self) -> RenderResult:\n        \"\"\"Render the header icon.\n\n        Returns:\n            The rendered icon.\n        \"\"\"\n        pass\n\n\nclass MactopHeader(Header):\n    def compose(self):\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/labeled_colorbar.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/labeled_colorbar.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport copy\nimport logging\nfrom typing import Callable, List\nimport textual\nfrom mactop.widgets import ColorBar\nfrom textual.app import ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widgets import Label, Static\n\nlogger = logging.getLogger(__name__)\n\n\nclass LabeledColorBar(Static):\n    percentages = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    LabeledColorBar {\n        layout: horizontal;\n    }\n    LabeledColorBar > ColorBar {\n        width: 1fr;\n    }\n    \"\"\"\n\n    def __init__(\n        self,\n        prefix_label,\n        color_choices,\n        update_interval,\n        percentages_update_fn: Callable[[], List[float]],\n        value_render_fn: Callable[[List[float]], str],\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_percentages(self) -> None:\n        pass\n\n    def watch_percentages(self, percentages) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/labeled_progress.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/labeled_progress.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom typing import Callable\nfrom textual.app import ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widgets import Label, ProgressBar, Static\n\nINTERVAL = 0.3\nlogger = logging.getLogger(__name__)\n\n\nclass LabelProgressWidget(Static):\n    value = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    LabelProgressWidget {\n        layout: horizontal;\n    }\n    \"\"\"\n\n    def __init__(\n        self,\n        prefix_label,\n        update_fn: Callable[[], float],\n        value_render_fn,\n        update_interval=INTERVAL,\n        progress_total=100,\n        progress_total_update_fn: (None | Callable[[], float]) = None,\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_value(self) -> None:\n        pass\n\n    def watch_value(self, value) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/labeled_sparkline.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/labeled_sparkline.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport copy\nimport logging\nfrom typing import Callable, List\nimport textual\nfrom rich.console import Console, ConsoleOptions, RenderResult\nfrom rich.segment import Segment\nfrom rich.style import Style\nfrom textual.app import ComposeResult, RenderResult\nfrom textual.reactive import reactive\nfrom textual.renderables._blend_colors import blend_colors\nfrom textual.renderables.sparkline import Sparkline as SparklineRenderable\nfrom textual.widgets import Label, Sparkline, Static\n\nlogger = logging.getLogger(__name__)\n\n\nclass LabeledSparkline(Static):\n    value = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    LabeledSparkline {\n        layout: horizontal;\n        height: 1;\n    }\n    LabeledSparkline > Sparkline {\n        width: 1fr;\n    }\n\n    LabeledSparkline .sparkline--max-color {\n        color: $warning;\n    }\n    LabeledSparkline .sparkline--min-color {\n        color: $warning 50%;\n    }\n\n    ReversedSparkline {\n        text-style: reverse;\n    }\n    \"\"\"\n\n    def __init__(\n        self,\n        prefix_label,\n        update_fn: Callable[[], List[float]],\n        value_render_fn,\n        update_interval=1.0,\n        sparkline_reverse=False,\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_value(self) -> None:\n        pass\n\n    def watch_value(self, value) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n\n\nclass ReversedSparklineRenderable(SparklineRenderable):\n    BARS = \"\u2587\u2586\u2585\u2584\u2583\u2582\u2581 \"\n\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        pass\n\n\nclass ReversedSparkline(Sparkline):\n    def render(self) -> RenderResult:\n        \"\"\"Renders the sparkline when there is data available.\"\"\"\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/labeled_vstringbar.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/labeled_vstringbar.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport copy\nimport logging\nfrom typing import Callable, List\nfrom mactop.widgets import VStringBar\nfrom textual.app import ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widgets import Label, Static\n\nlogger = logging.getLogger(__name__)\n\n\nclass LabeledVStringBar(Static):\n    percentages = reactive(None)\n    DEFAULT_CSS = \"\"\"\n    LabeledVStringBar {\n        layout: horizontal;\n    }\n    LabeledVStringBar > VStringBar {\n        width: 1fr;\n    }\n    \"\"\"\n\n    def __init__(\n        self,\n        prefix_label,\n        color_choices,\n        update_interval,\n        percentages_update_fn: Callable[[], List[float]],\n        value_render_fn: Callable[[List[float]], str],\n        *args,\n        **kwargs\n    ) -> None:\n        pass\n\n    def on_mount(self) -> None:\n        pass\n\n    def update_percentages(self) -> None:\n        pass\n\n    def watch_percentages(self, percentages) -> None:\n        pass\n\n    def compose(self) -> ComposeResult:\n        pass\n```"
    },
    {
        "readme": "# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```",
        "repo_sketch": ".\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py",
        "file_path": "mactop/widgets/vstringbar.py",
        "instruction": "Below is a detailed README.md of repository, repository sketch, as well as a file path. Please write a corresponding file sketch.\n\n---\nREADME.md\n---\n# mactop\n\nMactop is a tool like htop, but you can decide the data you want and decide the\nlayout. It is more like a Grafana for your macbook, but in terminal.\n\n## Usage\n\n```\nsudo mactop\n```\n\nIt requires `sudo` because `powermetrics` requires `sudo`, you can run `mactop`\nwithout `sudo` but some metrics will be missing.\n\nFor M1 Macbook users, please run:\n\n```\nsudo mactop -t m1.xml\n```\n\nWhat is `-t` here? It's for \"theme\"! And you can have your own theme!\n\n## Design Your Own Mactop\n\nWe use HTML + CSS style to setup the layout.\n\nYou can use `id` or `class` to select the element, like this:\n\n```html\n<Mactop>\n  <layout>\n    <Horizontal id=\"row-1\">\n      <SensorsPanel></SensorsPanel>\n    </Horizontal>\n  </layout>\n\n  <style>\n    #row-1 {\n      color: red;\n    }\n  </style>\n</Mactop>\n```\n\nSave your content to a file, for example, `my-theme.xml`, then run `mactop` with\n`mactop -t my-theme.xml`.\n\nComponents do not support inline-css, but you can set attributes on components.\n\nCommon attributes that every components support:\n\n- `id`;\n- `class` or `classes`, separated by space;\n- `refresh_interval`: set this will overwrite command line arguments\n  `--refresh-interval` for that component.\n\nFor component's supported attributes and component's name, please refer to\n`mactop/panels/__init__.py` and check the source code. Please bare with me, it\nis messy for now, I am working on documentations. If you have any questions,\nfeel free to open an issue.\n\nFor examples of layouts, you can refer `mactop/themes/` directory.\n\nIf you made some beautiful layout, please send it to me! By open a PR or issue,\nI can merge it into this repo, thanks.\n\n## Debug\n\nMactop comes with verbose log support.\n\n`-v` means enable `info` log, and more `v` means more logs, max `-vvv`.\n\n```shell\nmactop -vvv -l mactop.log\n```\n\nThen you can open another terminal `tail -f mactop.log` to see the logs.\n\nMactop use `powermetrics` to get metrics from your mactop, `powermetrics` is\ndifferent on different Macbooks. If you met some issue, better submit a\n`powermetrics` sample in the issue, thanks.\n\nUse this command (add `--debug`), Mactop will write json formatted powermetrics\nfile on your current `$(PWD)/debug_json`. (If you decide to paste it, only one\nsample (one file) is enough).\n\n```shell\n$ mactop -vvv -l mactop.log --debug\n$ ls debug_json\nmactop_debug_20231206_16:34:28.json  mactop_debug_20231206_16:41:55.json  mactop_debug_20231206_16:46:21.json\nmactop_debug_20231206_16:34:29.json  mactop_debug_20231206_16:44:46.json\n```\n\n---\nRepository Sketch\n---\nHere is a practicable repository sketch.\n\n```\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 mactop\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 const.py\n    \u251c\u2500\u2500 layout_loader.py\n    \u251c\u2500\u2500 main.py # from . import __version__;\n    \u251c\u2500\u2500 metrics_store.py # import psutil;\n    \u251c\u2500\u2500 layouts\n    |   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 metrics_source\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 ioreg.py\n    |   \u251c\u2500\u2500 powermetrics.py\n    |   \u2514\u2500\u2500 psutil_manager.py # import psutil;\n    \u251c\u2500\u2500 panels\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 _base.py\n    |   \u251c\u2500\u2500 battery.py\n    |   \u251c\u2500\u2500 cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_percpu_usage.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_bar.py # from mactop import const;\n    |   \u251c\u2500\u2500 cpu_total_usage_text.py # from mactop import const;\n    |   \u251c\u2500\u2500 disk.py\n    |   \u251c\u2500\u2500 energy.py\n    |   \u251c\u2500\u2500 loadavg.py\n    |   \u251c\u2500\u2500 m1_cpu.py\n    |   \u251c\u2500\u2500 m1_gpu.py # from mactop import const;\n    |   \u251c\u2500\u2500 m1cpu_freq.py # from mactop import const;\n    |   \u251c\u2500\u2500 network_iobyte_rate_text.py\n    |   \u251c\u2500\u2500 network_iopacket_rate_text.py\n    |   \u251c\u2500\u2500 network_sparkline.py\n    |   \u251c\u2500\u2500 sensors.py\n    |   \u251c\u2500\u2500 swap_memory.py\n    |   \u251c\u2500\u2500 tasks.py\n    |   \u251c\u2500\u2500 uptime.py\n    |   \u2514\u2500\u2500 virtual_memory.py\n    \u251c\u2500\u2500 utils\n    |   \u251c\u2500\u2500 __init__.py\n    |   \u251c\u2500\u2500 formatting.py\n    |   \u2514\u2500\u2500 rwlock.py\n    \u2514\u2500\u2500 widgets\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 colorbar.py\n        \u251c\u2500\u2500 dynamic_text.py\n        \u251c\u2500\u2500 header.py\n        \u251c\u2500\u2500 labeled_colorbar.py\n        \u251c\u2500\u2500 labeled_progress.py\n        \u251c\u2500\u2500 labeled_sparkline.py\n        \u251c\u2500\u2500 labeled_vstringbar.py\n        \u2514\u2500\u2500 vstringbar.py\n```\n\n---\nFile Path\n---\nmactop/widgets/vstringbar.py\n\n---\nFile Sketch\n---\n",
        "input": "",
        "output": "Here is a practicable file sketch.\n\n```python\nimport logging\nfrom rich.console import RenderableType\nfrom rich.style import Style\nfrom rich.text import Text\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\n\nlogger = logging.getLogger(__name__)\n\n\nclass VStringBar(Widget):\n    BAR = \"|\"\n    percentages = reactive(None)\n\n    def __init__(\n        self,\n        color_choices,\n        percentages=None,\n        last_empty=True,\n        name: (str | None) = None,\n        id: (str | None) = None,\n        classes: (str | None) = None,\n        disabled: bool = False,\n    ) -> None:\n        pass\n\n    def render(self) -> RenderableType:\n        pass\n\n    def render_content(self, width):\n        pass\n```"
    }
]